{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _color = _interopRequireDefault(require(\"color\"));\nvar _TextInputAdornment = _interopRequireWildcard(require(\"./Adornment/TextInputAdornment\"));\nvar _InputLabel = _interopRequireDefault(require(\"./Label/InputLabel\"));\nvar _LabelBackground = _interopRequireDefault(require(\"./Label/LabelBackground\"));\nvar _constants = require(\"./constants\");\nvar _helpers = require(\"./helpers\");\nvar _enums = require(\"./Adornment/enums\");\nvar _excluded = [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"outlineColor\", \"activeOutlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\"],\n  _excluded2 = [\"fontSize\", \"fontWeight\", \"fontVariant\", \"lineHeight\", \"height\", \"backgroundColor\", \"textAlign\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nvar LABEL_PADDING_TOP = 8;\nvar MIN_HEIGHT = 64;\nvar MIN_DENSE_HEIGHT = 48;\nvar INPUT_PADDING_HORIZONTAL = 14;\nvar TextInputOutlined = function TextInputOutlined(_ref) {\n  var _affixTopPosition, _onAffixChange, _topPosition;\n  var _ref$disabled = _ref.disabled,\n    disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n    _ref$editable = _ref.editable,\n    editable = _ref$editable === void 0 ? true : _ref$editable,\n    label = _ref.label,\n    _ref$error = _ref.error,\n    error = _ref$error === void 0 ? false : _ref$error,\n    selectionColor = _ref.selectionColor,\n    _underlineColor = _ref.underlineColor,\n    customOutlineColor = _ref.outlineColor,\n    activeOutlineColor = _ref.activeOutlineColor,\n    dense = _ref.dense,\n    style = _ref.style,\n    theme = _ref.theme,\n    _ref$render = _ref.render,\n    render = _ref$render === void 0 ? function (props) {\n      return React.createElement(_reactNative.TextInput, props);\n    } : _ref$render,\n    _ref$multiline = _ref.multiline,\n    multiline = _ref$multiline === void 0 ? false : _ref$multiline,\n    parentState = _ref.parentState,\n    innerRef = _ref.innerRef,\n    onFocus = _ref.onFocus,\n    forceFocus = _ref.forceFocus,\n    onBlur = _ref.onBlur,\n    onChangeText = _ref.onChangeText,\n    onLayoutAnimatedText = _ref.onLayoutAnimatedText,\n    onLeftAffixLayoutChange = _ref.onLeftAffixLayoutChange,\n    onRightAffixLayoutChange = _ref.onRightAffixLayoutChange,\n    left = _ref.left,\n    right = _ref.right,\n    placeholderTextColor = _ref.placeholderTextColor,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var adornmentConfig = (0, _TextInputAdornment.getAdornmentConfig)({\n    left: left,\n    right: right\n  });\n  var colors = theme.colors,\n    fonts = theme.fonts;\n  var font = fonts.regular;\n  var hasActiveOutline = parentState.focused || error;\n  var _ref4 = _reactNative.StyleSheet.flatten(style) || {},\n    fontSizeStyle = _ref4.fontSize,\n    fontWeight = _ref4.fontWeight,\n    fontVariant = _ref4.fontVariant,\n    lineHeight = _ref4.lineHeight,\n    height = _ref4.height,\n    _ref4$backgroundColor = _ref4.backgroundColor,\n    backgroundColor = _ref4$backgroundColor === void 0 ? colors.background : _ref4$backgroundColor,\n    textAlign = _ref4.textAlign,\n    viewStyle = (0, _objectWithoutProperties2.default)(_ref4, _excluded2);\n  var fontSize = fontSizeStyle || _constants.MAXIMIZED_LABEL_FONT_SIZE;\n  var inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n  if (disabled) {\n    var isTransparent = (0, _color.default)(customOutlineColor).alpha() === 0;\n    inputTextColor = activeColor = (0, _color.default)(colors.text).alpha(0.54).rgb().string();\n    placeholderColor = colors.disabled;\n    outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    outlineColor = customOutlineColor || colors.placeholder;\n    errorColor = colors.error;\n  }\n  var labelScale = _constants.MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  var fontScale = _constants.MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  var labelWidth = parentState.labelLayout.width;\n  var labelHeight = parentState.labelLayout.height;\n  var labelHalfWidth = labelWidth / 2;\n  var labelHalfHeight = labelHeight / 2;\n  var baseLabelTranslateX = (_reactNative.I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - _constants.MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n  var labelTranslationXOffset = 0;\n  var isAdornmentLeftIcon = adornmentConfig.some(function (_ref2) {\n    var side = _ref2.side,\n      type = _ref2.type;\n    return side === _enums.AdornmentSide.Left && type === _enums.AdornmentType.Icon;\n  });\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset = (_reactNative.I18nManager.isRTL ? -1 : 1) * (_constants.ADORNMENT_SIZE + _constants.ADORNMENT_OFFSET - 8);\n  }\n  var minInputHeight = (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n  var inputHeight = (0, _helpers.calculateInputHeight)(labelHeight, height, minInputHeight);\n  var topPosition = (0, _helpers.calculateLabelTopPosition)(labelHeight, inputHeight, LABEL_PADDING_TOP);\n  if (height && typeof height !== 'number') {\n    console.warn('Currently we support only numbers in height prop');\n  }\n  var paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight: labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition: topPosition,\n    fontSize: fontSize,\n    lineHeight: lineHeight,\n    label: label,\n    scale: fontScale,\n    isAndroid: _reactNative.Platform.OS === 'android',\n    styles: _reactNative.StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n  };\n  var pad = (0, _helpers.calculatePadding)(paddingSettings);\n  var paddingOut = (0, _helpers.adjustPaddingOut)(Object.assign({}, paddingSettings, {\n    pad: pad\n  }));\n  var baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n  var placeholderOpacity = hasActiveOutline ? (0, _helpers.interpolatePlaceholder)(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n  var labelProps = {\n    label: label,\n    onLayoutAnimatedText: onLayoutAnimatedText,\n    placeholderOpacity: placeholderOpacity,\n    error: error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY: baseLabelTranslateY,\n    baseLabelTranslateX: baseLabelTranslateX,\n    font: font,\n    fontSize: fontSize,\n    fontWeight: fontWeight,\n    labelScale: labelScale,\n    wiggleOffsetX: _constants.LABEL_WIGGLE_X_OFFSET,\n    topPosition: topPosition,\n    hasActiveOutline: hasActiveOutline,\n    activeColor: activeColor,\n    placeholderColor: placeholderColor,\n    backgroundColor: backgroundColor,\n    errorColor: errorColor,\n    labelTranslationXOffset: labelTranslationXOffset,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n  var minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);\n  var leftLayout = parentState.leftLayout,\n    rightLayout = parentState.rightLayout;\n  var leftAffixTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({\n    height: minHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({\n    height: minHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var iconTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({\n    height: minHeight,\n    affixHeight: _constants.ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixWidth = right ? rightLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;\n  var leftAffixWidth = left ? leftLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;\n  var adornmentStyleAdjustmentForNativeInput = (0, _TextInputAdornment.getAdornmentStyleAdjustmentForNativeInput)({\n    adornmentConfig: adornmentConfig,\n    rightAffixWidth: rightAffixWidth,\n    leftAffixWidth: leftAffixWidth,\n    mode: 'outlined'\n  });\n  var affixTopPosition = (_affixTopPosition = {}, (0, _defineProperty2.default)(_affixTopPosition, _enums.AdornmentSide.Left, leftAffixTopPosition), (0, _defineProperty2.default)(_affixTopPosition, _enums.AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n  var onAffixChange = (_onAffixChange = {}, (0, _defineProperty2.default)(_onAffixChange, _enums.AdornmentSide.Left, onLeftAffixLayoutChange), (0, _defineProperty2.default)(_onAffixChange, _enums.AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n  var adornmentProps = {\n    adornmentConfig: adornmentConfig,\n    forceFocus: forceFocus,\n    topPosition: (_topPosition = {}, (0, _defineProperty2.default)(_topPosition, _enums.AdornmentType.Icon, iconTopPosition), (0, _defineProperty2.default)(_topPosition, _enums.AdornmentType.Affix, affixTopPosition), _topPosition),\n    onAffixChange: onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = Object.assign({}, adornmentProps, {\n      left: left,\n      right: right,\n      textStyle: Object.assign({}, font, {\n        fontSize: fontSize,\n        fontWeight: fontWeight\n      }),\n      visible: parentState.labeled\n    });\n  }\n  return React.createElement(_reactNative.View, {\n    style: viewStyle\n  }, React.createElement(Outline, {\n    theme: theme,\n    hasActiveOutline: hasActiveOutline,\n    focused: parentState.focused,\n    activeColor: activeColor,\n    outlineColor: outlineColor,\n    backgroundColor: backgroundColor\n  }), React.createElement(_reactNative.View, null, React.createElement(_reactNative.View, {\n    style: [styles.labelContainer, {\n      paddingTop: LABEL_PADDING_TOP,\n      minHeight: minHeight\n    }]\n  }, React.createElement(_InputLabel.default, {\n    parentState: parentState,\n    labelProps: labelProps,\n    labelBackground: _LabelBackground.default,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  }), render === null || render === void 0 ? void 0 : render(Object.assign({\n    testID: 'text-input-outlined'\n  }, rest, {\n    ref: innerRef,\n    onChangeText: onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor || placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline: multiline,\n    style: [styles.input, !multiline || multiline && height ? {\n      height: inputHeight\n    } : {}, paddingOut, Object.assign({}, font, {\n      fontSize: fontSize,\n      fontWeight: fontWeight,\n      fontVariant: fontVariant,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : _reactNative.I18nManager.isRTL ? 'right' : 'left'\n    }), _reactNative.Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput]\n  }))), React.createElement(_TextInputAdornment.default, adornmentProps)));\n};\nvar _default = TextInputOutlined;\nexports.default = _default;\nvar Outline = function Outline(_ref3) {\n  var theme = _ref3.theme,\n    hasActiveOutline = _ref3.hasActiveOutline,\n    activeColor = _ref3.activeColor,\n    outlineColor = _ref3.outlineColor,\n    focused = _ref3.focused,\n    backgroundColor = _ref3.backgroundColor;\n  return React.createElement(_reactNative.View, {\n    testID: \"text-input-outline\",\n    pointerEvents: \"none\",\n    style: [styles.outline,\n    {\n      backgroundColor: backgroundColor,\n      borderRadius: theme.roundness,\n      borderWidth: focused ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }]\n  });\n};\nvar styles = _reactNative.StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  labelContainer: {\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"mappings":"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","names":["OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","_ref","disabled","editable","label","error","selectionColor","_underlineColor","underlineColor","customOutlineColor","outlineColor","activeOutlineColor","dense","style","theme","render","props","React","NativeTextInput","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","rest","adornmentConfig","getAdornmentConfig","colors","fonts","font","regular","hasActiveOutline","focused","StyleSheet","flatten","fontSizeStyle","fontSize","fontWeight","fontVariant","lineHeight","height","backgroundColor","background","textAlign","viewStyle","MAXIMIZED_LABEL_FONT_SIZE","inputTextColor","activeColor","placeholderColor","errorColor","isTransparent","color","alpha","text","rgb","string","primary","placeholder","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","isRTL","labelTranslationXOffset","isAdornmentLeftIcon","some","side","_ref2","type","AdornmentSide","Left","AdornmentType","Icon","ADORNMENT_SIZE","ADORNMENT_OFFSET","minInputHeight","inputHeight","calculateInputHeight","topPosition","calculateLabelTopPosition","console","warn","paddingSettings","offset","scale","isAndroid","Platform","OS","styles","inputOutlinedDense","inputOutlined","pad","calculatePadding","paddingOut","adjustPaddingOut","baseLabelTranslateY","placeholderOpacity","interpolatePlaceholder","labeled","measured","labelProps","placeholderStyle","wiggleOffsetX","LABEL_WIGGLE_X_OFFSET","roundness","maxFontSizeMultiplier","minHeight","leftLayout","rightLayout","leftAffixTopPosition","calculateOutlinedIconAndAffixTopPosition","affixHeight","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","getAdornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","Right","onAffixChange","adornmentProps","Affix","isTextInputFocused","length","textStyle","visible","View","Outline","labelContainer","paddingTop","InputLabel","labelBackground","LabelBackground","testID","ref","underlineColorAndroid","input","textAlignVertical","outline","TextInputAdornment","_ref3","pointerEvents","borderRadius","borderWidth","borderColor","create","position","paddingHorizontal","top","bottom","paddingBottom","flexGrow","margin","zIndex"],"sources":["TextInputOutlined.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n} from 'react-native';\nimport color from 'color';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  ADORNMENT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n} from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nconst TextInputOutlined = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor: _underlineColor,\n  outlineColor: customOutlineColor,\n  activeOutlineColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  ...rest\n}: ChildTextInputProps) => {\n  const adornmentConfig = getAdornmentConfig({ left, right });\n\n  const { colors, fonts } = theme;\n  const font = fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    fontVariant,\n    lineHeight,\n    height,\n    backgroundColor = colors.background,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n  if (disabled) {\n    const isTransparent = color(customOutlineColor).alpha() === 0;\n    inputTextColor = activeColor = color(colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n    placeholderColor = colors.disabled;\n    outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    outlineColor = customOutlineColor || colors.placeholder;\n    errorColor = colors.error;\n  }\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.isRTL ? 1 : -1) *\n    (labelHalfWidth -\n      (labelScale * labelWidth) / 2 -\n      (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n  let labelTranslationXOffset = 0;\n  const isAdornmentLeftIcon = adornmentConfig.some(\n    ({ side, type }) =>\n      side === AdornmentSide.Left && type === AdornmentType.Icon\n  );\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset =\n      (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n  }\n\n  const minInputHeight =\n    (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    LABEL_PADDING_TOP\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(\n      dense ? styles.inputOutlinedDense : styles.inputOutlined\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    backgroundColor: backgroundColor as ColorValue,\n    errorColor,\n    labelTranslationXOffset,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n\n  const minHeight = (height ||\n    (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT)) as number;\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n  const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      mode: 'outlined',\n    });\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Icon]: iconTopPosition,\n      [AdornmentType.Affix]: affixTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={viewStyle}>\n      {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n      <Outline\n        theme={theme}\n        hasActiveOutline={hasActiveOutline}\n        focused={parentState.focused}\n        activeColor={activeColor}\n        outlineColor={outlineColor}\n        backgroundColor={backgroundColor}\n      />\n      <View>\n        <View\n          style={[\n            styles.labelContainer,\n            {\n              paddingTop: LABEL_PADDING_TOP,\n              minHeight,\n            },\n          ]}\n        >\n          <InputLabel\n            parentState={parentState}\n            labelProps={labelProps}\n            labelBackground={LabelBackground}\n            maxFontSizeMultiplier={rest.maxFontSizeMultiplier}\n          />\n          {render?.({\n            testID: 'text-input-outlined',\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            placeholder: label ? parentState.placeholder : rest.placeholder,\n            placeholderTextColor: placeholderTextColor || placeholderColor,\n            editable: !disabled && editable,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              !multiline || (multiline && height)\n                ? { height: inputHeight }\n                : {},\n              paddingOut,\n              {\n                ...font,\n                fontSize,\n                fontWeight,\n                fontVariant,\n                color: inputTextColor,\n                textAlignVertical: multiline ? 'top' : 'center',\n                textAlign: textAlign\n                  ? textAlign\n                  : I18nManager.isRTL\n                  ? 'right'\n                  : 'left',\n              },\n              Platform.OS === 'web' && { outline: 'none' },\n              adornmentStyleAdjustmentForNativeInput,\n            ],\n          } as RenderProps)}\n        </View>\n        <TextInputAdornment {...adornmentProps} />\n      </View>\n    </View>\n  );\n};\n\nexport default TextInputOutlined;\n\ntype OutlineProps = {\n  activeColor: string;\n  hasActiveOutline?: boolean;\n  focused?: boolean;\n  outlineColor?: string;\n  backgroundColor: ColorValue;\n  theme: ReactNativePaper.Theme;\n};\n\nconst Outline = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  focused,\n  backgroundColor,\n}: OutlineProps) => (\n  <View\n    testID=\"text-input-outline\"\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: theme.roundness,\n        borderWidth: focused ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  labelContainer: {\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}