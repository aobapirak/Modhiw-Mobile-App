{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SingleNavigatorContext = void 0;\nexports.default = EnsureSingleNavigator;\nvar React = _interopRequireWildcard(require(\"react\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar MULTIPLE_NAVIGATOR_ERROR = \"Another navigator is already registered for this container. You likely have multiple navigators under a single \\\"NavigationContainer\\\" or \\\"Screen\\\". Make sure each navigator is under a separate \\\"Screen\\\" container. See https://reactnavigation.org/docs/nesting-navigators for a guide on nesting.\";\nvar SingleNavigatorContext = React.createContext(undefined);\nexports.SingleNavigatorContext = SingleNavigatorContext;\n\nfunction EnsureSingleNavigator(_ref) {\n  var children = _ref.children;\n  var navigatorKeyRef = React.useRef();\n  var value = React.useMemo(function () {\n    return {\n      register: function register(key) {\n        var currentKey = navigatorKeyRef.current;\n        if (currentKey !== undefined && key !== currentKey) {\n          throw new Error(MULTIPLE_NAVIGATOR_ERROR);\n        }\n        navigatorKeyRef.current = key;\n      },\n      unregister: function unregister(key) {\n        var currentKey = navigatorKeyRef.current;\n        if (key !== currentKey) {\n          return;\n        }\n        navigatorKeyRef.current = undefined;\n      }\n    };\n  }, []);\n  return React.createElement(SingleNavigatorContext.Provider, {\n    value: value\n  }, children);\n}","map":{"version":3,"mappings":";;;;;AAAA;AAAA;AAAA;AAMA,IAAMA,wBAAwB,6SAA9B;AAEO,IAAMC,sBAAsB,GAAGC,KAAK,CAACC,aAAN,CAMpCC,SANoC,CAA/B;AAAA;;AAWQ,SAASC,qBAAT,OAAoD;EAAA,IAAnBC,WAAmBC,KAAnBD;EAC9C,IAAME,eAAe,GAAGN,KAAK,CAACO,MAAN,EAAxB;EAEA,IAAMC,KAAK,GAAGR,KAAK,CAACS,OAAN,CACZ;IAAA,OAAO;MACLC,QAAQ,oBAACC,GAAD,EAAc;QACpB,IAAMC,UAAU,GAAGN,eAAe,CAACO,OAAnC;QAEA,IAAID,UAAU,KAAKV,SAAf,IAA4BS,GAAG,KAAKC,UAAxC,EAAoD;UAClD,MAAM,IAAIE,KAAJ,CAAUhB,wBAAV,CAAN;QACD;QAEDQ,eAAe,CAACO,OAAhB,GAA0BF,GAA1B;MACD,CATI;MAULI,UAAU,sBAACJ,GAAD,EAAc;QACtB,IAAMC,UAAU,GAAGN,eAAe,CAACO,OAAnC;QAEA,IAAIF,GAAG,KAAKC,UAAZ,EAAwB;UACtB;QACD;QAEDN,eAAe,CAACO,OAAhB,GAA0BX,SAA1B;MACD;IAlBI,CAAP;EAAA,CADY,EAqBZ,EArBY,CAAd;EAwBA,OACEF,oBAACD,sBAAD,CAAwBiB,QAAxB;IAAiCR,KAAK,EAAEA;EAAxC,GACGJ,QADH,CADF;AAKD","names":["MULTIPLE_NAVIGATOR_ERROR","SingleNavigatorContext","React","createContext","undefined","EnsureSingleNavigator","children","_ref","navigatorKeyRef","useRef","value","useMemo","register","key","currentKey","current","Error","unregister","Provider"],"sources":["EnsureSingleNavigator.tsx"],"sourcesContent":["import * as React from 'react';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst MULTIPLE_NAVIGATOR_ERROR = `Another navigator is already registered for this container. You likely have multiple navigators under a single \"NavigationContainer\" or \"Screen\". Make sure each navigator is under a separate \"Screen\" container. See https://reactnavigation.org/docs/nesting-navigators for a guide on nesting.`;\n\nexport const SingleNavigatorContext = React.createContext<\n  | {\n      register(key: string): void;\n      unregister(key: string): void;\n    }\n  | undefined\n>(undefined);\n\n/**\n * Component which ensures that there's only one navigator nested under it.\n */\nexport default function EnsureSingleNavigator({ children }: Props) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n\n  const value = React.useMemo(\n    () => ({\n      register(key: string) {\n        const currentKey = navigatorKeyRef.current;\n\n        if (currentKey !== undefined && key !== currentKey) {\n          throw new Error(MULTIPLE_NAVIGATOR_ERROR);\n        }\n\n        navigatorKeyRef.current = key;\n      },\n      unregister(key: string) {\n        const currentKey = navigatorKeyRef.current;\n\n        if (key !== currentKey) {\n          return;\n        }\n\n        navigatorKeyRef.current = undefined;\n      },\n    }),\n    []\n  );\n\n  return (\n    <SingleNavigatorContext.Provider value={value}>\n      {children}\n    </SingleNavigatorContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"script"}