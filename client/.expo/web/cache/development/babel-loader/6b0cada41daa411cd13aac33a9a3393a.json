{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar DialogScrollArea = function DialogScrollArea(props) {\n  return React.createElement(_reactNative.View, _extends({}, props, {\n    style: [styles.container, props.style]\n  }), props.children);\n};\nDialogScrollArea.displayName = 'Dialog.ScrollArea';\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    borderColor: 'rgba(0, 0, 0, .12)',\n    borderTopWidth: _reactNative.StyleSheet.hairlineWidth,\n    borderBottomWidth: _reactNative.StyleSheet.hairlineWidth,\n    paddingHorizontal: 24,\n    flexGrow: 1,\n    flexShrink: 1\n  }\n});\nvar _default = DialogScrollArea;\nexports.default = _default;","map":{"version":3,"mappings":";;;;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;AA+CA,IAAMA,gBAAgB,GAAIC,SAApBD,gBAAgB,CAAIC,KAAD;EAAA,OACvBC,oBAACC,iBAAD,eAAUF,KAAV;IAAiBG,KAAK,EAAE,CAACC,MAAM,CAACC,SAAR,EAAmBL,KAAK,CAACG,KAAzB;EAAxB,IACGH,KAAK,CAACM,QADT,CADF;AAAA;AAMAP,gBAAgB,CAACQ,WAAjB,GAA+B,mBAA/B;AAEA,IAAMH,MAAM,GAAGI,uBAAU,CAACC,MAAX,CAAkB;EAC/BJ,SAAS,EAAE;IACTK,WAAW,EAAE,oBADJ;IAETC,cAAc,EAAEH,uBAAU,CAACI,aAFlB;IAGTC,iBAAiB,EAAEL,uBAAU,CAACI,aAHrB;IAITE,iBAAiB,EAAE,EAJV;IAKTC,QAAQ,EAAE,CALD;IAMTC,UAAU,EAAE;EANH;AADoB,CAAlB,CAAf;AAAA,eAWejB,gBAAf;AAAA","names":["DialogScrollArea","props","React","View","style","styles","container","children","displayName","StyleSheet","create","borderColor","borderTopWidth","hairlineWidth","borderBottomWidth","paddingHorizontal","flexGrow","flexShrink"],"sources":["DialogScrollArea.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, StyleSheet, StyleProp } from 'react-native';\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `DialogScrollArea`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show a scrollable content in a Dialog. The component only provides appropriate styling.\n * For the scrollable content you can use `ScrollView`, `FlatList` etc. depending on your requirement.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/dialog-scroll-area.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ScrollView } from 'react-native';\n * import { Dialog, Portal, Text } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <Portal>\n *       <Dialog visible={visible} onDismiss={hideDialog}>\n *         <Dialog.ScrollArea>\n *           <ScrollView contentContainerStyle={{paddingHorizontal: 24}}>\n *             <Text>This is a scrollable area</Text>\n *           </ScrollView>\n *         </Dialog.ScrollArea>\n *       </Dialog>\n *     </Portal>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst DialogScrollArea = (props: Props) => (\n  <View {...props} style={[styles.container, props.style]}>\n    {props.children}\n  </View>\n);\n\nDialogScrollArea.displayName = 'Dialog.ScrollArea';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderColor: 'rgba(0, 0, 0, .12)',\n    borderTopWidth: StyleSheet.hairlineWidth,\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    paddingHorizontal: 24,\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n});\n\nexport default DialogScrollArea;\n"]},"metadata":{},"sourceType":"script"}