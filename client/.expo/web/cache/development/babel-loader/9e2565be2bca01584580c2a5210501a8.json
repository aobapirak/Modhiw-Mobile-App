{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _AnimatedText = _interopRequireDefault(require(\"../../Typography/AnimatedText\"));\nvar InputLabel = function InputLabel(props) {\n  var parentState = props.parentState,\n    labelBackground = props.labelBackground;\n  var _props$labelProps = props.labelProps,\n    label = _props$labelProps.label,\n    error = _props$labelProps.error,\n    onLayoutAnimatedText = _props$labelProps.onLayoutAnimatedText,\n    hasActiveOutline = _props$labelProps.hasActiveOutline,\n    activeColor = _props$labelProps.activeColor,\n    placeholderStyle = _props$labelProps.placeholderStyle,\n    baseLabelTranslateX = _props$labelProps.baseLabelTranslateX,\n    baseLabelTranslateY = _props$labelProps.baseLabelTranslateY,\n    font = _props$labelProps.font,\n    fontSize = _props$labelProps.fontSize,\n    fontWeight = _props$labelProps.fontWeight,\n    placeholderOpacity = _props$labelProps.placeholderOpacity,\n    wiggleOffsetX = _props$labelProps.wiggleOffsetX,\n    labelScale = _props$labelProps.labelScale,\n    topPosition = _props$labelProps.topPosition,\n    paddingOffset = _props$labelProps.paddingOffset,\n    placeholderColor = _props$labelProps.placeholderColor,\n    errorColor = _props$labelProps.errorColor,\n    labelTranslationXOffset = _props$labelProps.labelTranslationXOffset,\n    maxFontSizeMultiplier = _props$labelProps.maxFontSizeMultiplier;\n  var labelTranslationX = {\n    transform: [{\n      translateX: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0]\n      })\n    }]\n  };\n  var labelStyle = Object.assign({}, font, {\n    fontSize: fontSize,\n    fontWeight: fontWeight,\n    transform: [{\n      translateX: parentState.error.interpolate({\n        inputRange: [0, 0.5, 1],\n        outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0]\n      })\n    }, {\n      translateY: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [baseLabelTranslateY, 0]\n      })\n    }, {\n      scale: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [labelScale, 1]\n      })\n    }]\n  });\n  return label ?\n  _react.default.createElement(_reactNative.Animated.View, {\n    pointerEvents: \"none\",\n    style: [_reactNative.StyleSheet.absoluteFill, styles.labelContainer, {\n      opacity:\n      parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1\n    }, labelTranslationX]\n  }, labelBackground === null || labelBackground === void 0 ? void 0 : labelBackground({\n    parentState: parentState,\n    labelStyle: labelStyle,\n    labelProps: props.labelProps,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }), _react.default.createElement(_AnimatedText.default, {\n    onLayout: onLayoutAnimatedText,\n    style: [placeholderStyle, {\n      top: topPosition\n    }, labelStyle, paddingOffset || {}, {\n      color: activeColor,\n      opacity: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [hasActiveOutline ? 1 : 0, 0]\n      })\n    }],\n    numberOfLines: 1,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }, label), _react.default.createElement(_AnimatedText.default, {\n    style: [placeholderStyle, {\n      top: topPosition\n    }, labelStyle, paddingOffset, {\n      color: error && errorColor ? errorColor : placeholderColor,\n      opacity: placeholderOpacity\n    }],\n    numberOfLines: 1,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }, label)) : null;\n};\nvar styles = _reactNative.StyleSheet.create({\n  labelContainer: {\n    zIndex: 3\n  }\n});\nvar _default = InputLabel;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["InputLabel","props","parentState","labelBackground","labelProps","label","error","onLayoutAnimatedText","hasActiveOutline","activeColor","placeholderStyle","baseLabelTranslateX","baseLabelTranslateY","font","fontSize","fontWeight","placeholderOpacity","wiggleOffsetX","labelScale","topPosition","paddingOffset","placeholderColor","errorColor","labelTranslationXOffset","maxFontSizeMultiplier","labelTranslationX","transform","translateX","labeled","interpolate","inputRange","outputRange","labelStyle","value","translateY","scale","React","Animated","View","pointerEvents","style","StyleSheet","absoluteFill","styles","labelContainer","opacity","focused","labelLayout","measured","AnimatedText","onLayout","top","color","numberOfLines","create","zIndex"],"sources":["InputLabel.tsx"],"sourcesContent":["import React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport AnimatedText from '../../Typography/AnimatedText';\n\nimport type { InputLabelProps } from '../types';\n\nconst InputLabel = (props: InputLabelProps) => {\n  const { parentState, labelBackground } = props;\n\n  const {\n    label,\n    error,\n    onLayoutAnimatedText,\n    hasActiveOutline,\n    activeColor,\n    placeholderStyle,\n    baseLabelTranslateX,\n    baseLabelTranslateY,\n    font,\n    fontSize,\n    fontWeight,\n    placeholderOpacity,\n    wiggleOffsetX,\n    labelScale,\n    topPosition,\n    paddingOffset,\n    placeholderColor,\n    errorColor,\n    labelTranslationXOffset,\n    maxFontSizeMultiplier,\n  } = props.labelProps;\n\n  const labelTranslationX = {\n    transform: [\n      {\n        // Offset label scale since RN doesn't support transform origin\n        translateX: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0],\n        }),\n      },\n    ],\n  };\n\n  const labelStyle = {\n    ...font,\n    fontSize,\n    fontWeight,\n    transform: [\n      {\n        // Wiggle the label when there's an error\n        translateX: parentState.error.interpolate({\n          inputRange: [0, 0.5, 1],\n          outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0],\n        }),\n      },\n      {\n        // Move label to top\n        translateY: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateY, 0],\n        }),\n      },\n      {\n        // Make label smaller\n        scale: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [labelScale, 1],\n        }),\n      },\n    ],\n  };\n\n  return label ? (\n    // Position colored placeholder and gray placeholder on top of each other and crossfade them\n    // This gives the effect of animating the color, but allows us to use native driver\n    <Animated.View\n      pointerEvents=\"none\"\n      style={[\n        StyleSheet.absoluteFill,\n        styles.labelContainer,\n        {\n          opacity:\n            // Hide the label in minimized state until we measure it's width\n            parentState.value || parentState.focused\n              ? parentState.labelLayout.measured\n                ? 1\n                : 0\n              : 1,\n        },\n        labelTranslationX,\n      ]}\n    >\n      {labelBackground?.({\n        parentState,\n        labelStyle,\n        labelProps: props.labelProps,\n        maxFontSizeMultiplier: maxFontSizeMultiplier,\n      })}\n      <AnimatedText\n        onLayout={onLayoutAnimatedText}\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset || {},\n          {\n            color: activeColor,\n            opacity: parentState.labeled.interpolate({\n              inputRange: [0, 1],\n              outputRange: [hasActiveOutline ? 1 : 0, 0],\n            }),\n          },\n        ]}\n        numberOfLines={1}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n      >\n        {label}\n      </AnimatedText>\n      <AnimatedText\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset,\n          {\n            color: error && errorColor ? errorColor : placeholderColor,\n            opacity: placeholderOpacity,\n          },\n        ]}\n        numberOfLines={1}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n      >\n        {label}\n      </AnimatedText>\n    </Animated.View>\n  ) : null;\n};\n\nconst styles = StyleSheet.create({\n  labelContainer: {\n    zIndex: 3,\n  },\n});\n\nexport default InputLabel;\n"]},"metadata":{},"sourceType":"script"}