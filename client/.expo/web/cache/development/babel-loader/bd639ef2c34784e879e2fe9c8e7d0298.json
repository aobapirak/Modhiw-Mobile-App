{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.DEFAULT_APPBAR_HEIGHT = exports.Appbar = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _color = _interopRequireDefault(require(\"color\"));\nvar _AppbarContent = _interopRequireDefault(require(\"./AppbarContent\"));\nvar _AppbarAction = _interopRequireDefault(require(\"./AppbarAction\"));\nvar _AppbarBackAction = _interopRequireDefault(require(\"./AppbarBackAction\"));\nvar _Surface = _interopRequireDefault(require(\"../Surface\"));\nvar _theming = require(\"../../core/theming\");\nvar _colors = require(\"../../styles/colors\");\nvar _overlay = _interopRequireDefault(require(\"../../styles/overlay\"));\nvar _excluded = [\"children\", \"dark\", \"style\", \"theme\"],\n  _excluded2 = [\"backgroundColor\", \"elevation\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar DEFAULT_APPBAR_HEIGHT = 56;\nexports.DEFAULT_APPBAR_HEIGHT = DEFAULT_APPBAR_HEIGHT;\n\nvar Appbar = function Appbar(_ref) {\n  var children = _ref.children,\n    dark = _ref.dark,\n    style = _ref.style,\n    theme = _ref.theme,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var colors = theme.colors,\n    isDarkTheme = theme.dark,\n    mode = theme.mode;\n  var _ref2 = _reactNative.StyleSheet.flatten(style) || {},\n    customBackground = _ref2.backgroundColor,\n    _ref2$elevation = _ref2.elevation,\n    elevation = _ref2$elevation === void 0 ? 4 : _ref2$elevation,\n    restStyle = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);\n  var isDark;\n  var backgroundColor = customBackground ? customBackground : isDarkTheme && mode === 'adaptive' ? (0, _overlay.default)(elevation, colors.surface) : colors.primary;\n  if (typeof dark === 'boolean') {\n    isDark = dark;\n  } else {\n    isDark = backgroundColor === 'transparent' ? false : typeof backgroundColor === 'string' ? !(0, _color.default)(backgroundColor).isLight() : true;\n  }\n  var shouldCenterContent = false;\n  var shouldAddLeftSpacing = false;\n  var shouldAddRightSpacing = false;\n  if (_reactNative.Platform.OS === 'ios') {\n    var hasAppbarContent = false;\n    var leftItemsCount = 0;\n    var rightItemsCount = 0;\n    React.Children.forEach(children, function (child) {\n      if (React.isValidElement(child)) {\n        if (child.type === _AppbarContent.default) {\n          hasAppbarContent = true;\n        } else if (hasAppbarContent) {\n          rightItemsCount++;\n        } else {\n          leftItemsCount++;\n        }\n      }\n    });\n    shouldCenterContent = hasAppbarContent && leftItemsCount < 2 && rightItemsCount < 2;\n    shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n    shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n  }\n  return React.createElement(_Surface.default, _extends({\n    style: [{\n      backgroundColor: backgroundColor\n    }, styles.appbar, {\n      elevation: elevation\n    }, restStyle]\n  }, rest), shouldAddLeftSpacing ? React.createElement(_reactNative.View, {\n    style: styles.spacing\n  }) : null, React.Children.toArray(children).filter(function (child) {\n    return child != null && typeof child !== 'boolean';\n  }).map(function (child, i) {\n    if (!React.isValidElement(child) || ![_AppbarContent.default, _AppbarAction.default, _AppbarBackAction.default].includes(\n    child.type)) {\n      return child;\n    }\n    var props = {\n      color: typeof child.props.color !== 'undefined' ? child.props.color : isDark ? _colors.white : _colors.black\n    };\n    if (child.type === _AppbarContent.default) {\n      props.style = [\n      i !== 0 && {\n        marginLeft: 8\n      }, shouldCenterContent && {\n        alignItems: 'center'\n      }, child.props.style];\n    }\n    return React.cloneElement(child, props);\n  }), shouldAddRightSpacing ? React.createElement(_reactNative.View, {\n    style: styles.spacing\n  }) : null);\n};\nvar styles = _reactNative.StyleSheet.create({\n  appbar: {\n    height: DEFAULT_APPBAR_HEIGHT,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n    elevation: 4\n  },\n  spacing: {\n    width: 48\n  }\n});\nvar _default = (0, _theming.withTheme)(Appbar);\nexports.default = _default;\n\nvar AppbarWithTheme = (0, _theming.withTheme)(Appbar);\nexports.Appbar = AppbarWithTheme;","map":{"version":3,"mappings":"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","names":["DEFAULT_APPBAR_HEIGHT","Appbar","_ref","children","dark","style","theme","rest","colors","isDarkTheme","mode","StyleSheet","flatten","customBackground","backgroundColor","elevation","restStyle","isDark","overlay","surface","primary","color","isLight","shouldCenterContent","shouldAddLeftSpacing","shouldAddRightSpacing","Platform","OS","hasAppbarContent","leftItemsCount","rightItemsCount","React","Children","forEach","child","isValidElement","type","AppbarContent","Surface","styles","appbar","View","spacing","toArray","filter","map","i","AppbarAction","AppbarBackAction","includes","props","white","black","marginLeft","alignItems","cloneElement","create","height","flexDirection","paddingHorizontal","width","withTheme","AppbarWithTheme"],"sources":["Appbar.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, Platform, StyleSheet, StyleProp } from 'react-native';\nimport color from 'color';\n\nimport AppbarContent from './AppbarContent';\nimport AppbarAction from './AppbarAction';\nimport AppbarBackAction from './AppbarBackAction';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\nimport overlay from '../../styles/overlay';\n\nexport type Props = Partial<React.ComponentPropsWithRef<typeof View>> & {\n  /**\n   * Whether the background color is a dark color. A dark appbar will render light text and vice-versa.\n   */\n  dark?: boolean;\n  /**\n   * Content of the `Appbar`.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport const DEFAULT_APPBAR_HEIGHT = 56;\n\n/**\n * A component to display action items in a bar. It can be placed at the top or bottom.\n * The top bar usually contains the screen title, controls such as navigation buttons, menu button etc.\n * The bottom bar usually provides access to a drawer and up to four actions.\n *\n * By default Appbar uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more informations\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/appbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n * import { StyleSheet } from 'react-native';\n *\n * const MyComponent = () => (\n *  <Appbar style={styles.bottom}>\n *    <Appbar.Action\n *      icon=\"archive\"\n *      onPress={() => console.log('Pressed archive')}\n *     />\n *     <Appbar.Action icon=\"mail\" onPress={() => console.log('Pressed mail')} />\n *     <Appbar.Action icon=\"label\" onPress={() => console.log('Pressed label')} />\n *     <Appbar.Action\n *       icon=\"delete\"\n *       onPress={() => console.log('Pressed delete')}\n *     />\n *   </Appbar>\n *  );\n *\n * export default MyComponent\n *\n * const styles = StyleSheet.create({\n *   bottom: {\n *     position: 'absolute',\n *     left: 0,\n *     right: 0,\n *     bottom: 0,\n *   },\n * });\n * ```\n */\nconst Appbar = ({ children, dark, style, theme, ...rest }: Props) => {\n  const { colors, dark: isDarkTheme, mode } = theme;\n  const {\n    backgroundColor: customBackground,\n    elevation = 4,\n    ...restStyle\n  }: ViewStyle = StyleSheet.flatten(style) || {};\n\n  let isDark: boolean;\n\n  const backgroundColor = customBackground\n    ? customBackground\n    : isDarkTheme && mode === 'adaptive'\n    ? overlay(elevation, colors.surface)\n    : colors.primary;\n  if (typeof dark === 'boolean') {\n    isDark = dark;\n  } else {\n    isDark =\n      backgroundColor === 'transparent'\n        ? false\n        : typeof backgroundColor === 'string'\n        ? !color(backgroundColor).isLight()\n        : true;\n  }\n\n  let shouldCenterContent = false;\n  let shouldAddLeftSpacing = false;\n  let shouldAddRightSpacing = false;\n  if (Platform.OS === 'ios') {\n    let hasAppbarContent = false;\n    let leftItemsCount = 0;\n    let rightItemsCount = 0;\n\n    React.Children.forEach(children, (child) => {\n      if (React.isValidElement(child)) {\n        if (child.type === AppbarContent) {\n          hasAppbarContent = true;\n        } else if (hasAppbarContent) {\n          rightItemsCount++;\n        } else {\n          leftItemsCount++;\n        }\n      }\n    });\n\n    shouldCenterContent =\n      hasAppbarContent && leftItemsCount < 2 && rightItemsCount < 2;\n    shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n    shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n  }\n  return (\n    <Surface\n      style={[{ backgroundColor }, styles.appbar, { elevation }, restStyle]}\n      {...rest}\n    >\n      {shouldAddLeftSpacing ? <View style={styles.spacing} /> : null}\n      {React.Children.toArray(children)\n        .filter((child) => child != null && typeof child !== 'boolean')\n        .map((child, i) => {\n          if (\n            !React.isValidElement(child) ||\n            ![AppbarContent, AppbarAction, AppbarBackAction].includes(\n              // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n              child.type\n            )\n          ) {\n            return child;\n          }\n\n          const props: { color?: string; style?: StyleProp<ViewStyle> } = {\n            color:\n              typeof child.props.color !== 'undefined'\n                ? child.props.color\n                : isDark\n                ? white\n                : black,\n          };\n\n          if (child.type === AppbarContent) {\n            props.style = [\n              // Since content is not first item, add extra left margin\n              i !== 0 && { marginLeft: 8 },\n              shouldCenterContent && { alignItems: 'center' },\n              child.props.style,\n            ];\n          }\n          return React.cloneElement(child, props);\n        })}\n      {shouldAddRightSpacing ? <View style={styles.spacing} /> : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  appbar: {\n    height: DEFAULT_APPBAR_HEIGHT,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n    elevation: 4,\n  },\n  spacing: {\n    width: 48,\n  },\n});\n\nexport default withTheme(Appbar);\n\n// @component-docs ignore-next-line\nconst AppbarWithTheme = withTheme(Appbar);\n// @component-docs ignore-next-line\nexport { AppbarWithTheme as Appbar };\n"]},"metadata":{},"sourceType":"script"}