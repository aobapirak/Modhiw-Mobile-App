{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.ToggleButtonRow = void 0;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _ToggleButtonGroup = _interopRequireDefault(require(\"./ToggleButtonGroup\"));\nvar _ToggleButton = _interopRequireDefault(require(\"./ToggleButton\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar ToggleButtonRow = function ToggleButtonRow(_ref) {\n  var value = _ref.value,\n    onValueChange = _ref.onValueChange,\n    children = _ref.children,\n    style = _ref.style;\n  var count = React.Children.count(children);\n  return React.createElement(_ToggleButtonGroup.default, {\n    value: value,\n    onValueChange: onValueChange\n  }, React.createElement(_reactNative.View, {\n    style: [styles.row, style]\n  }, React.Children.map(children, function (child, i) {\n    if (child && child.type === _ToggleButton.default) {\n      return React.cloneElement(child, {\n        style: [styles.button, i === 0 ? styles.first : i === count - 1 ? styles.last : styles.middle,\n        child.props.style]\n      });\n    }\n    return child;\n  })));\n};\nexports.ToggleButtonRow = ToggleButtonRow;\nToggleButtonRow.displayName = 'ToggleButton.Row';\nvar styles = _reactNative.StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  },\n  button: {\n    borderWidth: _reactNative.StyleSheet.hairlineWidth\n  },\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0\n  },\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0\n  },\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0\n  }\n});\nvar _default = ToggleButtonRow;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;AAAA;AACA;AACA;AACA;AAAA;AAAA;AA+CA,IAAMA,eAAe,GAAG,SAAlBA,eAAe,CAAGC,MAAsD;EAAA,IAAnDC,KAAF,GAAqDD,KAAnDC,KAAF;IAASC,aAAT,GAAqDF,KAA5CE,aAAT;IAAwBC,QAAxB,GAAqDH,KAA7BG,QAAxB;IAAkCC,QAAmBJ,KAAnBI;EACzD,IAAMC,KAAK,GAAGC,KAAK,CAACC,QAAN,CAAeF,KAAf,CAAqBF,QAArB,CAAd;EAEA,OACEG,oBAACE,0BAAD;IAAmBP,KAAK,EAAEA,KAA1B;IAAiCC,aAAa,EAAEA;EAAhD,GACEI,oBAACG,iBAAD;IAAML,KAAK,EAAE,CAACM,MAAM,CAACC,GAAR,EAAaP,KAAb;EAAb,GACGE,KAAK,CAACC,QAAN,CAAeK,GAAf,CAAmBT,QAAnB,EAA6B,UAACU,KAAD,EAAQC,CAAR,EAAc;IAE1C,IAAID,KAAK,IAAIA,KAAK,CAACE,IAAN,KAAeC,qBAA5B,EAA0C;MAExC,OAAOV,KAAK,CAACW,YAAN,CAAmBJ,KAAnB,EAA0B;QAC/BT,KAAK,EAAE,CACLM,MAAM,CAACQ,MADF,EAELJ,CAAC,KAAK,CAAN,GACIJ,MAAM,CAACS,KADX,GAEIL,CAAC,KAAKT,KAAK,GAAG,CAAd,GACAK,MAAM,CAACU,IADP,GAEAV,MAAM,CAACW,MANN;QAQLR,KAAK,CAACS,KAAN,CAAYlB,KARP;MADwB,CAA1B,CAAP;IAYD;IAED,OAAOS,KAAP;EACD,CAnBA,CADH,CADF,CADF;AA0BD,CA7BD;AAAA;AA+BAd,eAAe,CAACwB,WAAhB,GAA8B,kBAA9B;AAEA,IAAMb,MAAM,GAAGc,uBAAU,CAACC,MAAX,CAAkB;EAC/Bd,GAAG,EAAE;IACHe,aAAa,EAAE;EADZ,CAD0B;EAI/BR,MAAM,EAAE;IACNS,WAAW,EAAEH,uBAAU,CAACI;EADlB,CAJuB;EAQ/BT,KAAK,EAAE;IACLU,oBAAoB,EAAE,CADjB;IAELC,uBAAuB,EAAE;EAFpB,CARwB;EAa/BT,MAAM,EAAE;IACNU,YAAY,EAAE,CADR;IAENC,eAAe,EAAE;EAFX,CAbuB;EAkB/BZ,IAAI,EAAE;IACJY,eAAe,EAAE,CADb;IAEJC,mBAAmB,EAAE,CAFjB;IAGJC,sBAAsB,EAAE;EAHpB;AAlByB,CAAlB,CAAf;AAAA,eAyBenC,eAAf;AAAA","names":["ToggleButtonRow","_ref","value","onValueChange","children","style","count","React","Children","ToggleButtonGroup","View","styles","row","map","child","i","type","ToggleButton","cloneElement","button","first","last","middle","props","displayName","StyleSheet","create","flexDirection","borderWidth","hairlineWidth","borderTopRightRadius","borderBottomRightRadius","borderRadius","borderLeftWidth","borderTopLeftRadius","borderBottomLeftRadius"],"sources":["ToggleButtonRow.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\nimport ToggleButtonGroup from './ToggleButtonGroup';\nimport ToggleButton from './ToggleButton';\n\nexport type Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => void;\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: string;\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Toggle button row renders a group of toggle buttons in a row.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/toggle-button-row.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Row onValueChange={value => setValue(value)} value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Row>\n *   );\n * };\n *\n * export default MyComponent;\n *\n *```\n */\nconst ToggleButtonRow = ({ value, onValueChange, children, style }: Props) => {\n  const count = React.Children.count(children);\n\n  return (\n    <ToggleButtonGroup value={value} onValueChange={onValueChange}>\n      <View style={[styles.row, style]}>\n        {React.Children.map(children, (child, i) => {\n          // @ts-expect-error: TypeScript complains about child.type but it doesn't matter\n          if (child && child.type === ToggleButton) {\n            // @ts-expect-error: We're sure that child is a React Element\n            return React.cloneElement(child, {\n              style: [\n                styles.button,\n                i === 0\n                  ? styles.first\n                  : i === count - 1\n                  ? styles.last\n                  : styles.middle,\n                // @ts-expect-error: We're sure that child is a React Element\n                child.props.style,\n              ],\n            });\n          }\n\n          return child;\n        })}\n      </View>\n    </ToggleButtonGroup>\n  );\n};\n\nToggleButtonRow.displayName = 'ToggleButton.Row';\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth,\n  },\n\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0,\n  },\n\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n});\n\nexport default ToggleButtonRow;\n\n// @component-docs ignore-next-line\nexport { ToggleButtonRow };\n"]},"metadata":{},"sourceType":"script"}