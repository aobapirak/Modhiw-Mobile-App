{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useCurrentRender;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _CurrentRenderContext = _interopRequireDefault(require(\"./CurrentRenderContext\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction useCurrentRender(_ref) {\n  var state = _ref.state,\n    navigation = _ref.navigation,\n    descriptors = _ref.descriptors;\n  var current = React.useContext(_CurrentRenderContext.default);\n  if (current && navigation.isFocused()) {\n    current.options = descriptors[state.routes[state.index].key].options;\n  }\n}","map":{"version":3,"mappings":";;;;;AACA;AAEA;AAAA;AAAA;AAqBe,SAASA,gBAAT,OAIH;EAAA,IAHVC,KADuC,GAI7BC,KAHVD,KADuC;IAEvCE,UAFuC,GAI7BD,KAFVC,UAFuC;IAGvCC,cACUF,KADVE;EAEA,IAAMC,OAAO,GAAGC,KAAK,CAACC,UAAN,CAAiBC,6BAAjB,CAAhB;EAEA,IAAIH,OAAO,IAAIF,UAAU,CAACM,SAAX,EAAf,EAAuC;IACrCJ,OAAO,CAACK,OAAR,GAAkBN,WAAW,CAACH,KAAK,CAACU,MAAN,CAAaV,KAAK,CAACW,KAAnB,EAA0BC,GAA3B,CAAX,CAA2CH,OAA7D;EACD;AACF","names":["useCurrentRender","state","_ref","navigation","descriptors","current","React","useContext","CurrentRenderContext","isFocused","options","routes","index","key"],"sources":["useCurrentRender.tsx"],"sourcesContent":["import type { NavigationState, ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport CurrentRenderContext from './CurrentRenderContext';\nimport type {\n  Descriptor,\n  NavigationHelpers,\n  NavigationProp,\n  RouteProp,\n} from './types';\n\ntype Options = {\n  state: NavigationState;\n  navigation: NavigationHelpers<ParamListBase>;\n  descriptors: Record<\n    string,\n    Descriptor<object, NavigationProp<ParamListBase>, RouteProp<ParamListBase>>\n  >;\n};\n\n/**\n * Write the current options, so that server renderer can get current values\n * Mutating values like this is not safe in async mode, but it doesn't apply to SSR\n */\nexport default function useCurrentRender({\n  state,\n  navigation,\n  descriptors,\n}: Options) {\n  const current = React.useContext(CurrentRenderContext);\n\n  if (current && navigation.isFocused()) {\n    current.options = descriptors[state.routes[state.index].key].options;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}