{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Flag = void 0;\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _Emoji = require(\"./Emoji\");\nvar _CountryContext = require(\"./CountryContext\");\nvar _reactAsyncHook = require(\"react-async-hook\");\nvar _reactNative = require(\"react-native\");\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 30,\n    marginRight: 10\n  },\n  emojiFlag: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderWidth: 1 / _reactNative.PixelRatio.get(),\n    borderColor: 'transparent',\n    backgroundColor: 'transparent'\n  },\n  imageFlag: {\n    resizeMode: 'contain',\n    width: 25,\n    height: 19,\n    borderWidth: 1 / _reactNative.PixelRatio.get(),\n    opacity: 0.8\n  }\n});\nvar ImageFlag = (0, _react.memo)(function (_ref) {\n  var countryCode = _ref.countryCode,\n    flagSize = _ref.flagSize;\n  var _useContext = (0, _CountryContext.useContext)(),\n    getImageFlagAsync = _useContext.getImageFlagAsync;\n  var asyncResult = (0, _reactAsyncHook.useAsync)(getImageFlagAsync, [countryCode]);\n  if (asyncResult.loading) {\n    return _react.default.createElement(_reactNative.ActivityIndicator, {\n      size: 'small'\n    });\n  }\n  return _react.default.createElement(_reactNative.Image, {\n    resizeMode: 'contain',\n    style: [styles.imageFlag, {\n      borderColor: 'transparent',\n      height: flagSize\n    }],\n    source: {\n      uri: asyncResult.result\n    }\n  });\n});\nvar EmojiFlag = (0, _react.memo)(function (_ref2) {\n  var countryCode = _ref2.countryCode,\n    flagSize = _ref2.flagSize;\n  var _useContext2 = (0, _CountryContext.useContext)(),\n    getEmojiFlagAsync = _useContext2.getEmojiFlagAsync;\n  var asyncResult = (0, _reactAsyncHook.useAsync)(getEmojiFlagAsync, [countryCode]);\n  if (asyncResult.loading) {\n    return _react.default.createElement(_reactNative.ActivityIndicator, {\n      size: 'small'\n    });\n  }\n  return _react.default.createElement(_reactNative.Text, {\n    style: [styles.emojiFlag, {\n      fontSize: flagSize\n    }],\n    allowFontScaling: false\n  }, _react.default.createElement(_Emoji.Emoji, Object.assign({}, {\n    name: asyncResult.result\n  })));\n});\nvar Flag = function Flag(_ref3) {\n  var countryCode = _ref3.countryCode,\n    withEmoji = _ref3.withEmoji,\n    withFlagButton = _ref3.withFlagButton,\n    flagSize = _ref3.flagSize;\n  return withFlagButton ? _react.default.createElement(_reactNative.View, {\n    style: styles.container\n  }, withEmoji ? _react.default.createElement(EmojiFlag, Object.assign({}, {\n    countryCode: countryCode,\n    flagSize: flagSize\n  })) : _react.default.createElement(ImageFlag, Object.assign({}, {\n    countryCode: countryCode,\n    flagSize: flagSize\n  }))) : null;\n};\nexports.Flag = Flag;\nFlag.defaultProps = {\n  withEmoji: true,\n  withFlagButton: true\n};","map":{"version":3,"mappings":";;;;AAAA;AACA;AAEA;AACA;AACA;AAOqB;AAAA;AAErB,IAAMA,MAAM,GAAGC,uBAAU,CAACC,MAAM,CAAC;EAC/BC,SAAS,EAAE;IACTC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE,QAAQ;IACpBC,KAAK,EAAE,EAAE;IACTC,WAAW,EAAE;GACd;EACDC,SAAS,EAAE;IACTH,UAAU,EAAE,QAAQ;IACpBD,cAAc,EAAE,QAAQ;IACxBK,WAAW,EAAE,CAAC,GAAGC,uBAAU,CAACC,GAAG,EAAE;IACjCC,WAAW,EAAE,aAAa;IAC1BC,eAAe,EAAE;GAClB;EACDC,SAAS,EAAE;IACTC,UAAU,EAAE,SAAS;IACrBT,KAAK,EAAE,EAAE;IACTU,MAAM,EAAE,EAAE;IACVP,WAAW,EAAE,CAAC,GAAGC,uBAAU,CAACC,GAAG,EAAE;IACjCM,OAAO,EAAE;;CAEZ,CAAC;AASF,IAAMC,SAAS,GAAG,eAAI,EAAC,gBAAwC;EAAA,IAArCC,WAAW,QAAXA,WAAW;IAAEC,QAAQ,QAARA,QAAQ;EAC7C,kBAA8B,8BAAU,GAAE;IAAlCC,iBAAiB,eAAjBA,iBAAiB;EACzB,IAAMC,WAAW,GAAG,4BAAQ,EAACD,iBAAiB,EAAE,CAACF,WAAW,CAAC,CAAC;EAC9D,IAAIG,WAAW,CAACC,OAAO,EAAE;IACvB,OAAOC,6BAACC,8BAAiB;MAACC,IAAI,EAAE;IAAO,EAAI;;EAE7C,OACEF,6BAACG,kBAAK;IACJZ,UAAU,EAAE,SAAS;IACrBa,KAAK,EAAE,CACL5B,MAAM,CAACc,SAAS,EAChB;MAAEF,WAAW,EAAE,aAAa;MAAEI,MAAM,EAAEI;IAAQ,CAAE,CACjD;IACDS,MAAM,EAAE;MAAEC,GAAG,EAAER,WAAW,CAACS;IAAM;EAAE,EACnC;AAEN,CAAC,CAAC;AAEF,IAAMC,SAAS,GAAG,eAAI,EAAC,iBAAwC;EAAA,IAArCb,WAAW,SAAXA,WAAW;IAAEC,QAAQ,SAARA,QAAQ;EAC7C,mBAA8B,8BAAU,GAAE;IAAlCa,iBAAiB,gBAAjBA,iBAAiB;EACzB,IAAMX,WAAW,GAAG,4BAAQ,EAACW,iBAAiB,EAAE,CAACd,WAAW,CAAC,CAAC;EAE9D,IAAIG,WAAW,CAACC,OAAO,EAAE;IACvB,OAAOC,6BAACC,8BAAiB;MAACC,IAAI,EAAE;IAAO,EAAI;;EAE7C,OACEF,6BAACU,iBAAI;IACHN,KAAK,EAAE,CAAC5B,MAAM,CAACQ,SAAS,EAAE;MAAE2B,QAAQ,EAAEf;IAAQ,CAAE,CAAC;IACjDgB,gBAAgB,EAAE;EAAK,GAEvBZ,6BAACa,YAAK,oBAAK;IAAEC,IAAI,EAAEhB,WAAW,CAACS;EAAO,CAAE,EAAI,CACvC;AAEX,CAAC,CAAC;AAEK,IAAMQ,IAAI,GAAG,SAAPA,IAAI;EAAA,IACfpB,WAAW,SAAXA,WAAW;IACXqB,SAAS,SAATA,SAAS;IACTC,cAAc,SAAdA,cAAc;IACdrB,QAAQ,SAARA,QAAQ;EAAA,OAERqB,cAAc,GACZjB,6BAACkB,iBAAI;IAACd,KAAK,EAAE5B,MAAM,CAACG;EAAS,GAC1BqC,SAAS,GACRhB,6BAACQ,SAAS,oBAAK;IAAEb,WAAW,EAAXA,WAAW;IAAEC,QAAQ,EAARA;EAAQ,CAAE,EAAI,GAE5CI,6BAACN,SAAS,oBAAK;IAAEC,WAAW,EAAXA,WAAW;IAAEC,QAAQ,EAARA;EAAQ,CAAE,EACzC,CACI,GACL,IAAI;AAAA;AAAA;AAEVmB,IAAI,CAACI,YAAY,GAAG;EAClBH,SAAS,EAAE,IAAI;EACfC,cAAc,EAAE;CACjB","names":["styles","StyleSheet","create","container","justifyContent","alignItems","width","marginRight","emojiFlag","borderWidth","PixelRatio","get","borderColor","backgroundColor","imageFlag","resizeMode","height","opacity","ImageFlag","countryCode","flagSize","getImageFlagAsync","asyncResult","loading","React","ActivityIndicator","size","Image","style","source","uri","result","EmojiFlag","getEmojiFlagAsync","Text","fontSize","allowFontScaling","Emoji","name","Flag","withEmoji","withFlagButton","View","defaultProps"],"sourceRoot":"","sources":["../src/Flag.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}