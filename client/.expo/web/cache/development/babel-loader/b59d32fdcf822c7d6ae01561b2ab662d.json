{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.ToggleButton = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _theming = require(\"../../core/theming\");\nvar _color = _interopRequireDefault(require(\"color\"));\nvar _IconButton = _interopRequireDefault(require(\"../IconButton\"));\nvar _ToggleButtonGroup = require(\"./ToggleButtonGroup\");\nvar _colors = require(\"../../styles/colors\");\nvar _excluded = [\"icon\", \"size\", \"theme\", \"accessibilityLabel\", \"disabled\", \"style\", \"value\", \"status\", \"onPress\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar ToggleButton = function ToggleButton(_ref) {\n  var icon = _ref.icon,\n    size = _ref.size,\n    theme = _ref.theme,\n    accessibilityLabel = _ref.accessibilityLabel,\n    disabled = _ref.disabled,\n    style = _ref.style,\n    value = _ref.value,\n    status = _ref.status,\n    _onPress = _ref.onPress,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var borderRadius = theme.roundness;\n  return React.createElement(_ToggleButtonGroup.ToggleButtonGroupContext.Consumer, null, function (context) {\n    var backgroundColor;\n    var checked = context && context.value === value || status === 'checked';\n    if (checked) {\n      backgroundColor = theme.dark ? 'rgba(255, 255, 255, .12)' : 'rgba(0, 0, 0, .08)';\n    } else {\n      backgroundColor = 'transparent';\n    }\n    return React.createElement(_IconButton.default, _extends({\n      borderless: false,\n      icon: icon,\n      onPress: function onPress(e) {\n        if (_onPress) {\n          _onPress(e);\n        }\n        if (context) {\n          context.onValueChange(!checked ? value : null);\n        }\n      },\n      size: size,\n      accessibilityLabel: accessibilityLabel,\n      accessibilityState: {\n        disabled: disabled,\n        selected: checked\n      },\n      disabled: disabled,\n      style: [styles.content, {\n        backgroundColor: backgroundColor,\n        borderRadius: borderRadius,\n        borderColor: (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string()\n      }, style]\n    }, rest));\n  });\n};\nvar styles = _reactNative.StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0\n  }\n});\nvar _default = (0, _theming.withTheme)(ToggleButton);\nexports.default = _default;\n\nvar ToggleButtonWithTheme = (0, _theming.withTheme)(ToggleButton);\nexports.ToggleButton = ToggleButtonWithTheme;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AA6EA,IAAMA,YAAY,GAAG,SAAfA,YAAY,CAAGC,MAWR;EAAA,IAVXC,IADoB,GAWTD,KAVXC,IADoB;IAEpBC,IAFoB,GAWTF,KATXE,IAFoB;IAGpBC,KAHoB,GAWTH,KARXG,KAHoB;IAIpBC,kBAJoB,GAWTJ,KAPXI,kBAJoB;IAKpBC,QALoB,GAWTL,KANXK,QALoB;IAMpBC,KANoB,GAWTN,KALXM,KANoB;IAOpBC,KAPoB,GAWTP,KAJXO,KAPoB;IAQpBC,MARoB,GAWTR,KAHXQ,MARoB;IASpBC,QAToB,GAWTT,KAFXS,OAToB;IAUjBC,8CACQV;EACX,IAAMW,YAAY,GAAGR,KAAK,CAACS,SAA3B;EAEA,OACEC,oBAACC,2CAAD,CAA0BC,QAA1B,QACIC,iBAAD,EAAuE;IACtE,IAAIC,eAAJ;IAEA,IAAMC,OAAuB,GAC1BF,OAAO,IAAIA,OAAO,CAACT,KAAR,KAAkBA,KAA9B,IAAwCC,MAAM,KAAK,SADrD;IAGA,IAAIU,OAAJ,EAAa;MACXD,eAAe,GAAGd,KAAK,CAACgB,IAAN,GACd,0BADc,GAEd,oBAFJ;IAGD,CAJD,MAIO;MACLF,eAAe,GAAG,aAAlB;IACD;IAED,OACEJ,oBAACO,mBAAD;MACEC,UAAU,EAAE,KADd;MAEEpB,IAAI,EAAEA,IAFR;MAGEQ,OAAO,EAAGa,kBAAD,EAAwC;QAC/C,IAAIb,QAAJ,EAAa;UACXA,QAAO,CAACa,CAAD,CAAP;QACD;QAED,IAAIN,OAAJ,EAAa;UACXA,OAAO,CAACO,aAAR,CAAsB,CAACL,OAAD,GAAWX,KAAX,GAAmB,IAAzC;QACD;MACF,CAXH;MAYEL,IAAI,EAAEA,IAZR;MAaEE,kBAAkB,EAAEA,kBAbtB;MAcEoB,kBAAkB,EAAE;QAAEnB,QAAF,EAAEA,QAAF;QAAYoB,QAAQ,EAAEP;MAAtB,CAdtB;MAeEb,QAAQ,EAAEA,QAfZ;MAgBEC,KAAK,EAAE,CACLoB,MAAM,CAACC,OADF,EAEL;QACEV,eADF,EACEA,eADF;QAEEN,YAFF,EAEEA,YAFF;QAGEiB,WAAW,EAAEC,kBAAK,EAAC1B,KAAK,CAACgB,IAAN,GAAaW,aAAb,GAAqBC,aAAtB,CAAL,CACVC,KADU,CACJ,IADI,EAEVC,GAFU,GAGVC,MAHU;MAHf,CAFK,EAUL5B,KAVK;IAhBT,GA4BMI,IA5BN,EADF;EAgCD,CA/CH,CADF;AAmDD,CAjED;AAmEA,IAAMgB,MAAM,GAAGS,uBAAU,CAACC,MAAX,CAAkB;EAC/BT,OAAO,EAAE;IACPU,KAAK,EAAE,EADA;IAEPC,MAAM,EAAE,EAFD;IAGPC,MAAM,EAAE;EAHD;AADsB,CAAlB,CAAf;AAAA,eAQeC,sBAAS,EAACzC,YAAD,CAAxB;AAAA;;AAGA,IAAM0C,qBAAqB,GAAGD,sBAAS,EAACzC,YAAD,CAAvC","names":["ToggleButton","_ref","icon","size","theme","accessibilityLabel","disabled","style","value","status","onPress","rest","borderRadius","roundness","React","ToggleButtonGroupContext","Consumer","context","backgroundColor","checked","dark","IconButton","borderless","e","onValueChange","accessibilityState","selected","styles","content","borderColor","color","white","black","alpha","rgb","string","StyleSheet","create","width","height","margin","withTheme","ToggleButtonWithTheme"],"sources":["ToggleButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { black, white } from '../../styles/colors';\nimport type { IconSource } from '../Icon';\n\nexport type Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  color?: string;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nconst ToggleButton = ({\n  icon,\n  size,\n  theme,\n  accessibilityLabel,\n  disabled,\n  style,\n  value,\n  status,\n  onPress,\n  ...rest\n}: Props) => {\n  const borderRadius = theme.roundness;\n\n  return (\n    <ToggleButtonGroupContext.Consumer>\n      {(context: { value: string | null; onValueChange: Function } | null) => {\n        let backgroundColor;\n\n        const checked: boolean | null =\n          (context && context.value === value) || status === 'checked';\n\n        if (checked) {\n          backgroundColor = theme.dark\n            ? 'rgba(255, 255, 255, .12)'\n            : 'rgba(0, 0, 0, .08)';\n        } else {\n          backgroundColor = 'transparent';\n        }\n\n        return (\n          <IconButton\n            borderless={false}\n            icon={icon}\n            onPress={(e?: GestureResponderEvent | string) => {\n              if (onPress) {\n                onPress(e);\n              }\n\n              if (context) {\n                context.onValueChange(!checked ? value : null);\n              }\n            }}\n            size={size}\n            accessibilityLabel={accessibilityLabel}\n            accessibilityState={{ disabled, selected: checked }}\n            disabled={disabled}\n            style={[\n              styles.content,\n              {\n                backgroundColor,\n                borderRadius,\n                borderColor: color(theme.dark ? white : black)\n                  .alpha(0.29)\n                  .rgb()\n                  .string(),\n              },\n              style,\n            ]}\n            {...rest}\n          />\n        );\n      }}\n    </ToggleButtonGroupContext.Consumer>\n  );\n};\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withTheme(ToggleButton);\n\n// @component-docs ignore-next-line\nconst ToggleButtonWithTheme = withTheme(ToggleButton);\n// @component-docs ignore-next-line\nexport { ToggleButtonWithTheme as ToggleButton };\n"]},"metadata":{},"sourceType":"script"}