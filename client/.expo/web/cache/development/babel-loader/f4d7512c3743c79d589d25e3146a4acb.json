{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _color = _interopRequireDefault(require(\"color\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));\nvar _MaterialCommunityIcon = _interopRequireDefault(require(\"../MaterialCommunityIcon\"));\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\nvar _theming = require(\"../../core/theming\");\nvar _ListAccordionGroup = require(\"./ListAccordionGroup\");\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar ListAccordion = function ListAccordion(_ref) {\n  var left = _ref.left,\n    right = _ref.right,\n    title = _ref.title,\n    description = _ref.description,\n    children = _ref.children,\n    theme = _ref.theme,\n    titleStyle = _ref.titleStyle,\n    descriptionStyle = _ref.descriptionStyle,\n    _ref$titleNumberOfLin = _ref.titleNumberOfLines,\n    titleNumberOfLines = _ref$titleNumberOfLin === void 0 ? 1 : _ref$titleNumberOfLin,\n    _ref$descriptionNumbe = _ref.descriptionNumberOfLines,\n    descriptionNumberOfLines = _ref$descriptionNumbe === void 0 ? 2 : _ref$descriptionNumbe,\n    style = _ref.style,\n    id = _ref.id,\n    testID = _ref.testID,\n    onPress = _ref.onPress,\n    onLongPress = _ref.onLongPress,\n    expandedProp = _ref.expanded,\n    accessibilityLabel = _ref.accessibilityLabel;\n  var _React$useState = React.useState(expandedProp || false),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n    expanded = _React$useState2[0],\n    setExpanded = _React$useState2[1];\n  var handlePressAction = function handlePressAction() {\n    onPress === null || onPress === void 0 ? void 0 : onPress();\n    if (expandedProp === undefined) {\n      setExpanded(function (expanded) {\n        return !expanded;\n      });\n    }\n  };\n  var titleColor = (0, _color.default)(theme.colors.text).alpha(0.87).rgb().string();\n  var descriptionColor = (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();\n  var expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\n  var groupContext = React.useContext(_ListAccordionGroup.ListAccordionGroupContext);\n  if (groupContext !== null && !id) {\n    throw new Error('List.Accordion is used inside a List.AccordionGroup without specifying an id prop.');\n  }\n  var isExpanded = groupContext ? groupContext.expandedId === id : expandedInternal;\n  var handlePress = groupContext && id !== undefined ? function () {\n    return groupContext.onAccordionPress(id);\n  } : handlePressAction;\n  return React.createElement(_reactNative.View, null, React.createElement(_reactNative.View, {\n    style: {\n      backgroundColor: theme.colors.background\n    }\n  }, React.createElement(_TouchableRipple.default, {\n    style: [styles.container, style],\n    onPress: handlePress,\n    onLongPress: onLongPress,\n\n    accessibilityTraits: \"button\",\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      expanded: isExpanded\n    },\n    accessibilityLabel: accessibilityLabel,\n    testID: testID,\n    delayPressIn: 0,\n    borderless: true\n  }, React.createElement(_reactNative.View, {\n    style: styles.row,\n    pointerEvents: \"none\"\n  }, left ? left({\n    color: isExpanded ? theme.colors.primary : descriptionColor\n  }) : null, React.createElement(_reactNative.View, {\n    style: [styles.item, styles.content]\n  }, React.createElement(_Text.default, {\n    selectable: false,\n    numberOfLines: titleNumberOfLines,\n    style: [styles.title, {\n      color: isExpanded ? theme.colors.primary : titleColor\n    }, titleStyle]\n  }, title), description ? React.createElement(_Text.default, {\n    selectable: false,\n    numberOfLines: descriptionNumberOfLines,\n    style: [styles.description, {\n      color: descriptionColor\n    }, descriptionStyle]\n  }, description) : null), React.createElement(_reactNative.View, {\n    style: [styles.item, description ? styles.multiline : undefined]\n  }, right ? right({\n    isExpanded: isExpanded\n  }) : React.createElement(_MaterialCommunityIcon.default, {\n    name: isExpanded ? 'chevron-up' : 'chevron-down',\n    color: titleColor,\n    size: 24,\n    direction: _reactNative.I18nManager.isRTL ? 'rtl' : 'ltr'\n  }))))), isExpanded ? React.Children.map(children, function (child) {\n    if (left && React.isValidElement(child) && !child.props.left && !child.props.right) {\n      return React.cloneElement(child, {\n        style: [styles.child, child.props.style]\n      });\n    }\n    return child;\n  }) : null);\n};\nListAccordion.displayName = 'List.Accordion';\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  item: {\n    margin: 8\n  },\n  child: {\n    paddingLeft: 64\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\nvar _default = (0, _theming.withTheme)(ListAccordion);\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AASA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAwHA,IAAMA,aAAa,GAAG,SAAhBA,aAAa,CAAGC,MAkBT;EAAA,IAjBXC,IADqB,GAkBVD,KAjBXC,IADqB;IAErBC,KAFqB,GAkBVF,KAhBXE,KAFqB;IAGrBC,KAHqB,GAkBVH,KAfXG,KAHqB;IAIrBC,WAJqB,GAkBVJ,KAdXI,WAJqB;IAKrBC,QALqB,GAkBVL,KAbXK,QALqB;IAMrBC,KANqB,GAkBVN,KAZXM,KANqB;IAOrBC,UAPqB,GAkBVP,KAXXO,UAPqB;IAQrBC,gBARqB,GAkBVR,KAVXQ,gBARqB;IAAA,wBAkBVR,KATXS,kBAAkB;IAAlBA,kBAAkB,sCAAG,CATA;IAAA,wBAkBVT,KARXU,wBAAwB;IAAxBA,wBAAwB,sCAAG,CAVN;IAWrBC,KAXqB,GAkBVX,KAPXW,KAXqB;IAYrBC,EAZqB,GAkBVZ,KANXY,EAZqB;IAarBC,MAbqB,GAkBVb,KALXa,MAbqB;IAcrBC,OAdqB,GAkBVd,KAJXc,OAdqB;IAerBC,WAfqB,GAkBVf,KAHXe,WAfqB;IAgBXC,YAhBW,GAkBVhB,KAFXiB,QAAQ;IACRC,qBACWlB,KADXkB;EAEA,sBAAgCC,KAAK,CAACC,QAAN,CAC9BJ,YAAY,IAAI,KADc,CAAhC;IAAA;IAAOC,QAAD;IAAWI,WAAX;EAIN,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiB,GAAS;IAC9BR,OAAO,SAAP,WAAO,WAAP,mBAAO;IAEP,IAAIE,YAAY,KAAKO,SAArB,EAAgC;MAG9BF,WAAW,CAAEJ,kBAAD;QAAA,OAAc,CAACA,QAAhB;MAAA,EAAX;IACD;EACF,CARD;EAUA,IAAMO,UAAU,GAAGC,kBAAK,EAACnB,KAAK,CAACoB,MAAN,CAAaC,IAAd,CAAL,CAAyBC,KAAzB,CAA+B,IAA/B,EAAqCC,GAArC,GAA2CC,MAA3C,EAAnB;EACA,IAAMC,gBAAgB,GAAGN,kBAAK,EAACnB,KAAK,CAACoB,MAAN,CAAaC,IAAd,CAAL,CAAyBC,KAAzB,CAA+B,IAA/B,EAAqCC,GAArC,GAA2CC,MAA3C,EAAzB;EAEA,IAAME,gBAAgB,GAAGhB,YAAY,KAAKO,SAAjB,GAA6BP,YAA7B,GAA4CC,QAArE;EAEA,IAAMgB,YAAY,GAAGd,KAAK,CAACe,UAAN,CAAiBC,6CAAjB,CAArB;EACA,IAAIF,YAAY,KAAK,IAAjB,IAAyB,CAACrB,EAA9B,EAAkC;IAChC,MAAM,IAAIwB,KAAJ,CACJ,oFADI,CAAN;EAGD;EACD,IAAMC,UAAU,GAAGJ,YAAY,GAC3BA,YAAY,CAACK,UAAb,KAA4B1B,EADD,GAE3BoB,gBAFJ;EAGA,IAAMO,WAAW,GACfN,YAAY,IAAIrB,EAAE,KAAKW,SAAvB,GACI;IAAA,OAAMU,YAAY,CAACO,gBAAb,CAA8B5B,EAA9B,CADV;EAAA,IAEIU,iBAHN;EAIA,OACEH,oBAACsB,iBAAD,QACEtB,oBAACsB,iBAAD;IAAM9B,KAAK,EAAE;MAAE+B,eAAe,EAAEpC,KAAK,CAACoB,MAAN,CAAaiB;IAAhC;EAAb,GACExB,oBAACyB,wBAAD;IACEjC,KAAK,EAAE,CAACkC,MAAM,CAACC,SAAR,EAAmBnC,KAAnB,CADT;IAEEG,OAAO,EAAEyB,WAFX;IAGExB,WAAW,EAAEA,WAHf;;IAKEgC,mBAAmB,EAAC,QALtB;IAMEC,0BAA0B,EAAC,QAN7B;IAOEC,iBAAiB,EAAC,QAPpB;IAQEC,kBAAkB,EAAE;MAAEjC,QAAQ,EAAEoB;IAAZ,CARtB;IASEnB,kBAAkB,EAAEA,kBATtB;IAUEL,MAAM,EAAEA,MAVV;IAWEsC,YAAY,EAAE,CAXhB;IAYEC,UAAU;EAZZ,GAcEjC,oBAACsB,iBAAD;IAAM9B,KAAK,EAAEkC,MAAM,CAACQ,GAApB;IAAyBC,aAAa,EAAC;EAAvC,GACGrD,IAAI,GACDA,IAAI,CAAC;IACHwB,KAAK,EAAEY,UAAU,GAAG/B,KAAK,CAACoB,MAAN,CAAa6B,OAAhB,GAA0BxB;EADxC,CAAD,CADH,GAID,IALN,EAMEZ,oBAACsB,iBAAD;IAAM9B,KAAK,EAAE,CAACkC,MAAM,CAACW,IAAR,EAAcX,MAAM,CAACY,OAArB;EAAb,GACEtC,oBAACuC,aAAD;IACEC,UAAU,EAAE,KADd;IAEEC,aAAa,EAAEnD,kBAFjB;IAGEE,KAAK,EAAE,CACLkC,MAAM,CAAC1C,KADF,EAEL;MACEsB,KAAK,EAAEY,UAAU,GAAG/B,KAAK,CAACoB,MAAN,CAAa6B,OAAhB,GAA0B/B;IAD7C,CAFK,EAKLjB,UALK;EAHT,GAWGJ,KAXH,CADF,EAcGC,WAAW,GACVe,oBAACuC,aAAD;IACEC,UAAU,EAAE,KADd;IAEEC,aAAa,EAAElD,wBAFjB;IAGEC,KAAK,EAAE,CACLkC,MAAM,CAACzC,WADF,EAEL;MACEqB,KAAK,EAAEM;IADT,CAFK,EAKLvB,gBALK;EAHT,GAWGJ,WAXH,CADU,GAcR,IA5BN,CANF,EAoCEe,oBAACsB,iBAAD;IACE9B,KAAK,EAAE,CAACkC,MAAM,CAACW,IAAR,EAAcpD,WAAW,GAAGyC,MAAM,CAACgB,SAAV,GAAsBtC,SAA/C;EADT,GAGGrB,KAAK,GACJA,KAAK,CAAC;IACJmC,UAAU,EAAEA;EADR,CAAD,CADD,GAKJlB,oBAAC2C,8BAAD;IACEC,IAAI,EAAE1B,UAAU,GAAG,YAAH,GAAkB,cADpC;IAEEZ,KAAK,EAAED,UAFT;IAGEwC,IAAI,EAAE,EAHR;IAIEC,SAAS,EAAEC,wBAAW,CAACC,KAAZ,GAAoB,KAApB,GAA4B;EAJzC,EARJ,CApCF,CAdF,CADF,CADF,EAwEG9B,UAAU,GACPlB,KAAK,CAACiD,QAAN,CAAeC,GAAf,CAAmBhE,QAAnB,EAA8BiE,eAAD,EAAW;IACtC,IACErE,IAAI,IACJkB,KAAK,CAACoD,cAAN,CAAqBD,KAArB,CADA,IAEA,CAACA,KAAK,CAACE,KAAN,CAAYvE,IAFb,IAGA,CAACqE,KAAK,CAACE,KAAN,CAAYtE,KAJf,EAKE;MACA,OAAOiB,KAAK,CAACsD,YAAN,CAAmBH,KAAnB,EAA0B;QAC/B3D,KAAK,EAAE,CAACkC,MAAM,CAACyB,KAAR,EAAeA,KAAK,CAACE,KAAN,CAAY7D,KAA3B;MADwB,CAA1B,CAAP;IAGD;IAED,OAAO2D,KAAP;EACD,CAbD,CADO,GAeP,IAvFN,CADF;AA2FD,CA9ID;AAgJAvE,aAAa,CAAC2E,WAAd,GAA4B,gBAA5B;AAEA,IAAM7B,MAAM,GAAG8B,uBAAU,CAACC,MAAX,CAAkB;EAC/B9B,SAAS,EAAE;IACT+B,OAAO,EAAE;EADA,CADoB;EAI/BxB,GAAG,EAAE;IACHyB,aAAa,EAAE,KADZ;IAEHC,UAAU,EAAE;EAFT,CAJ0B;EAQ/BlB,SAAS,EAAE;IACTmB,MAAM,EAAE,EADC;IAETD,UAAU,EAAE,QAFH;IAGTE,cAAc,EAAE;EAHP,CARoB;EAa/B9E,KAAK,EAAE;IACL+E,QAAQ,EAAE;EADL,CAbwB;EAgB/B9E,WAAW,EAAE;IACX8E,QAAQ,EAAE;EADC,CAhBkB;EAmB/B1B,IAAI,EAAE;IACJ2B,MAAM,EAAE;EADJ,CAnByB;EAsB/Bb,KAAK,EAAE;IACLc,WAAW,EAAE;EADR,CAtBwB;EAyB/B3B,OAAO,EAAE;IACP4B,IAAI,EAAE,CADC;IAEPJ,cAAc,EAAE;EAFT;AAzBsB,CAAlB,CAAf;AAAA,eA+BeK,sBAAS,EAACvF,aAAD,CAAxB;AAAA","names":["ListAccordion","_ref","left","right","title","description","children","theme","titleStyle","descriptionStyle","titleNumberOfLines","descriptionNumberOfLines","style","id","testID","onPress","onLongPress","expandedProp","expanded","accessibilityLabel","React","useState","setExpanded","handlePressAction","undefined","titleColor","color","colors","text","alpha","rgb","string","descriptionColor","expandedInternal","groupContext","useContext","ListAccordionGroupContext","Error","isExpanded","expandedId","handlePress","onAccordionPress","View","backgroundColor","background","TouchableRipple","styles","container","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","delayPressIn","borderless","row","pointerEvents","primary","item","content","Text","selectable","numberOfLines","multiline","MaterialCommunityIcon","name","size","direction","I18nManager","isRTL","Children","map","child","isValidElement","props","cloneElement","displayName","StyleSheet","create","padding","flexDirection","alignItems","height","justifyContent","fontSize","margin","paddingLeft","flex","withTheme"],"sources":["ListAccordion.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  I18nManager,\n  GestureResponderEvent,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\nimport { ListAccordionGroupContext } from './ListAccordionGroup';\n\nexport type Props = {\n  /**\n   * Title text for the list accordion.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list accordion.\n   */\n  description?: React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { isExpanded: boolean }) => React.ReactNode;\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\n   */\n  id?: string | number;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n  /**\n   * Accessibility label for the TouchableRipple. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [expanded, setExpanded] = React.useState(true);\n *\n *   const handlePress = () => setExpanded(!expanded);\n *\n *   return (\n *     <List.Section title=\"Accordions\">\n *       <List.Accordion\n *         title=\"Uncontrolled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *\n *       <List.Accordion\n *         title=\"Controlled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}\n *         expanded={expanded}\n *         onPress={handlePress}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *     </List.Section>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst ListAccordion = ({\n  left,\n  right,\n  title,\n  description,\n  children,\n  theme,\n  titleStyle,\n  descriptionStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  style,\n  id,\n  testID,\n  onPress,\n  onLongPress,\n  expanded: expandedProp,\n  accessibilityLabel,\n}: Props) => {\n  const [expanded, setExpanded] = React.useState<boolean>(\n    expandedProp || false\n  );\n\n  const handlePressAction = () => {\n    onPress?.();\n\n    if (expandedProp === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      setExpanded((expanded) => !expanded);\n    }\n  };\n\n  const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n  const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n\n  const expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\n\n  const groupContext = React.useContext(ListAccordionGroupContext);\n  if (groupContext !== null && !id) {\n    throw new Error(\n      'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\n    );\n  }\n  const isExpanded = groupContext\n    ? groupContext.expandedId === id\n    : expandedInternal;\n  const handlePress =\n    groupContext && id !== undefined\n      ? () => groupContext.onAccordionPress(id)\n      : handlePressAction;\n  return (\n    <View>\n      <View style={{ backgroundColor: theme.colors.background }}>\n        <TouchableRipple\n          style={[styles.container, style]}\n          onPress={handlePress}\n          onLongPress={onLongPress}\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityState={{ expanded: isExpanded }}\n          accessibilityLabel={accessibilityLabel}\n          testID={testID}\n          delayPressIn={0}\n          borderless\n        >\n          <View style={styles.row} pointerEvents=\"none\">\n            {left\n              ? left({\n                  color: isExpanded ? theme.colors.primary : descriptionColor,\n                })\n              : null}\n            <View style={[styles.item, styles.content]}>\n              <Text\n                selectable={false}\n                numberOfLines={titleNumberOfLines}\n                style={[\n                  styles.title,\n                  {\n                    color: isExpanded ? theme.colors.primary : titleColor,\n                  },\n                  titleStyle,\n                ]}\n              >\n                {title}\n              </Text>\n              {description ? (\n                <Text\n                  selectable={false}\n                  numberOfLines={descriptionNumberOfLines}\n                  style={[\n                    styles.description,\n                    {\n                      color: descriptionColor,\n                    },\n                    descriptionStyle,\n                  ]}\n                >\n                  {description}\n                </Text>\n              ) : null}\n            </View>\n            <View\n              style={[styles.item, description ? styles.multiline : undefined]}\n            >\n              {right ? (\n                right({\n                  isExpanded: isExpanded,\n                })\n              ) : (\n                <MaterialCommunityIcon\n                  name={isExpanded ? 'chevron-up' : 'chevron-down'}\n                  color={titleColor}\n                  size={24}\n                  direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n                />\n              )}\n            </View>\n          </View>\n        </TouchableRipple>\n      </View>\n\n      {isExpanded\n        ? React.Children.map(children, (child) => {\n            if (\n              left &&\n              React.isValidElement(child) &&\n              !child.props.left &&\n              !child.props.right\n            ) {\n              return React.cloneElement(child, {\n                style: [styles.child, child.props.style],\n              });\n            }\n\n            return child;\n          })\n        : null}\n    </View>\n  );\n};\n\nListAccordion.displayName = 'List.Accordion';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListAccordion);\n"]},"metadata":{},"sourceType":"script"}