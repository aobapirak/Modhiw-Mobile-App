{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.RadioButtonIOS = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _color = _interopRequireDefault(require(\"color\"));\nvar _RadioButtonGroup = require(\"./RadioButtonGroup\");\nvar _utils = require(\"./utils\");\nvar _MaterialCommunityIcon = _interopRequireDefault(require(\"../MaterialCommunityIcon\"));\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));\nvar _theming = require(\"../../core/theming\");\nvar _excluded = [\"disabled\", \"onPress\", \"theme\", \"status\", \"value\", \"testID\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar RadioButtonIOS = function RadioButtonIOS(_ref) {\n  var disabled = _ref.disabled,\n    onPress = _ref.onPress,\n    theme = _ref.theme,\n    status = _ref.status,\n    value = _ref.value,\n    testID = _ref.testID,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var checkedColor = disabled ? theme.colors.disabled : rest.color || theme.colors.accent;\n  var rippleColor;\n  if (disabled) {\n    rippleColor = (0, _color.default)(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = (0, _color.default)(checkedColor).fade(0.32).rgb().string();\n  }\n  return React.createElement(_RadioButtonGroup.RadioButtonContext.Consumer, null, function (context) {\n    var checked = (0, _utils.isChecked)({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status: status,\n      value: value\n    }) === 'checked';\n    return React.createElement(_TouchableRipple.default, _extends({}, rest, {\n      borderless: true,\n      rippleColor: rippleColor,\n      onPress: disabled ? undefined : function () {\n        (0, _utils.handlePress)({\n          onPress: onPress,\n          value: value,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange\n        });\n      },\n\n      accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n      accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        disabled: disabled,\n        checked: checked\n      },\n      accessibilityLiveRegion: \"polite\",\n      style: styles.container,\n      testID: testID\n    }), React.createElement(_reactNative.View, {\n      style: {\n        opacity: checked ? 1 : 0\n      }\n    }, React.createElement(_MaterialCommunityIcon.default, {\n      allowFontScaling: false,\n      name: \"check\",\n      size: 24,\n      color: checkedColor,\n      direction: \"ltr\"\n    })));\n  });\n};\nRadioButtonIOS.displayName = 'RadioButton.IOS';\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nvar _default = (0, _theming.withTheme)(RadioButtonIOS);\nexports.default = _default;\n\nvar RadioButtonIOSWithTheme = (0, _theming.withTheme)(RadioButtonIOS);\nexports.RadioButtonIOS = RadioButtonIOSWithTheme;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AAkDA,IAAMA,cAAc,GAAG,SAAjBA,cAAc,CAAGC,MAQV;EAAA,IAPXC,QADsB,GAQXD,KAPXC,QADsB;IAEtBC,OAFsB,GAQXF,KANXE,OAFsB;IAGtBC,KAHsB,GAQXH,KALXG,KAHsB;IAItBC,MAJsB,GAQXJ,KAJXI,MAJsB;IAKtBC,KALsB,GAQXL,KAHXK,KALsB;IAMtBC,MANsB,GAQXN,KAFXM,MANsB;IAOnBC,8CACQP;EACX,IAAMQ,YAAY,GAAGP,QAAQ,GACzBE,KAAK,CAACM,MAAN,CAAaR,QADY,GAEzBM,IAAI,CAACG,KAAL,IAAcP,KAAK,CAACM,MAAN,CAAaE,MAF/B;EAIA,IAAIC,WAAJ;EAEA,IAAIX,QAAJ,EAAc;IACZW,WAAW,GAAGF,kBAAK,EAACP,KAAK,CAACM,MAAN,CAAaI,IAAd,CAAL,CAAyBC,KAAzB,CAA+B,IAA/B,EAAqCC,GAArC,GAA2CC,MAA3C,EAAd;EACD,CAFD,MAEO;IACLJ,WAAW,GAAGF,kBAAK,EAACF,YAAD,CAAL,CAAoBS,IAApB,CAAyB,IAAzB,EAA+BF,GAA/B,GAAqCC,MAArC,EAAd;EACD;EAED,OACEE,oBAACC,oCAAD,CAAoBC,QAApB,QACIC,iBAAD,EAAsC;IACrC,IAAMC,OAAO,GACXC,oBAAS,EAAC;MACRC,YAAY,EAAEH,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEhB,KADf;MAERD,MAFQ,EAERA,MAFQ;MAGRC;IAHQ,CAAD,CAAT,KAIO,SALT;IAOA,OACEa,oBAACO,wBAAD,eACMlB,IADN;MAEEmB,UAAU,MAFZ;MAGEd,WAAW,EAAEA,WAHf;MAIEV,OAAO,EACLD,QAAQ,GACJ0B,SADI,GAEJ,YAAM;QACJC,sBAAW,EAAC;UACV1B,OADU,EACVA,OADU;UAEVG,KAFU,EAEVA,KAFU;UAGVwB,aAAa,EAAER,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEQ;QAHd,CAAD,CAAX;MAKD,CAbT;;MAgBEC,mBAAmB,EAAE7B,QAAQ,GAAG,CAAC,QAAD,EAAW,UAAX,CAAH,GAA4B,QAhB3D;MAiBE8B,0BAA0B,EACxBT,OAAO,GAAG,qBAAH,GAA2B,uBAlBtC;MAoBEU,iBAAiB,EAAC,OApBpB;MAqBEC,kBAAkB,EAAE;QAAEhC,QAAF,EAAEA,QAAF;QAAYqB;MAAZ,CArBtB;MAsBEY,uBAAuB,EAAC,QAtB1B;MAuBEC,KAAK,EAAEC,MAAM,CAACC,SAvBhB;MAwBE/B,MAAM,EAAEA;IAxBV,IA0BEY,oBAACoB,iBAAD;MAAMH,KAAK,EAAE;QAAEI,OAAO,EAAEjB,OAAO,GAAG,CAAH,GAAO;MAAzB;IAAb,GACEJ,oBAACsB,8BAAD;MACEC,gBAAgB,EAAE,KADpB;MAEEC,IAAI,EAAC,OAFP;MAGEC,IAAI,EAAE,EAHR;MAIEjC,KAAK,EAAEF,YAJT;MAKEoC,SAAS,EAAC;IALZ,EADF,CA1BF,CADF;EAsCD,CA/CH,CADF;AAmDD,CAxED;AA0EA7C,cAAc,CAAC8C,WAAf,GAA6B,iBAA7B;AAEA,IAAMT,MAAM,GAAGU,uBAAU,CAACC,MAAX,CAAkB;EAC/BV,SAAS,EAAE;IACTW,YAAY,EAAE,EADL;IAETC,OAAO,EAAE;EAFA;AADoB,CAAlB,CAAf;AAAA,eAOeC,sBAAS,EAACnD,cAAD,CAAxB;AAAA;;AAGA,IAAMoD,uBAAuB,GAAGD,sBAAS,EAACnD,cAAD,CAAzC","names":["RadioButtonIOS","_ref","disabled","onPress","theme","status","value","testID","rest","checkedColor","colors","color","accent","rippleColor","text","alpha","rgb","string","fade","React","RadioButtonContext","Consumer","context","checked","isChecked","contextValue","TouchableRipple","borderless","undefined","handlePress","onValueChange","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","View","opacity","MaterialCommunityIcon","allowFontScaling","name","size","direction","displayName","StyleSheet","create","borderRadius","padding","withTheme","RadioButtonIOSWithTheme"],"sources":["RadioButtonIOS.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonIOS = ({\n  disabled,\n  onPress,\n  theme,\n  status,\n  value,\n  testID,\n  ...rest\n}: Props) => {\n  const checkedColor = disabled\n    ? theme.colors.disabled\n    : rest.color || theme.colors.accent;\n\n  let rippleColor: string;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n  }\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : () => {\n                    handlePress({\n                      onPress,\n                      value,\n                      onValueChange: context?.onValueChange,\n                    });\n                  }\n            }\n            // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n            accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n            accessibilityComponentType={\n              checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <View style={{ opacity: checked ? 1 : 0 }}>\n              <MaterialCommunityIcon\n                allowFontScaling={false}\n                name=\"check\"\n                size={24}\n                color={checkedColor}\n                direction=\"ltr\"\n              />\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonIOS.displayName = 'RadioButton.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(RadioButtonIOS);\n\n// @component-docs ignore-next-line\nconst RadioButtonIOSWithTheme = withTheme(RadioButtonIOS);\n// @component-docs ignore-next-line\nexport { RadioButtonIOSWithTheme as RadioButtonIOS };\n"]},"metadata":{},"sourceType":"script"}