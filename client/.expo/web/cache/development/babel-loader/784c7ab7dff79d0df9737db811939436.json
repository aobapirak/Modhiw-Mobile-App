{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = PreventRemoveProvider;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _nonSecure = require(\"nanoid/non-secure\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _useLatestCallback = _interopRequireDefault(require(\"use-latest-callback\"));\nvar _NavigationHelpersContext = _interopRequireDefault(require(\"./NavigationHelpersContext\"));\nvar _NavigationRouteContext = _interopRequireDefault(require(\"./NavigationRouteContext\"));\nvar _PreventRemoveContext = _interopRequireDefault(require(\"./PreventRemoveContext\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar transformPreventedRoutes = function transformPreventedRoutes(preventedRoutesMap) {\n  var preventedRoutesToTransform = (0, _toConsumableArray2.default)(preventedRoutesMap.values());\n  var preventedRoutes = preventedRoutesToTransform.reduce(function (acc, _ref) {\n    var _acc$routeKey;\n    var routeKey = _ref.routeKey,\n      preventRemove = _ref.preventRemove;\n    acc[routeKey] = {\n      preventRemove: ((_acc$routeKey = acc[routeKey]) === null || _acc$routeKey === void 0 ? void 0 : _acc$routeKey.preventRemove) || preventRemove\n    };\n    return acc;\n  }, {});\n  return preventedRoutes;\n};\n\nfunction PreventRemoveProvider(_ref2) {\n  var children = _ref2.children;\n  var _React$useState = React.useState(function () {\n      return (0, _nonSecure.nanoid)();\n    }),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 1),\n    parentId = _React$useState2[0];\n  var _React$useState3 = React.useState(new Map()),\n    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),\n    preventedRoutesMap = _React$useState4[0],\n    setPreventedRoutesMap = _React$useState4[1];\n  var navigation = React.useContext(_NavigationHelpersContext.default);\n  var route = React.useContext(_NavigationRouteContext.default);\n  var preventRemoveContextValue = React.useContext(_PreventRemoveContext.default);\n\n  var setParentPrevented = preventRemoveContextValue === null || preventRemoveContextValue === void 0 ? void 0 : preventRemoveContextValue.setPreventRemove;\n  var setPreventRemove = (0, _useLatestCallback.default)(function (id, routeKey, preventRemove) {\n    if (preventRemove && (navigation == null || navigation !== null && navigation !== void 0 && navigation.getState().routes.every(function (route) {\n      return route.key !== routeKey;\n    }))) {\n      throw new Error(\"Couldn't find a route with the key \" + routeKey + \". Is your component inside NavigationContent?\");\n    }\n    setPreventedRoutesMap(function (prevPrevented) {\n      var _prevPrevented$get, _prevPrevented$get2;\n\n      if (routeKey === ((_prevPrevented$get = prevPrevented.get(id)) === null || _prevPrevented$get === void 0 ? void 0 : _prevPrevented$get.routeKey) && preventRemove === ((_prevPrevented$get2 = prevPrevented.get(id)) === null || _prevPrevented$get2 === void 0 ? void 0 : _prevPrevented$get2.preventRemove)) {\n        return prevPrevented;\n      }\n      var nextPrevented = new Map(prevPrevented);\n      if (preventRemove) {\n        nextPrevented.set(id, {\n          routeKey: routeKey,\n          preventRemove: preventRemove\n        });\n      } else {\n        nextPrevented.delete(id);\n      }\n      return nextPrevented;\n    });\n  });\n  var isPrevented = (0, _toConsumableArray2.default)(preventedRoutesMap.values()).some(function (_ref3) {\n    var preventRemove = _ref3.preventRemove;\n    return preventRemove;\n  });\n  React.useEffect(function () {\n    if ((route === null || route === void 0 ? void 0 : route.key) !== undefined && setParentPrevented !== undefined) {\n      setParentPrevented(parentId, route.key, isPrevented);\n      return function () {\n        setParentPrevented(parentId, route.key, false);\n      };\n    }\n    return;\n  }, [parentId, isPrevented, route === null || route === void 0 ? void 0 : route.key, setParentPrevented]);\n  var value = React.useMemo(function () {\n    return {\n      setPreventRemove: setPreventRemove,\n      preventedRoutes: transformPreventedRoutes(preventedRoutesMap)\n    };\n  }, [setPreventRemove, preventedRoutesMap]);\n  return React.createElement(_PreventRemoveContext.default.Provider, {\n    value: value\n  }, children);\n}","map":{"version":3,"mappings":"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","names":["transformPreventedRoutes","preventedRoutesMap","preventedRoutesToTransform","values","preventedRoutes","reduce","acc","routeKey","_ref","preventRemove","PreventRemoveProvider","children","_ref2","React","useState","nanoid","parentId","Map","setPreventedRoutesMap","navigation","useContext","NavigationHelpersContext","route","NavigationRouteContext","preventRemoveContextValue","PreventRemoveContext","setParentPrevented","setPreventRemove","useLatestCallback","id","getState","routes","every","key","Error","prevPrevented","get","_prevPrevented$get","_prevPrevented$get2","nextPrevented","set","delete","isPrevented","some","_ref3","useEffect","undefined","value","useMemo","Provider"],"sources":["PreventRemoveProvider.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\n\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport PreventRemoveContext, { PreventedRoutes } from './PreventRemoveContext';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype PreventedRoutesMap = Map<\n  string,\n  {\n    routeKey: string;\n    preventRemove: boolean;\n  }\n>;\n\n/**\n * Util function to transform map of prevented routes to a simpler object.\n */\nconst transformPreventedRoutes = (\n  preventedRoutesMap: PreventedRoutesMap\n): PreventedRoutes => {\n  const preventedRoutesToTransform = [...preventedRoutesMap.values()];\n\n  const preventedRoutes = preventedRoutesToTransform.reduce<PreventedRoutes>(\n    (acc, { routeKey, preventRemove }) => {\n      acc[routeKey] = {\n        preventRemove: acc[routeKey]?.preventRemove || preventRemove,\n      };\n      return acc;\n    },\n    {}\n  );\n\n  return preventedRoutes;\n};\n\n/**\n * Component used for managing which routes have to be prevented from removal in native-stack.\n */\nexport default function PreventRemoveProvider({ children }: Props) {\n  const [parentId] = React.useState(() => nanoid());\n  const [preventedRoutesMap, setPreventedRoutesMap] =\n    React.useState<PreventedRoutesMap>(new Map());\n\n  const navigation = React.useContext(NavigationHelpersContext);\n  const route = React.useContext(NavigationRouteContext);\n\n  const preventRemoveContextValue = React.useContext(PreventRemoveContext);\n  // take `setPreventRemove` from parent context - if exist it means we're in a nested context\n  const setParentPrevented = preventRemoveContextValue?.setPreventRemove;\n\n  const setPreventRemove = useLatestCallback(\n    (id: string, routeKey: string, preventRemove: boolean): void => {\n      if (\n        preventRemove &&\n        (navigation == null ||\n          navigation\n            ?.getState()\n            .routes.every((route) => route.key !== routeKey))\n      ) {\n        throw new Error(\n          `Couldn't find a route with the key ${routeKey}. Is your component inside NavigationContent?`\n        );\n      }\n\n      setPreventedRoutesMap((prevPrevented) => {\n        // values haven't changed - do nothing\n        if (\n          routeKey === prevPrevented.get(id)?.routeKey &&\n          preventRemove === prevPrevented.get(id)?.preventRemove\n        ) {\n          return prevPrevented;\n        }\n\n        const nextPrevented = new Map(prevPrevented);\n\n        if (preventRemove) {\n          nextPrevented.set(id, {\n            routeKey,\n            preventRemove,\n          });\n        } else {\n          nextPrevented.delete(id);\n        }\n\n        return nextPrevented;\n      });\n    }\n  );\n\n  const isPrevented = [...preventedRoutesMap.values()].some(\n    ({ preventRemove }) => preventRemove\n  );\n\n  React.useEffect(() => {\n    if (route?.key !== undefined && setParentPrevented !== undefined) {\n      // when route is defined (and setParentPrevented) it means we're in a nested stack\n      // route.key then will be the route key of parent\n      setParentPrevented(parentId, route.key, isPrevented);\n      return () => {\n        setParentPrevented(parentId, route.key, false);\n      };\n    }\n\n    return;\n  }, [parentId, isPrevented, route?.key, setParentPrevented]);\n\n  const value = React.useMemo(\n    () => ({\n      setPreventRemove,\n      preventedRoutes: transformPreventedRoutes(preventedRoutesMap),\n    }),\n    [setPreventRemove, preventedRoutesMap]\n  );\n\n  return (\n    <PreventRemoveContext.Provider value={value}>\n      {children}\n    </PreventRemoveContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"script"}