{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useLazyRef;\nvar React = _interopRequireWildcard(require(\"react\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction useLazyRef(callback) {\n  var lazyRef = React.useRef();\n  if (lazyRef.current === undefined) {\n    lazyRef.current = callback();\n  }\n  return lazyRef;\n}","map":{"version":3,"mappings":";;;;AAAA;AAAA;AAAA;AAEe,SAASA,UAAT,CAAuBC,QAAvB,EAA0C;EACvD,IAAMC,OAAO,GAAGC,KAAK,CAACC,MAAN,EAAhB;EAEA,IAAIF,OAAO,CAACG,OAAR,KAAoBC,SAAxB,EAAmC;IACjCJ,OAAO,CAACG,OAAR,GAAkBJ,QAAQ,EAA1B;EACD;EAED,OAAOC,OAAP;AACD","names":["useLazyRef","callback","lazyRef","React","useRef","current","undefined"],"sources":["useLazyRef.tsx"],"sourcesContent":["import * as React from 'react';\n\nexport default function useLazyRef<T>(callback: () => T) {\n  const lazyRef = React.useRef<T | undefined>();\n\n  if (lazyRef.current === undefined) {\n    lazyRef.current = callback();\n  }\n\n  return lazyRef as React.MutableRefObject<T>;\n}\n"]},"metadata":{},"sourceType":"script"}