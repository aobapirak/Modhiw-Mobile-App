{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.Checkbox = void 0;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _CheckboxIOS = _interopRequireDefault(require(\"./CheckboxIOS\"));\nvar _CheckboxAndroid = _interopRequireDefault(require(\"./CheckboxAndroid\"));\nvar _theming = require(\"../../core/theming\");\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar Checkbox = function Checkbox(props) {\n  return _reactNative.Platform.OS === 'ios' ? React.createElement(_CheckboxIOS.default, props) : React.createElement(_CheckboxAndroid.default, props);\n};\nvar _default = (0, _theming.withTheme)(Checkbox);\nexports.default = _default;\n\nvar CheckboxWithTheme = (0, _theming.withTheme)(Checkbox);\nexports.Checkbox = CheckboxWithTheme;","map":{"version":3,"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AA4EA,IAAMA,QAAQ,GAAIC,SAAZD,QAAQ,CAAIC,KAAD;EAAA,OACfC,qBAAQ,CAACC,EAAT,KAAgB,KAAhB,GACEC,oBAACC,oBAAD,EAAiBJ,KAAjB,CADF,GAGEG,oBAACE,wBAAD,EAAqBL,KAArB,CAJJ;AAAA;AAAA,eAOeM,sBAAS,EAACP,QAAD,CAAxB;AAAA;;AAGA,IAAMQ,iBAAiB,GAAGD,sBAAS,EAACP,QAAD,CAAnC","names":["Checkbox","props","Platform","OS","React","CheckboxIOS","CheckboxAndroid","withTheme","CheckboxWithTheme"],"sources":["Checkbox.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform } from 'react-native';\nimport CheckboxIOS from './CheckboxIOS';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport { withTheme } from '../../core/theming';\n\nexport type Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [checked, setChecked] = React.useState(false);\n *\n *   return (\n *     <Checkbox\n *       status={checked ? 'checked' : 'unchecked'}\n *       onPress={() => {\n *         setChecked(!checked);\n *       }}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Checkbox = (props: Props) =>\n  Platform.OS === 'ios' ? (\n    <CheckboxIOS {...props} />\n  ) : (\n    <CheckboxAndroid {...props} />\n  );\n\nexport default withTheme(Checkbox);\n\n// @component-docs ignore-next-line\nconst CheckboxWithTheme = withTheme(Checkbox);\n// @component-docs ignore-next-line\nexport { CheckboxWithTheme as Checkbox };\n"]},"metadata":{},"sourceType":"script"}