{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction emptyFunction() {}\nvar AccessibilityInfo = {\n  fetch: function fetch() {\n    return new Promise(function (resolve, reject) {\n      resolve(true);\n    });\n  },\n  addEventListener: function addEventListener(eventName, handler) {\n    return {\n      remove: emptyFunction\n    };\n  },\n  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {},\n  announceForAccessibility: function announceForAccessibility(announcement) {},\n  removeEventListener: function removeEventListener(eventName, handler) {\n    return;\n  }\n};\nvar _default = AccessibilityInfo;\nexports.default = _default;","map":{"version":3,"names":["emptyFunction","AccessibilityInfo","fetch","Promise","resolve","reject","addEventListener","eventName","handler","remove","setAccessibilityFocus","reactTag","announceForAccessibility","announcement","removeEventListener"],"sources":["C:/Users/prariya/Desktop/Modhiw/client/node_modules/react-native-phone-number-input/node_modules/react-native-web/dist/exports/AccessibilityInfo/index.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction emptyFunction() {}\n\nvar AccessibilityInfo = {\n  /**\n   * Query whether a screen reader is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\n   */\n  fetch: function fetch() {\n    return new Promise(function (resolve, reject) {\n      resolve(true);\n    });\n  },\n\n  /**\n   * Add an event handler. Supported events:\n   */\n  addEventListener: function addEventListener(eventName, handler) {\n    return {\n      remove: emptyFunction\n    };\n  },\n\n  /**\n   * Set accessibility focus to a react component.\n   */\n  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {},\n\n  /**\n   * Post a string to be announced by the screen reader.\n   */\n  announceForAccessibility: function announceForAccessibility(announcement) {},\n\n  /**\n   * Remove an event handler.\n   */\n  removeEventListener: function removeEventListener(eventName, handler) {\n    return;\n  }\n};\n\nexport default AccessibilityInfo;"],"mappings":";;;;;AASA,SAASA,aAAa,GAAG,CAAC;AAE1B,IAAIC,iBAAiB,GAAG;EAOtBC,KAAK,EAAE,SAASA,KAAK,GAAG;IACtB,OAAO,IAAIC,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;MAC5CD,OAAO,CAAC,IAAI,CAAC;IACf,CAAC,CAAC;EACJ,CAAC;EAKDE,gBAAgB,EAAE,SAASA,gBAAgB,CAACC,SAAS,EAAEC,OAAO,EAAE;IAC9D,OAAO;MACLC,MAAM,EAAET;IACV,CAAC;EACH,CAAC;EAKDU,qBAAqB,EAAE,SAASA,qBAAqB,CAACC,QAAQ,EAAE,CAAC,CAAC;EAKlEC,wBAAwB,EAAE,SAASA,wBAAwB,CAACC,YAAY,EAAE,CAAC,CAAC;EAK5EC,mBAAmB,EAAE,SAASA,mBAAmB,CAACP,SAAS,EAAEC,OAAO,EAAE;IACpE;EACF;AACF,CAAC;AAAC,eAEaP,iBAAiB;AAAA"},"metadata":{},"sourceType":"script"}