{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _ExecutionEnvironment = _interopRequireDefault(require(\"fbjs/lib/ExecutionEnvironment\"));\nvar _arrayFindIndex = _interopRequireDefault(require(\"array-find-index\"));\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar connection = _ExecutionEnvironment.default.canUseDOM && (window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection);\n\nvar getConnectionInfoObject = function getConnectionInfoObject() {\n  var result = {\n    effectiveType: 'unknown',\n    type: 'unknown'\n  };\n  if (!connection) {\n    return result;\n  }\n  for (var prop in connection) {\n    var value = connection[prop];\n    if (typeof value !== 'function' && value != null) {\n      result[prop] = value;\n    }\n  }\n  return result;\n};\n\nvar eventTypesMap = {\n  change: 'change',\n  connectionChange: 'change'\n};\nvar eventTypes = Object.keys(eventTypesMap);\nvar connectionListeners = [];\nvar netInfoListeners = [];\n\nvar NetInfo = {\n  addEventListener: function addEventListener(type, handler) {\n    (0, _invariant.default)(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n    if (type === 'change') {\n      console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n    }\n    if (!connection) {\n      console.error('Network Connection API is not supported. Not listening for connection type changes.');\n      return {\n        remove: function remove() {}\n      };\n    }\n    var wrappedHandler = function wrappedHandler() {\n      return handler(getConnectionInfoObject());\n    };\n    netInfoListeners.push([handler, wrappedHandler]);\n    connection.addEventListener(eventTypesMap[type], wrappedHandler);\n    return {\n      remove: function remove() {\n        return NetInfo.removeEventListener(eventTypesMap[type], handler);\n      }\n    };\n  },\n  removeEventListener: function removeEventListener(type, handler) {\n    (0, _invariant.default)(eventTypes.indexOf(type) !== -1, 'Trying to unsubscribe from unknown event: \"%s\"', type);\n    if (type === 'change') {\n      console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n    }\n    var listenerIndex = (0, _arrayFindIndex.default)(netInfoListeners, function (pair) {\n      return pair[0] === handler;\n    });\n    (0, _invariant.default)(listenerIndex !== -1, 'Trying to remove NetInfo listener for unregistered handler');\n    var _netInfoListeners$lis = netInfoListeners[listenerIndex],\n      wrappedHandler = _netInfoListeners$lis[1];\n    connection.removeEventListener(eventTypesMap[type], wrappedHandler);\n    netInfoListeners.splice(listenerIndex, 1);\n  },\n  fetch: function fetch() {\n    console.warn('`fetch` is deprecated. Use `getConnectionInfo` instead.');\n    return new Promise(function (resolve, reject) {\n      try {\n        resolve(connection.type);\n      } catch (err) {\n        resolve('unknown');\n      }\n    });\n  },\n  getConnectionInfo: function getConnectionInfo() {\n    return new Promise(function (resolve, reject) {\n      resolve(getConnectionInfoObject());\n    });\n  },\n  isConnected: {\n    addEventListener: function addEventListener(type, handler) {\n      (0, _invariant.default)(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n      if (type === 'change') {\n        console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n      }\n      var onlineCallback = function onlineCallback() {\n        return handler(true);\n      };\n      var offlineCallback = function offlineCallback() {\n        return handler(false);\n      };\n      connectionListeners.push([handler, onlineCallback, offlineCallback]);\n      window.addEventListener('online', onlineCallback, false);\n      window.addEventListener('offline', offlineCallback, false);\n      return {\n        remove: function remove() {\n          return NetInfo.isConnected.removeEventListener(eventTypesMap[type], handler);\n        }\n      };\n    },\n    removeEventListener: function removeEventListener(type, handler) {\n      (0, _invariant.default)(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n      if (type === 'change') {\n        console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n      }\n      var listenerIndex = (0, _arrayFindIndex.default)(connectionListeners, function (pair) {\n        return pair[0] === handler;\n      });\n      (0, _invariant.default)(listenerIndex !== -1, 'Trying to remove NetInfo connection listener for unregistered handler');\n      var _connectionListeners$ = connectionListeners[listenerIndex],\n        onlineCallback = _connectionListeners$[1],\n        offlineCallback = _connectionListeners$[2];\n      window.removeEventListener('online', onlineCallback, false);\n      window.removeEventListener('offline', offlineCallback, false);\n      connectionListeners.splice(listenerIndex, 1);\n    },\n    fetch: function fetch() {\n      return new Promise(function (resolve, reject) {\n        try {\n          resolve(window.navigator.onLine);\n        } catch (err) {\n          resolve(true);\n        }\n      });\n    }\n  }\n};\nvar _default = NetInfo;\nexports.default = _default;","map":{"version":3,"names":["connection","ExecutionEnvironment","canUseDOM","window","navigator","mozConnection","webkitConnection","getConnectionInfoObject","result","effectiveType","type","prop","value","eventTypesMap","change","connectionChange","eventTypes","Object","keys","connectionListeners","netInfoListeners","NetInfo","addEventListener","handler","invariant","indexOf","console","warn","error","remove","wrappedHandler","push","removeEventListener","listenerIndex","findIndex","pair","_netInfoListeners$lis","splice","fetch","Promise","resolve","reject","err","getConnectionInfo","isConnected","onlineCallback","offlineCallback","_connectionListeners$","onLine"],"sources":["C:/Users/prariya/Desktop/Modhiw/client/node_modules/react-native-phone-number-input/node_modules/react-native-web/dist/exports/NetInfo/index.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Nicolas Gallagher.\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport ExecutionEnvironment from 'fbjs/lib/ExecutionEnvironment';\nimport findIndex from 'array-find-index';\nimport invariant from 'fbjs/lib/invariant';\n\nvar connection = ExecutionEnvironment.canUseDOM && (window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection);\n\n// Prevent the underlying event handlers from leaking and include additional\n// properties available in browsers\nvar getConnectionInfoObject = function getConnectionInfoObject() {\n  var result = {\n    effectiveType: 'unknown',\n    type: 'unknown'\n  };\n  if (!connection) {\n    return result;\n  }\n  for (var prop in connection) {\n    var value = connection[prop];\n    if (typeof value !== 'function' && value != null) {\n      result[prop] = value;\n    }\n  }\n  return result;\n};\n\n// Map React Native events to browser equivalents\nvar eventTypesMap = {\n  change: 'change',\n  connectionChange: 'change'\n};\nvar eventTypes = Object.keys(eventTypesMap);\n\nvar connectionListeners = [];\nvar netInfoListeners = [];\n\n/**\n * Navigator online: https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine\n * Network Connection API: https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\n */\nvar NetInfo = {\n  addEventListener: function addEventListener(type, handler) {\n    invariant(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n    if (type === 'change') {\n      console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n    }\n    if (!connection) {\n      console.error('Network Connection API is not supported. Not listening for connection type changes.');\n      return {\n        remove: function remove() {}\n      };\n    }\n\n    var wrappedHandler = function wrappedHandler() {\n      return handler(getConnectionInfoObject());\n    };\n    netInfoListeners.push([handler, wrappedHandler]);\n    connection.addEventListener(eventTypesMap[type], wrappedHandler);\n    return {\n      remove: function remove() {\n        return NetInfo.removeEventListener(eventTypesMap[type], handler);\n      }\n    };\n  },\n  removeEventListener: function removeEventListener(type, handler) {\n    invariant(eventTypes.indexOf(type) !== -1, 'Trying to unsubscribe from unknown event: \"%s\"', type);\n    if (type === 'change') {\n      console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n    }\n\n    var listenerIndex = findIndex(netInfoListeners, function (pair) {\n      return pair[0] === handler;\n    });\n    invariant(listenerIndex !== -1, 'Trying to remove NetInfo listener for unregistered handler');\n    var _netInfoListeners$lis = netInfoListeners[listenerIndex],\n        wrappedHandler = _netInfoListeners$lis[1];\n\n    connection.removeEventListener(eventTypesMap[type], wrappedHandler);\n    netInfoListeners.splice(listenerIndex, 1);\n  },\n  fetch: function fetch() {\n    console.warn('`fetch` is deprecated. Use `getConnectionInfo` instead.');\n    return new Promise(function (resolve, reject) {\n      try {\n        resolve(connection.type);\n      } catch (err) {\n        resolve('unknown');\n      }\n    });\n  },\n  getConnectionInfo: function getConnectionInfo() {\n    return new Promise(function (resolve, reject) {\n      resolve(getConnectionInfoObject());\n    });\n  },\n\n\n  isConnected: {\n    addEventListener: function addEventListener(type, handler) {\n      invariant(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n      if (type === 'change') {\n        console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n      }\n\n      var onlineCallback = function onlineCallback() {\n        return handler(true);\n      };\n      var offlineCallback = function offlineCallback() {\n        return handler(false);\n      };\n      connectionListeners.push([handler, onlineCallback, offlineCallback]);\n\n      window.addEventListener('online', onlineCallback, false);\n      window.addEventListener('offline', offlineCallback, false);\n\n      return {\n        remove: function remove() {\n          return NetInfo.isConnected.removeEventListener(eventTypesMap[type], handler);\n        }\n      };\n    },\n    removeEventListener: function removeEventListener(type, handler) {\n      invariant(eventTypes.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n      if (type === 'change') {\n        console.warn('Listening to event `change` is deprecated. Use `connectionChange` instead.');\n      }\n\n      var listenerIndex = findIndex(connectionListeners, function (pair) {\n        return pair[0] === handler;\n      });\n      invariant(listenerIndex !== -1, 'Trying to remove NetInfo connection listener for unregistered handler');\n      var _connectionListeners$ = connectionListeners[listenerIndex],\n          onlineCallback = _connectionListeners$[1],\n          offlineCallback = _connectionListeners$[2];\n\n\n      window.removeEventListener('online', onlineCallback, false);\n      window.removeEventListener('offline', offlineCallback, false);\n\n      connectionListeners.splice(listenerIndex, 1);\n    },\n    fetch: function fetch() {\n      return new Promise(function (resolve, reject) {\n        try {\n          resolve(window.navigator.onLine);\n        } catch (err) {\n          resolve(true);\n        }\n      });\n    }\n  }\n};\n\nexport default NetInfo;"],"mappings":"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"},"metadata":{},"sourceType":"script"}