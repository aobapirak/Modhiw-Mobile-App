{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _routers = require(\"@react-navigation/routers\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _checkDuplicateRouteNames = _interopRequireDefault(require(\"./checkDuplicateRouteNames\"));\nvar _checkSerializable = _interopRequireDefault(require(\"./checkSerializable\"));\nvar _createNavigationContainerRef = require(\"./createNavigationContainerRef\");\nvar _EnsureSingleNavigator = _interopRequireDefault(require(\"./EnsureSingleNavigator\"));\nvar _findFocusedRoute = _interopRequireDefault(require(\"./findFocusedRoute\"));\nvar _NavigationBuilderContext = _interopRequireDefault(require(\"./NavigationBuilderContext\"));\nvar _NavigationContainerRefContext = _interopRequireDefault(require(\"./NavigationContainerRefContext\"));\nvar _NavigationContext = _interopRequireDefault(require(\"./NavigationContext\"));\nvar _NavigationRouteContext = _interopRequireDefault(require(\"./NavigationRouteContext\"));\nvar _NavigationStateContext = _interopRequireDefault(require(\"./NavigationStateContext\"));\nvar _UnhandledActionContext = _interopRequireDefault(require(\"./UnhandledActionContext\"));\nvar _useChildListeners2 = _interopRequireDefault(require(\"./useChildListeners\"));\nvar _useEventEmitter = _interopRequireDefault(require(\"./useEventEmitter\"));\nvar _useKeyedChildListeners = _interopRequireDefault(require(\"./useKeyedChildListeners\"));\nvar _useOptionsGetters2 = _interopRequireDefault(require(\"./useOptionsGetters\"));\nvar _useScheduleUpdate = require(\"./useScheduleUpdate\");\nvar _useSyncState3 = _interopRequireDefault(require(\"./useSyncState\"));\nvar _excluded = [\"key\", \"routeNames\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar serializableWarnings = [];\nvar duplicateNameWarnings = [];\n\nvar getPartialState = function getPartialState(state) {\n  if (state === undefined) {\n    return;\n  }\n\n  var key = state.key,\n    routeNames = state.routeNames,\n    partialState = (0, _objectWithoutProperties2.default)(state, _excluded);\n  return Object.assign({}, partialState, {\n    stale: true,\n    routes: state.routes.map(function (route) {\n      if (route.state === undefined) {\n        return route;\n      }\n      return Object.assign({}, route, {\n        state: getPartialState(route.state)\n      });\n    })\n  });\n};\n\nvar BaseNavigationContainer = React.forwardRef(function BaseNavigationContainer(_ref, ref) {\n  var initialState = _ref.initialState,\n    onStateChange = _ref.onStateChange,\n    onUnhandledAction = _ref.onUnhandledAction,\n    independent = _ref.independent,\n    children = _ref.children;\n  var parent = React.useContext(_NavigationStateContext.default);\n  if (!parent.isDefault && !independent) {\n    throw new Error(\"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\");\n  }\n  var _useSyncState = (0, _useSyncState3.default)(function () {\n      return getPartialState(initialState == null ? undefined : initialState);\n    }),\n    _useSyncState2 = (0, _slicedToArray2.default)(_useSyncState, 5),\n    state = _useSyncState2[0],\n    getState = _useSyncState2[1],\n    setState = _useSyncState2[2],\n    scheduleUpdate = _useSyncState2[3],\n    flushUpdates = _useSyncState2[4];\n  var isFirstMountRef = React.useRef(true);\n  var navigatorKeyRef = React.useRef();\n  var getKey = React.useCallback(function () {\n    return navigatorKeyRef.current;\n  }, []);\n  var setKey = React.useCallback(function (key) {\n    navigatorKeyRef.current = key;\n  }, []);\n  var _useChildListeners = (0, _useChildListeners2.default)(),\n    listeners = _useChildListeners.listeners,\n    addListener = _useChildListeners.addListener;\n  var _useKeyedChildListene = (0, _useKeyedChildListeners.default)(),\n    keyedListeners = _useKeyedChildListene.keyedListeners,\n    addKeyedListener = _useKeyedChildListene.addKeyedListener;\n  var dispatch = React.useCallback(function (action) {\n    if (listeners.focus[0] == null) {\n      console.error(_createNavigationContainerRef.NOT_INITIALIZED_ERROR);\n    } else {\n      listeners.focus[0](function (navigation) {\n        return navigation.dispatch(action);\n      });\n    }\n  }, [listeners.focus]);\n  var canGoBack = React.useCallback(function () {\n    if (listeners.focus[0] == null) {\n      return false;\n    }\n    var _listeners$focus$ = listeners.focus[0](function (navigation) {\n        return navigation.canGoBack();\n      }),\n      result = _listeners$focus$.result,\n      handled = _listeners$focus$.handled;\n    if (handled) {\n      return result;\n    } else {\n      return false;\n    }\n  }, [listeners.focus]);\n  var resetRoot = React.useCallback(function (state) {\n    var _state$key, _keyedListeners$getSt, _keyedListeners$getSt2;\n    var target = (_state$key = state === null || state === void 0 ? void 0 : state.key) !== null && _state$key !== void 0 ? _state$key : (_keyedListeners$getSt = (_keyedListeners$getSt2 = keyedListeners.getState).root) === null || _keyedListeners$getSt === void 0 ? void 0 : _keyedListeners$getSt.call(_keyedListeners$getSt2).key;\n    if (target == null) {\n      console.error(_createNavigationContainerRef.NOT_INITIALIZED_ERROR);\n    } else {\n      listeners.focus[0](function (navigation) {\n        return navigation.dispatch(Object.assign({}, _routers.CommonActions.reset(state), {\n          target: target\n        }));\n      });\n    }\n  }, [keyedListeners.getState, listeners.focus]);\n  var getRootState = React.useCallback(function () {\n    var _keyedListeners$getSt3, _keyedListeners$getSt4;\n    return (_keyedListeners$getSt3 = (_keyedListeners$getSt4 = keyedListeners.getState).root) === null || _keyedListeners$getSt3 === void 0 ? void 0 : _keyedListeners$getSt3.call(_keyedListeners$getSt4);\n  }, [keyedListeners.getState]);\n  var getCurrentRoute = React.useCallback(function () {\n    var state = getRootState();\n    if (state == null) {\n      return undefined;\n    }\n    var route = (0, _findFocusedRoute.default)(state);\n    return route;\n  }, [getRootState]);\n  var emitter = (0, _useEventEmitter.default)();\n  var _useOptionsGetters = (0, _useOptionsGetters2.default)({}),\n    addOptionsGetter = _useOptionsGetters.addOptionsGetter,\n    getCurrentOptions = _useOptionsGetters.getCurrentOptions;\n  var navigation = React.useMemo(function () {\n    return Object.assign({}, Object.keys(_routers.CommonActions).reduce(function (acc, name) {\n      acc[name] = function () {\n        return (\n          dispatch(_routers.CommonActions[name].apply(_routers.CommonActions, arguments))\n        );\n      };\n      return acc;\n    }, {}), emitter.create('root'), {\n      dispatch: dispatch,\n      resetRoot: resetRoot,\n      isFocused: function isFocused() {\n        return true;\n      },\n      canGoBack: canGoBack,\n      getParent: function getParent() {\n        return undefined;\n      },\n      getState: function getState() {\n        return stateRef.current;\n      },\n      getRootState: getRootState,\n      getCurrentRoute: getCurrentRoute,\n      getCurrentOptions: getCurrentOptions,\n      isReady: function isReady() {\n        return listeners.focus[0] != null;\n      }\n    });\n  }, [canGoBack, dispatch, emitter, getCurrentOptions, getCurrentRoute, getRootState, listeners.focus, resetRoot]);\n  React.useImperativeHandle(ref, function () {\n    return navigation;\n  }, [navigation]);\n  var onDispatchAction = React.useCallback(function (action, noop) {\n    emitter.emit({\n      type: '__unsafe_action__',\n      data: {\n        action: action,\n        noop: noop,\n        stack: stackRef.current\n      }\n    });\n  }, [emitter]);\n  var lastEmittedOptionsRef = React.useRef();\n  var onOptionsChange = React.useCallback(function (options) {\n    if (lastEmittedOptionsRef.current === options) {\n      return;\n    }\n    lastEmittedOptionsRef.current = options;\n    emitter.emit({\n      type: 'options',\n      data: {\n        options: options\n      }\n    });\n  }, [emitter]);\n  var stackRef = React.useRef();\n  var builderContext = React.useMemo(function () {\n    return {\n      addListener: addListener,\n      addKeyedListener: addKeyedListener,\n      onDispatchAction: onDispatchAction,\n      onOptionsChange: onOptionsChange,\n      stackRef: stackRef\n    };\n  }, [addListener, addKeyedListener, onDispatchAction, onOptionsChange]);\n  var scheduleContext = React.useMemo(function () {\n    return {\n      scheduleUpdate: scheduleUpdate,\n      flushUpdates: flushUpdates\n    };\n  }, [scheduleUpdate, flushUpdates]);\n  var isInitialRef = React.useRef(true);\n  var getIsInitial = React.useCallback(function () {\n    return isInitialRef.current;\n  }, []);\n  var context = React.useMemo(function () {\n    return {\n      state: state,\n      getState: getState,\n      setState: setState,\n      getKey: getKey,\n      setKey: setKey,\n      getIsInitial: getIsInitial,\n      addOptionsGetter: addOptionsGetter\n    };\n  }, [state, getState, setState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  var onStateChangeRef = React.useRef(onStateChange);\n  var stateRef = React.useRef(state);\n  React.useEffect(function () {\n    isInitialRef.current = false;\n    onStateChangeRef.current = onStateChange;\n    stateRef.current = state;\n  });\n  React.useEffect(function () {\n    var hydratedState = getRootState();\n    if (process.env.NODE_ENV !== 'production') {\n      if (hydratedState !== undefined) {\n        var serializableResult = (0, _checkSerializable.default)(hydratedState);\n        if (!serializableResult.serializable) {\n          var location = serializableResult.location,\n            reason = serializableResult.reason;\n          var path = '';\n          var pointer = hydratedState;\n          var params = false;\n          for (var i = 0; i < location.length; i++) {\n            var curr = location[i];\n            var prev = location[i - 1];\n            pointer = pointer[curr];\n            if (!params && curr === 'state') {\n              continue;\n            } else if (!params && curr === 'routes') {\n              if (path) {\n                path += ' > ';\n              }\n            } else if (!params && typeof curr === 'number' && prev === 'routes') {\n              var _pointer;\n              path += (_pointer = pointer) === null || _pointer === void 0 ? void 0 : _pointer.name;\n            } else if (!params) {\n              path += \" > \" + curr;\n              params = true;\n            } else {\n              if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                path += \"[\" + curr + \"]\";\n              } else if (/^[a-z$_]+$/i.test(curr)) {\n                path += \".\" + curr;\n              } else {\n                path += \"[\" + JSON.stringify(curr) + \"]\";\n              }\n            }\n          }\n          var message = \"Non-serializable values were found in the navigation state. Check:\\n\\n\" + path + \" (\" + reason + \")\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.\";\n          if (!serializableWarnings.includes(message)) {\n            serializableWarnings.push(message);\n            console.warn(message);\n          }\n        }\n        var duplicateRouteNamesResult = (0, _checkDuplicateRouteNames.default)(hydratedState);\n        if (duplicateRouteNamesResult.length) {\n          var _message = \"Found screens with the same name nested inside one another. Check:\\n\" + duplicateRouteNamesResult.map(function (locations) {\n            return \"\\n\" + locations.join(', ');\n          }) + \"\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.\";\n          if (!duplicateNameWarnings.includes(_message)) {\n            duplicateNameWarnings.push(_message);\n            console.warn(_message);\n          }\n        }\n      }\n    }\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n    if (!isFirstMountRef.current && onStateChangeRef.current) {\n      onStateChangeRef.current(hydratedState);\n    }\n    isFirstMountRef.current = false;\n  }, [getRootState, emitter, state]);\n  var defaultOnUnhandledAction = React.useCallback(function (action) {\n    if (process.env.NODE_ENV === 'production') {\n      return;\n    }\n    var payload = action.payload;\n    var message = \"The action '\" + action.type + \"'\" + (payload ? \" with payload \" + JSON.stringify(action.payload) : '') + \" was not handled by any navigator.\";\n    switch (action.type) {\n      case 'NAVIGATE':\n      case 'PUSH':\n      case 'REPLACE':\n      case 'JUMP_TO':\n        if (payload !== null && payload !== void 0 && payload.name) {\n          message += \"\\n\\nDo you have a screen named '\" + payload.name + \"'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.\";\n        } else {\n          message += \"\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.\";\n        }\n        break;\n      case 'GO_BACK':\n      case 'POP':\n      case 'POP_TO_TOP':\n        message += \"\\n\\nIs there any screen to go back to?\";\n        break;\n      case 'OPEN_DRAWER':\n      case 'CLOSE_DRAWER':\n      case 'TOGGLE_DRAWER':\n        message += \"\\n\\nIs your screen inside a Drawer navigator?\";\n        break;\n    }\n    message += \"\\n\\nThis is a development-only warning and won't be shown in production.\";\n    console.error(message);\n  }, []);\n  var element = React.createElement(_NavigationContainerRefContext.default.Provider, {\n    value: navigation\n  }, React.createElement(_useScheduleUpdate.ScheduleUpdateContext.Provider, {\n    value: scheduleContext\n  }, React.createElement(_NavigationBuilderContext.default.Provider, {\n    value: builderContext\n  }, React.createElement(_NavigationStateContext.default.Provider, {\n    value: context\n  }, React.createElement(_UnhandledActionContext.default.Provider, {\n    value: onUnhandledAction !== null && onUnhandledAction !== void 0 ? onUnhandledAction : defaultOnUnhandledAction\n  }, React.createElement(_EnsureSingleNavigator.default, null, children))))));\n  if (independent) {\n    element = React.createElement(_NavigationRouteContext.default.Provider, {\n      value: undefined\n    }, React.createElement(_NavigationContext.default.Provider, {\n      value: undefined\n    }, element));\n  }\n  return element;\n});\nvar _default = BaseNavigationContainer;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["serializableWarnings","duplicateNameWarnings","getPartialState","state","undefined","key","routeNames","partialState","stale","routes","map","route","BaseNavigationContainer","React","forwardRef","ref","initialState","_ref","onStateChange","onUnhandledAction","independent","children","parent","useContext","NavigationStateContext","isDefault","Error","useSyncState","getState","setState","scheduleUpdate","flushUpdates","isFirstMountRef","useRef","navigatorKeyRef","getKey","useCallback","current","setKey","useChildListeners","listeners","addListener","useKeyedChildListeners","keyedListeners","addKeyedListener","dispatch","action","focus","console","error","NOT_INITIALIZED_ERROR","navigation","canGoBack","result","handled","resetRoot","target","root","_keyedListeners$getSt","CommonActions","reset","getRootState","_keyedListeners$getSt3","getCurrentRoute","findFocusedRoute","emitter","useEventEmitter","useOptionsGetters","addOptionsGetter","getCurrentOptions","useMemo","Object","keys","reduce","acc","name","arguments","create","isFocused","getParent","stateRef","isReady","useImperativeHandle","onDispatchAction","noop","emit","type","data","stack","stackRef","lastEmittedOptionsRef","onOptionsChange","options","builderContext","scheduleContext","isInitialRef","getIsInitial","context","onStateChangeRef","useEffect","hydratedState","process","env","NODE_ENV","serializableResult","checkSerializable","serializable","location","reason","path","pointer","params","i","length","curr","prev","_pointer","test","JSON","stringify","message","includes","push","warn","duplicateRouteNamesResult","checkDuplicateRouteNames","locations","join","defaultOnUnhandledAction","payload","element","NavigationContainerRefContext","Provider","value","ScheduleUpdateContext","NavigationBuilderContext","UnhandledActionContext","EnsureSingleNavigator","NavigationRouteContext","NavigationContext"],"sources":["BaseNavigationContainer.tsx"],"sourcesContent":["import {\n  CommonActions,\n  InitialState,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport checkDuplicateRouteNames from './checkDuplicateRouteNames';\nimport checkSerializable from './checkSerializable';\nimport { NOT_INITIALIZED_ERROR } from './createNavigationContainerRef';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport findFocusedRoute from './findFocusedRoute';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationContainerRefContext from './NavigationContainerRefContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport type {\n  NavigationContainerEventMap,\n  NavigationContainerProps,\n  NavigationContainerRef,\n} from './types';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport useChildListeners from './useChildListeners';\nimport useEventEmitter from './useEventEmitter';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useOptionsGetters from './useOptionsGetters';\nimport { ScheduleUpdateContext } from './useScheduleUpdate';\nimport useSyncState from './useSyncState';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\nconst serializableWarnings: string[] = [];\nconst duplicateNameWarnings: string[] = [];\n\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\nconst getPartialState = (\n  state: InitialState | undefined\n): PartialState<NavigationState> | undefined => {\n  if (state === undefined) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { key, routeNames, ...partialState } = state;\n\n  return {\n    ...partialState,\n    stale: true,\n    routes: state.routes.map((route) => {\n      if (route.state === undefined) {\n        return route as Route<string> & {\n          state?: PartialState<NavigationState>;\n        };\n      }\n\n      return { ...route, state: getPartialState(route.state) };\n    }),\n  };\n};\n\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst BaseNavigationContainer = React.forwardRef(\n  function BaseNavigationContainer(\n    {\n      initialState,\n      onStateChange,\n      onUnhandledAction,\n      independent,\n      children,\n    }: NavigationContainerProps,\n    ref?: React.Ref<NavigationContainerRef<ParamListBase>>\n  ) {\n    const parent = React.useContext(NavigationStateContext);\n\n    if (!parent.isDefault && !independent) {\n      throw new Error(\n        \"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\"\n      );\n    }\n\n    const [state, getState, setState, scheduleUpdate, flushUpdates] =\n      useSyncState<State>(() =>\n        getPartialState(initialState == null ? undefined : initialState)\n      );\n\n    const isFirstMountRef = React.useRef<boolean>(true);\n\n    const navigatorKeyRef = React.useRef<string | undefined>();\n\n    const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n    const setKey = React.useCallback((key: string) => {\n      navigatorKeyRef.current = key;\n    }, []);\n\n    const { listeners, addListener } = useChildListeners();\n\n    const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n    const dispatch = React.useCallback(\n      (\n        action:\n          | NavigationAction\n          | ((state: NavigationState) => NavigationAction)\n      ) => {\n        if (listeners.focus[0] == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) => navigation.dispatch(action));\n        }\n      },\n      [listeners.focus]\n    );\n\n    const canGoBack = React.useCallback(() => {\n      if (listeners.focus[0] == null) {\n        return false;\n      }\n\n      const { result, handled } = listeners.focus[0]((navigation) =>\n        navigation.canGoBack()\n      );\n\n      if (handled) {\n        return result;\n      } else {\n        return false;\n      }\n    }, [listeners.focus]);\n\n    const resetRoot = React.useCallback(\n      (state?: PartialState<NavigationState> | NavigationState) => {\n        const target = state?.key ?? keyedListeners.getState.root?.().key;\n\n        if (target == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) =>\n            navigation.dispatch({\n              ...CommonActions.reset(state),\n              target,\n            })\n          );\n        }\n      },\n      [keyedListeners.getState, listeners.focus]\n    );\n\n    const getRootState = React.useCallback(() => {\n      return keyedListeners.getState.root?.();\n    }, [keyedListeners.getState]);\n\n    const getCurrentRoute = React.useCallback(() => {\n      const state = getRootState();\n\n      if (state == null) {\n        return undefined;\n      }\n\n      const route = findFocusedRoute(state);\n\n      return route as Route<string> | undefined;\n    }, [getRootState]);\n\n    const emitter = useEventEmitter<NavigationContainerEventMap>();\n\n    const { addOptionsGetter, getCurrentOptions } = useOptionsGetters({});\n\n    const navigation: NavigationContainerRef<ParamListBase> = React.useMemo(\n      () => ({\n        ...Object.keys(CommonActions).reduce<any>((acc, name) => {\n          acc[name] = (...args: any[]) =>\n            // @ts-expect-error: this is ok\n            dispatch(CommonActions[name](...args));\n          return acc;\n        }, {}),\n        ...emitter.create('root'),\n        dispatch,\n        resetRoot,\n        isFocused: () => true,\n        canGoBack,\n        getParent: () => undefined,\n        getState: () => stateRef.current,\n        getRootState,\n        getCurrentRoute,\n        getCurrentOptions,\n        isReady: () => listeners.focus[0] != null,\n      }),\n      [\n        canGoBack,\n        dispatch,\n        emitter,\n        getCurrentOptions,\n        getCurrentRoute,\n        getRootState,\n        listeners.focus,\n        resetRoot,\n      ]\n    );\n\n    React.useImperativeHandle(ref, () => navigation, [navigation]);\n\n    const onDispatchAction = React.useCallback(\n      (action: NavigationAction, noop: boolean) => {\n        emitter.emit({\n          type: '__unsafe_action__',\n          data: { action, noop, stack: stackRef.current },\n        });\n      },\n      [emitter]\n    );\n\n    const lastEmittedOptionsRef = React.useRef<object | undefined>();\n\n    const onOptionsChange = React.useCallback(\n      (options: object) => {\n        if (lastEmittedOptionsRef.current === options) {\n          return;\n        }\n\n        lastEmittedOptionsRef.current = options;\n\n        emitter.emit({\n          type: 'options',\n          data: { options },\n        });\n      },\n      [emitter]\n    );\n\n    const stackRef = React.useRef<string | undefined>();\n\n    const builderContext = React.useMemo(\n      () => ({\n        addListener,\n        addKeyedListener,\n        onDispatchAction,\n        onOptionsChange,\n        stackRef,\n      }),\n      [addListener, addKeyedListener, onDispatchAction, onOptionsChange]\n    );\n\n    const scheduleContext = React.useMemo(\n      () => ({ scheduleUpdate, flushUpdates }),\n      [scheduleUpdate, flushUpdates]\n    );\n\n    const isInitialRef = React.useRef(true);\n\n    const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n    const context = React.useMemo(\n      () => ({\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      }),\n      [\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      ]\n    );\n\n    const onStateChangeRef = React.useRef(onStateChange);\n    const stateRef = React.useRef(state);\n\n    React.useEffect(() => {\n      isInitialRef.current = false;\n      onStateChangeRef.current = onStateChange;\n      stateRef.current = state;\n    });\n\n    React.useEffect(() => {\n      const hydratedState = getRootState();\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (hydratedState !== undefined) {\n          const serializableResult = checkSerializable(hydratedState);\n\n          if (!serializableResult.serializable) {\n            const { location, reason } = serializableResult;\n\n            let path = '';\n            let pointer: Record<any, any> = hydratedState;\n            let params = false;\n\n            for (let i = 0; i < location.length; i++) {\n              const curr = location[i];\n              const prev = location[i - 1];\n\n              pointer = pointer[curr];\n\n              if (!params && curr === 'state') {\n                continue;\n              } else if (!params && curr === 'routes') {\n                if (path) {\n                  path += ' > ';\n                }\n              } else if (\n                !params &&\n                typeof curr === 'number' &&\n                prev === 'routes'\n              ) {\n                path += pointer?.name;\n              } else if (!params) {\n                path += ` > ${curr}`;\n                params = true;\n              } else {\n                if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                  path += `[${curr}]`;\n                } else if (/^[a-z$_]+$/i.test(curr)) {\n                  path += `.${curr}`;\n                } else {\n                  path += `[${JSON.stringify(curr)}]`;\n                }\n              }\n            }\n\n            const message = `Non-serializable values were found in the navigation state. Check:\\n\\n${path} (${reason})\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.`;\n\n            if (!serializableWarnings.includes(message)) {\n              serializableWarnings.push(message);\n              console.warn(message);\n            }\n          }\n\n          const duplicateRouteNamesResult =\n            checkDuplicateRouteNames(hydratedState);\n\n          if (duplicateRouteNamesResult.length) {\n            const message = `Found screens with the same name nested inside one another. Check:\\n${duplicateRouteNamesResult.map(\n              (locations) => `\\n${locations.join(', ')}`\n            )}\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.`;\n\n            if (!duplicateNameWarnings.includes(message)) {\n              duplicateNameWarnings.push(message);\n              console.warn(message);\n            }\n          }\n        }\n      }\n\n      emitter.emit({ type: 'state', data: { state } });\n\n      if (!isFirstMountRef.current && onStateChangeRef.current) {\n        onStateChangeRef.current(hydratedState);\n      }\n\n      isFirstMountRef.current = false;\n    }, [getRootState, emitter, state]);\n\n    const defaultOnUnhandledAction = React.useCallback(\n      (action: NavigationAction) => {\n        if (process.env.NODE_ENV === 'production') {\n          return;\n        }\n\n        const payload: Record<string, any> | undefined = action.payload;\n\n        let message = `The action '${action.type}'${\n          payload ? ` with payload ${JSON.stringify(action.payload)}` : ''\n        } was not handled by any navigator.`;\n\n        switch (action.type) {\n          case 'NAVIGATE':\n          case 'PUSH':\n          case 'REPLACE':\n          case 'JUMP_TO':\n            if (payload?.name) {\n              message += `\\n\\nDo you have a screen named '${payload.name}'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.`;\n            } else {\n              message += `\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.`;\n            }\n\n            break;\n          case 'GO_BACK':\n          case 'POP':\n          case 'POP_TO_TOP':\n            message += `\\n\\nIs there any screen to go back to?`;\n            break;\n          case 'OPEN_DRAWER':\n          case 'CLOSE_DRAWER':\n          case 'TOGGLE_DRAWER':\n            message += `\\n\\nIs your screen inside a Drawer navigator?`;\n            break;\n        }\n\n        message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n\n        console.error(message);\n      },\n      []\n    );\n\n    let element = (\n      <NavigationContainerRefContext.Provider value={navigation}>\n        <ScheduleUpdateContext.Provider value={scheduleContext}>\n          <NavigationBuilderContext.Provider value={builderContext}>\n            <NavigationStateContext.Provider value={context}>\n              <UnhandledActionContext.Provider\n                value={onUnhandledAction ?? defaultOnUnhandledAction}\n              >\n                <EnsureSingleNavigator>{children}</EnsureSingleNavigator>\n              </UnhandledActionContext.Provider>\n            </NavigationStateContext.Provider>\n          </NavigationBuilderContext.Provider>\n        </ScheduleUpdateContext.Provider>\n      </NavigationContainerRefContext.Provider>\n    );\n\n    if (independent) {\n      // We need to clear any existing contexts for nested independent container to work correctly\n      element = (\n        <NavigationRouteContext.Provider value={undefined}>\n          <NavigationContext.Provider value={undefined}>\n            {element}\n          </NavigationContext.Provider>\n        </NavigationRouteContext.Provider>\n      );\n    }\n\n    return element;\n  }\n);\n\nexport default BaseNavigationContainer;\n"]},"metadata":{},"sourceType":"script"}