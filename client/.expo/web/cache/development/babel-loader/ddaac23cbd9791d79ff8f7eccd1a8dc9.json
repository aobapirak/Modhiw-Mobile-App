{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _color = _interopRequireDefault(require(\"color\"));\nvar _reactNative = require(\"react-native\");\nvar _theming = require(\"../core/theming\");\nvar _colors = require(\"../styles/colors\");\nvar _excluded = [\"inset\", \"style\", \"theme\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar Divider = function Divider(_ref) {\n  var inset = _ref.inset,\n    style = _ref.style,\n    theme = _ref.theme,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var isDarkTheme = theme.dark;\n  return React.createElement(_reactNative.View, _extends({}, rest, {\n    style: [isDarkTheme ? styles.dark : styles.light, inset && styles.inset, style]\n  }));\n};\nvar styles = _reactNative.StyleSheet.create({\n  light: {\n    backgroundColor: (0, _color.default)(_colors.black).alpha(0.12).rgb().string(),\n    height: _reactNative.StyleSheet.hairlineWidth\n  },\n  dark: {\n    backgroundColor: (0, _color.default)(_colors.white).alpha(0.12).rgb().string(),\n    height: _reactNative.StyleSheet.hairlineWidth\n  },\n  inset: {\n    marginLeft: 72\n  }\n});\nvar _default = (0, _theming.withTheme)(Divider);\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AA0CA,IAAMA,OAAO,GAAG,SAAVA,OAAO,CAAGC,MAA6C;EAAA,IAA1CC,KAAF,GAA4CD,KAA1CC,KAAF;IAASC,KAAT,GAA4CF,KAAnCE,KAAT;IAAgBC,KAAhB,GAA4CH,KAA5BG,KAAhB;IAA0BC,8CAAkBJ;EAC3D,IAAcK,cAAgBF,KAA9B,CAAQG,IAAI;EACZ,OACEC,oBAACC,iBAAD,eACMJ,IADN;IAEEF,KAAK,EAAE,CACLG,WAAW,GAAGI,MAAM,CAACH,IAAV,GAAiBG,MAAM,CAACC,KAD9B,EAELT,KAAK,IAAIQ,MAAM,CAACR,KAFX,EAGLC,KAHK;EAFT,GADF;AAUD,CAZD;AAcA,IAAMO,MAAM,GAAGE,uBAAU,CAACC,MAAX,CAAkB;EAC/BF,KAAK,EAAE;IACLG,eAAe,EAAEC,kBAAK,EAACC,aAAD,CAAL,CAAaC,KAAb,CAAmB,IAAnB,EAAyBC,GAAzB,GAA+BC,MAA/B,EADZ;IAELC,MAAM,EAAER,uBAAU,CAACS;EAFd,CADwB;EAK/Bd,IAAI,EAAE;IACJO,eAAe,EAAEC,kBAAK,EAACO,aAAD,CAAL,CAAaL,KAAb,CAAmB,IAAnB,EAAyBC,GAAzB,GAA+BC,MAA/B,EADb;IAEJC,MAAM,EAAER,uBAAU,CAACS;EAFf,CALyB;EAS/BnB,KAAK,EAAE;IACLqB,UAAU,EAAE;EADP;AATwB,CAAlB,CAAf;AAAA,eAceC,sBAAS,EAACxB,OAAD,CAAxB;AAAA","names":["Divider","_ref","inset","style","theme","rest","isDarkTheme","dark","React","View","styles","light","StyleSheet","create","backgroundColor","color","black","alpha","rgb","string","height","hairlineWidth","white","marginLeft","withTheme"],"sources":["Divider.tsx"],"sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport { StyleSheet, View, ViewStyle, StyleProp } from 'react-native';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport type { $RemoveChildren } from '../types';\n\nexport type Props = $RemoveChildren<typeof View> & {\n  /**\n   *  Whether divider has a left inset.\n   */\n  inset?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A divider is a thin, lightweight separator that groups content in lists and page layouts.\n *\n * <div class=\"screenshots\">\n *  <figure>\n *    <img class=\"medium\" src=\"screenshots/divider.png\" />\n *  </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Divider, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Text>Lemon</Text>\n *     <Divider />\n *     <Text>Mango</Text>\n *     <Divider />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Divider = ({ inset, style, theme, ...rest }: Props) => {\n  const { dark: isDarkTheme } = theme;\n  return (\n    <View\n      {...rest}\n      style={[\n        isDarkTheme ? styles.dark : styles.light,\n        inset && styles.inset,\n        style,\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  light: {\n    backgroundColor: color(black).alpha(0.12).rgb().string(),\n    height: StyleSheet.hairlineWidth,\n  },\n  dark: {\n    backgroundColor: color(white).alpha(0.12).rgb().string(),\n    height: StyleSheet.hairlineWidth,\n  },\n  inset: {\n    marginLeft: 72,\n  },\n});\n\nexport default withTheme(Divider);\n"]},"metadata":{},"sourceType":"script"}