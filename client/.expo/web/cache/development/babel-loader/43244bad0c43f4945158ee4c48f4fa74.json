{"ast":null,"code":"\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\nvar _isEmpty = _interopRequireDefault(require(\"../isEmpty\"));\nvar _warning = _interopRequireDefault(require(\"fbjs/lib/warning\"));\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction defaultGetRowData(dataBlob, sectionID, rowID) {\n  return dataBlob[sectionID][rowID];\n}\nfunction defaultGetSectionHeaderData(dataBlob, sectionID) {\n  return dataBlob[sectionID];\n}\n\nvar ListViewDataSource = function () {\n  function ListViewDataSource(params) {\n    _classCallCheck(this, ListViewDataSource);\n    (0, _invariant.default)(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');\n    this._rowHasChanged = params.rowHasChanged;\n    this._getRowData = params.getRowData || defaultGetRowData;\n    this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;\n    this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;\n    this._dataBlob = null;\n    this._dirtyRows = [];\n    this._dirtySections = [];\n    this._cachedRowCount = 0;\n\n    this.rowIdentities = [];\n    this.sectionIdentities = [];\n  }\n\n  ListViewDataSource.prototype.cloneWithRows = function cloneWithRows(dataBlob, rowIdentities) {\n    var rowIds = rowIdentities ? [[].concat(rowIdentities)] : null;\n    if (!this._sectionHeaderHasChanged) {\n      this._sectionHeaderHasChanged = function () {\n        return false;\n      };\n    }\n    return this.cloneWithRowsAndSections({\n      s1: dataBlob\n    }, ['s1'], rowIds);\n  };\n\n  ListViewDataSource.prototype.cloneWithRowsAndSections = function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {\n    (0, _invariant.default)(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');\n    (0, _invariant.default)(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');\n    var newSource = new ListViewDataSource({\n      getRowData: this._getRowData,\n      getSectionHeaderData: this._getSectionHeaderData,\n      rowHasChanged: this._rowHasChanged,\n      sectionHeaderHasChanged: this._sectionHeaderHasChanged\n    });\n    newSource._dataBlob = dataBlob;\n    if (sectionIdentities) {\n      newSource.sectionIdentities = sectionIdentities;\n    } else {\n      newSource.sectionIdentities = Object.keys(dataBlob);\n    }\n    if (rowIdentities) {\n      newSource.rowIdentities = rowIdentities;\n    } else {\n      newSource.rowIdentities = [];\n      newSource.sectionIdentities.forEach(function (sectionID) {\n        newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));\n      });\n    }\n    newSource._cachedRowCount = countRows(newSource.rowIdentities);\n    newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);\n    return newSource;\n  };\n\n  ListViewDataSource.prototype.getRowCount = function getRowCount() {\n    return this._cachedRowCount;\n  };\n\n  ListViewDataSource.prototype.getRowAndSectionCount = function getRowAndSectionCount() {\n    return this._cachedRowCount + this.sectionIdentities.length;\n  };\n\n  ListViewDataSource.prototype.rowShouldUpdate = function rowShouldUpdate(sectionIndex, rowIndex) {\n    var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];\n    (0, _warning.default)(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);\n    return needsUpdate;\n  };\n\n  ListViewDataSource.prototype.getRowData = function getRowData(sectionIndex, rowIndex) {\n    var sectionID = this.sectionIdentities[sectionIndex];\n    var rowID = this.rowIdentities[sectionIndex][rowIndex];\n    (0, _warning.default)(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);\n    return this._getRowData(this._dataBlob, sectionID, rowID);\n  };\n\n  ListViewDataSource.prototype.getRowIDForFlatIndex = function getRowIDForFlatIndex(index) {\n    var accessIndex = index;\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      if (accessIndex >= this.rowIdentities[ii].length) {\n        accessIndex -= this.rowIdentities[ii].length;\n      } else {\n        return this.rowIdentities[ii][accessIndex];\n      }\n    }\n    return null;\n  };\n\n  ListViewDataSource.prototype.getSectionIDForFlatIndex = function getSectionIDForFlatIndex(index) {\n    var accessIndex = index;\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      if (accessIndex >= this.rowIdentities[ii].length) {\n        accessIndex -= this.rowIdentities[ii].length;\n      } else {\n        return this.sectionIdentities[ii];\n      }\n    }\n    return null;\n  };\n\n  ListViewDataSource.prototype.getSectionLengths = function getSectionLengths() {\n    var results = [];\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      results.push(this.rowIdentities[ii].length);\n    }\n    return results;\n  };\n\n  ListViewDataSource.prototype.sectionHeaderShouldUpdate = function sectionHeaderShouldUpdate(sectionIndex) {\n    var needsUpdate = this._dirtySections[sectionIndex];\n    (0, _warning.default)(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);\n    return needsUpdate;\n  };\n\n  ListViewDataSource.prototype.getSectionHeaderData = function getSectionHeaderData(sectionIndex) {\n    if (!this._getSectionHeaderData) {\n      return null;\n    }\n    var sectionID = this.sectionIdentities[sectionIndex];\n    (0, _warning.default)(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);\n    return this._getSectionHeaderData(this._dataBlob, sectionID);\n  };\n\n  ListViewDataSource.prototype._calculateDirtyArrays = function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {\n    var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);\n    var prevRowsHash = {};\n    for (var ii = 0; ii < prevRowIDs.length; ii++) {\n      var sectionID = prevSectionIDs[ii];\n      (0, _warning.default)(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);\n      prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);\n    }\n\n    this._dirtySections = [];\n    this._dirtyRows = [];\n    var dirty;\n    for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {\n      var sectionID = this.sectionIdentities[sIndex];\n      dirty = !prevSectionsHash[sectionID];\n      var sectionHeaderHasChanged = this._sectionHeaderHasChanged;\n      if (!dirty && sectionHeaderHasChanged) {\n        dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));\n      }\n      this._dirtySections.push(!!dirty);\n      this._dirtyRows[sIndex] = [];\n      for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {\n        var rowID = this.rowIdentities[sIndex][rIndex];\n        dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));\n        this._dirtyRows[sIndex].push(!!dirty);\n      }\n    }\n  };\n  return ListViewDataSource;\n}();\nfunction countRows(allRowIDs) {\n  var totalRows = 0;\n  for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n    var rowIDs = allRowIDs[sectionIdx];\n    totalRows += rowIDs.length;\n  }\n  return totalRows;\n}\nfunction keyedDictionaryFromArray(arr) {\n  if ((0, _isEmpty.default)(arr)) {\n    return {};\n  }\n  var result = {};\n  for (var ii = 0; ii < arr.length; ii++) {\n    var key = arr[ii];\n    (0, _warning.default)(!result[key], 'Value appears more than once in array: ' + key);\n    result[key] = true;\n  }\n  return result;\n}\nvar _default = ListViewDataSource;\nexports.default = _default;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","defaultGetRowData","dataBlob","sectionID","rowID","defaultGetSectionHeaderData","ListViewDataSource","params","invariant","rowHasChanged","_rowHasChanged","_getRowData","getRowData","_sectionHeaderHasChanged","sectionHeaderHasChanged","_getSectionHeaderData","getSectionHeaderData","_dataBlob","_dirtyRows","_dirtySections","_cachedRowCount","rowIdentities","sectionIdentities","prototype","cloneWithRows","rowIds","concat","cloneWithRowsAndSections","s1","length","newSource","Object","keys","forEach","push","countRows","_calculateDirtyArrays","getRowCount","getRowAndSectionCount","rowShouldUpdate","sectionIndex","rowIndex","needsUpdate","warning","undefined","getRowIDForFlatIndex","index","accessIndex","ii","getSectionIDForFlatIndex","getSectionLengths","results","sectionHeaderShouldUpdate","prevDataBlob","prevSectionIDs","prevRowIDs","prevSectionsHash","keyedDictionaryFromArray","prevRowsHash","dirty","sIndex","rIndex","allRowIDs","totalRows","sectionIdx","rowIDs","arr","isEmpty","result","key"],"sources":["C:/Users/prariya/Desktop/Modhiw/client/node_modules/react-native-phone-number-input/node_modules/react-native-web/dist/vendor/react-native/ListView/ListViewDataSource.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule ListViewDataSource\n * \n * @format\n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport invariant from 'fbjs/lib/invariant';\nimport isEmpty from '../isEmpty';\nimport warning from 'fbjs/lib/warning';\n\nfunction defaultGetRowData(dataBlob, sectionID, rowID) {\n  return dataBlob[sectionID][rowID];\n}\n\nfunction defaultGetSectionHeaderData(dataBlob, sectionID) {\n  return dataBlob[sectionID];\n}\n\n/**\n * Provides efficient data processing and access to the\n * `ListView` component.  A `ListViewDataSource` is created with functions for\n * extracting data from the input blob, and comparing elements (with default\n * implementations for convenience).  The input blob can be as simple as an\n * array of strings, or an object with rows nested inside section objects.\n *\n * To update the data in the datasource, use `cloneWithRows` (or\n * `cloneWithRowsAndSections` if you care about sections).  The data in the\n * data source is immutable, so you can't modify it directly.  The clone methods\n * suck in the new data and compute a diff for each row so ListView knows\n * whether to re-render it or not.\n *\n * In this example, a component receives data in chunks, handled by\n * `_onDataArrived`, which concats the new data onto the old data and updates the\n * data source.  We use `concat` to create a new array - mutating `this._data`,\n * e.g. with `this._data.push(newRowData)`, would be an error. `_rowHasChanged`\n * understands the shape of the row data and knows how to efficiently compare\n * it.\n *\n * ```\n * getInitialState: function() {\n *   var ds = new ListView.DataSource({rowHasChanged: this._rowHasChanged});\n *   return {ds};\n * },\n * _onDataArrived(newData) {\n *   this._data = this._data.concat(newData);\n *   this.setState({\n *     ds: this.state.ds.cloneWithRows(this._data)\n *   });\n * }\n * ```\n */\n\nvar ListViewDataSource = function () {\n  /**\n   * You can provide custom extraction and `hasChanged` functions for section\n   * headers and rows.  If absent, data will be extracted with the\n   * `defaultGetRowData` and `defaultGetSectionHeaderData` functions.\n   *\n   * The default extractor expects data of one of the following forms:\n   *\n   *      { sectionID_1: { rowID_1: <rowData1>, ... }, ... }\n   *\n   *    or\n   *\n   *      { sectionID_1: [ <rowData1>, <rowData2>, ... ], ... }\n   *\n   *    or\n   *\n   *      [ [ <rowData1>, <rowData2>, ... ], ... ]\n   *\n   * The constructor takes in a params argument that can contain any of the\n   * following:\n   *\n   * - getRowData(dataBlob, sectionID, rowID);\n   * - getSectionHeaderData(dataBlob, sectionID);\n   * - rowHasChanged(prevRowData, nextRowData);\n   * - sectionHeaderHasChanged(prevSectionData, nextSectionData);\n   */\n  function ListViewDataSource(params) {\n    _classCallCheck(this, ListViewDataSource);\n\n    invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');\n    this._rowHasChanged = params.rowHasChanged;\n    this._getRowData = params.getRowData || defaultGetRowData;\n    this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;\n    this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;\n\n    this._dataBlob = null;\n    this._dirtyRows = [];\n    this._dirtySections = [];\n    this._cachedRowCount = 0;\n\n    // These two private variables are accessed by outsiders because ListView\n    // uses them to iterate over the data in this class.\n    this.rowIdentities = [];\n    this.sectionIdentities = [];\n  }\n\n  /**\n   * Clones this `ListViewDataSource` with the specified `dataBlob` and\n   * `rowIdentities`. The `dataBlob` is just an arbitrary blob of data. At\n   * construction an extractor to get the interesting information was defined\n   * (or the default was used).\n   *\n   * The `rowIdentities` is a 2D array of identifiers for rows.\n   * ie. [['a1', 'a2'], ['b1', 'b2', 'b3'], ...].  If not provided, it's\n   * assumed that the keys of the section data are the row identities.\n   *\n   * Note: This function does NOT clone the data in this data source. It simply\n   * passes the functions defined at construction to a new data source with\n   * the data specified. If you wish to maintain the existing data you must\n   * handle merging of old and new data separately and then pass that into\n   * this function as the `dataBlob`.\n   */\n\n\n  ListViewDataSource.prototype.cloneWithRows = function cloneWithRows(dataBlob, rowIdentities) {\n    var rowIds = rowIdentities ? [[].concat(rowIdentities)] : null;\n    if (!this._sectionHeaderHasChanged) {\n      this._sectionHeaderHasChanged = function () {\n        return false;\n      };\n    }\n    return this.cloneWithRowsAndSections({ s1: dataBlob }, ['s1'], rowIds);\n  };\n\n  /**\n   * This performs the same function as the `cloneWithRows` function but here\n   * you also specify what your `sectionIdentities` are. If you don't care\n   * about sections you should safely be able to use `cloneWithRows`.\n   *\n   * `sectionIdentities` is an array of identifiers for sections.\n   * ie. ['s1', 's2', ...].  The identifiers should correspond to the keys or array indexes\n   * of the data you wish to include.  If not provided, it's assumed that the\n   * keys of dataBlob are the section identities.\n   *\n   * Note: this returns a new object!\n   *\n   * ```\n   * const dataSource = ds.cloneWithRowsAndSections({\n   *   addresses: ['row 1', 'row 2'],\n   *   phone_numbers: ['data 1', 'data 2'],\n   * }, ['phone_numbers']);\n   * ```\n   */\n\n\n  ListViewDataSource.prototype.cloneWithRowsAndSections = function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {\n    invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');\n    invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');\n\n    var newSource = new ListViewDataSource({\n      getRowData: this._getRowData,\n      getSectionHeaderData: this._getSectionHeaderData,\n      rowHasChanged: this._rowHasChanged,\n      sectionHeaderHasChanged: this._sectionHeaderHasChanged\n    });\n    newSource._dataBlob = dataBlob;\n    if (sectionIdentities) {\n      newSource.sectionIdentities = sectionIdentities;\n    } else {\n      newSource.sectionIdentities = Object.keys(dataBlob);\n    }\n    if (rowIdentities) {\n      newSource.rowIdentities = rowIdentities;\n    } else {\n      newSource.rowIdentities = [];\n      newSource.sectionIdentities.forEach(function (sectionID) {\n        newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));\n      });\n    }\n    newSource._cachedRowCount = countRows(newSource.rowIdentities);\n\n    newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);\n\n    return newSource;\n  };\n\n  /**\n   * Returns the total number of rows in the data source.\n   *\n   * If you are specifying the rowIdentities or sectionIdentities, then `getRowCount` will return the number of rows in the filtered data source.\n   */\n\n\n  ListViewDataSource.prototype.getRowCount = function getRowCount() {\n    return this._cachedRowCount;\n  };\n\n  /**\n   * Returns the total number of rows in the data source (see `getRowCount` for how this is calculated) plus the number of sections in the data.\n   *\n   * If you are specifying the rowIdentities or sectionIdentities, then `getRowAndSectionCount` will return the number of rows & sections in the filtered data source.\n   */\n\n\n  ListViewDataSource.prototype.getRowAndSectionCount = function getRowAndSectionCount() {\n    return this._cachedRowCount + this.sectionIdentities.length;\n  };\n\n  /**\n   * Returns if the row is dirtied and needs to be rerendered\n   */\n\n\n  ListViewDataSource.prototype.rowShouldUpdate = function rowShouldUpdate(sectionIndex, rowIndex) {\n    var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];\n    warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);\n    return needsUpdate;\n  };\n\n  /**\n   * Gets the data required to render the row.\n   */\n\n\n  ListViewDataSource.prototype.getRowData = function getRowData(sectionIndex, rowIndex) {\n    var sectionID = this.sectionIdentities[sectionIndex];\n    var rowID = this.rowIdentities[sectionIndex][rowIndex];\n    warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);\n    return this._getRowData(this._dataBlob, sectionID, rowID);\n  };\n\n  /**\n   * Gets the rowID at index provided if the dataSource arrays were flattened,\n   * or null of out of range indexes.\n   */\n\n\n  ListViewDataSource.prototype.getRowIDForFlatIndex = function getRowIDForFlatIndex(index) {\n    var accessIndex = index;\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      if (accessIndex >= this.rowIdentities[ii].length) {\n        accessIndex -= this.rowIdentities[ii].length;\n      } else {\n        return this.rowIdentities[ii][accessIndex];\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Gets the sectionID at index provided if the dataSource arrays were flattened,\n   * or null for out of range indexes.\n   */\n\n\n  ListViewDataSource.prototype.getSectionIDForFlatIndex = function getSectionIDForFlatIndex(index) {\n    var accessIndex = index;\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      if (accessIndex >= this.rowIdentities[ii].length) {\n        accessIndex -= this.rowIdentities[ii].length;\n      } else {\n        return this.sectionIdentities[ii];\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Returns an array containing the number of rows in each section\n   */\n\n\n  ListViewDataSource.prototype.getSectionLengths = function getSectionLengths() {\n    var results = [];\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      results.push(this.rowIdentities[ii].length);\n    }\n    return results;\n  };\n\n  /**\n   * Returns if the section header is dirtied and needs to be rerendered\n   */\n\n\n  ListViewDataSource.prototype.sectionHeaderShouldUpdate = function sectionHeaderShouldUpdate(sectionIndex) {\n    var needsUpdate = this._dirtySections[sectionIndex];\n    warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);\n    return needsUpdate;\n  };\n\n  /**\n   * Gets the data required to render the section header\n   */\n\n\n  ListViewDataSource.prototype.getSectionHeaderData = function getSectionHeaderData(sectionIndex) {\n    if (!this._getSectionHeaderData) {\n      return null;\n    }\n    var sectionID = this.sectionIdentities[sectionIndex];\n    warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);\n    return this._getSectionHeaderData(this._dataBlob, sectionID);\n  };\n\n  /**\n   * Private members and methods.\n   */\n\n  // These two 'protected' variables are accessed by ListView to iterate over\n  // the data in this class.\n\n\n  ListViewDataSource.prototype._calculateDirtyArrays = function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {\n    // construct a hashmap of the existing (old) id arrays\n    var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);\n    var prevRowsHash = {};\n    for (var ii = 0; ii < prevRowIDs.length; ii++) {\n      var sectionID = prevSectionIDs[ii];\n      warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);\n      prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);\n    }\n\n    // compare the 2 identity array and get the dirtied rows\n    this._dirtySections = [];\n    this._dirtyRows = [];\n\n    var dirty;\n    for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {\n      var sectionID = this.sectionIdentities[sIndex];\n      // dirty if the sectionHeader is new or _sectionHasChanged is true\n      dirty = !prevSectionsHash[sectionID];\n      var sectionHeaderHasChanged = this._sectionHeaderHasChanged;\n      if (!dirty && sectionHeaderHasChanged) {\n        dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));\n      }\n      this._dirtySections.push(!!dirty);\n\n      this._dirtyRows[sIndex] = [];\n      for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {\n        var rowID = this.rowIdentities[sIndex][rIndex];\n        // dirty if the section is new, row is new or _rowHasChanged is true\n        dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));\n        this._dirtyRows[sIndex].push(!!dirty);\n      }\n    }\n  };\n\n  return ListViewDataSource;\n}();\n\nfunction countRows(allRowIDs) {\n  var totalRows = 0;\n  for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n    var rowIDs = allRowIDs[sectionIdx];\n    totalRows += rowIDs.length;\n  }\n  return totalRows;\n}\n\nfunction keyedDictionaryFromArray(arr) {\n  if (isEmpty(arr)) {\n    return {};\n  }\n  var result = {};\n  for (var ii = 0; ii < arr.length; ii++) {\n    var key = arr[ii];\n    warning(!result[key], 'Value appears more than once in array: ' + key);\n    result[key] = true;\n  }\n  return result;\n}\n\nexport default ListViewDataSource;"],"mappings":"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"},"metadata":{},"sourceType":"script"}