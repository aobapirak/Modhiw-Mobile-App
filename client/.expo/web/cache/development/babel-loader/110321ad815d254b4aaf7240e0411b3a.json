{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.CardCover = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _theming = require(\"../../core/theming\");\nvar _colors = require(\"../../styles/colors\");\nvar _excluded = [\"index\", \"total\", \"style\", \"theme\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar CardCover = function CardCover(_ref) {\n  var index = _ref.index,\n    total = _ref.total,\n    style = _ref.style,\n    theme = _ref.theme,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var roundness = theme.roundness;\n  var coverStyle;\n  if (index === 0) {\n    if (total === 1) {\n      coverStyle = {\n        borderRadius: roundness\n      };\n    } else {\n      coverStyle = {\n        borderTopLeftRadius: roundness,\n        borderTopRightRadius: roundness\n      };\n    }\n  } else if (typeof total === 'number' && index === total - 1) {\n    coverStyle = {\n      borderBottomLeftRadius: roundness\n    };\n  }\n  return React.createElement(_reactNative.View, {\n    style: [styles.container, coverStyle, style]\n  }, React.createElement(_reactNative.Image, _extends({}, rest, {\n    style: [styles.image, coverStyle]\n  })));\n};\nexports.CardCover = CardCover;\nCardCover.displayName = 'Card.Cover';\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    height: 195,\n    backgroundColor: _colors.grey200,\n    overflow: 'hidden'\n  },\n  image: {\n    flex: 1,\n    height: undefined,\n    width: undefined,\n    padding: 16,\n    justifyContent: 'flex-end'\n  }\n});\nvar _default = (0, _theming.withTheme)(CardCover);\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AA2CA,IAAMA,SAAS,GAAG,SAAZA,SAAS,CAAGC,MAAoD;EAAA,IAAjDC,KAAF,GAAmDD,KAAjDC,KAAF;IAASC,KAAT,GAAmDF,KAA1CE,KAAT;IAAgBC,KAAhB,GAAmDH,KAAnCG,KAAhB;IAAuBC,KAAvB,GAAmDJ,KAA5BI,KAAvB;IAAiCC,8CAAkBL;EACpE,IAAQM,YAAcF,KAAtB,CAAQE;EAER,IAAIC,UAAJ;EAEA,IAAIN,KAAK,KAAK,CAAd,EAAiB;IACf,IAAIC,KAAK,KAAK,CAAd,EAAiB;MACfK,UAAU,GAAG;QACXC,YAAY,EAAEF;MADH,CAAb;IAGD,CAJD,MAIO;MACLC,UAAU,GAAG;QACXE,mBAAmB,EAAEH,SADV;QAEXI,oBAAoB,EAAEJ;MAFX,CAAb;IAID;EACF,CAXD,MAWO,IAAI,OAAOJ,KAAP,KAAiB,QAAjB,IAA6BD,KAAK,KAAKC,KAAK,GAAG,CAAnD,EAAsD;IAC3DK,UAAU,GAAG;MACXI,sBAAsB,EAAEL;IADb,CAAb;EAGD;EAED,OACEM,oBAACC,iBAAD;IAAMV,KAAK,EAAE,CAACW,MAAM,CAACC,SAAR,EAAmBR,UAAnB,EAA+BJ,KAA/B;EAAb,GACES,oBAACI,kBAAD,eAAWX,IAAX;IAAiBF,KAAK,EAAE,CAACW,MAAM,CAACG,KAAR,EAAeV,UAAf;EAAxB,GADF,CADF;AAKD,CA3BD;AAAA;AA6BAR,SAAS,CAACmB,WAAV,GAAwB,YAAxB;AACA,IAAMJ,MAAM,GAAGK,uBAAU,CAACC,MAAX,CAAkB;EAC/BL,SAAS,EAAE;IACTM,MAAM,EAAE,GADC;IAETC,eAAe,EAAEC,eAFR;IAGTC,QAAQ,EAAE;EAHD,CADoB;EAM/BP,KAAK,EAAE;IACLQ,IAAI,EAAE,CADD;IAELJ,MAAM,EAAEK,SAFH;IAGLC,KAAK,EAAED,SAHF;IAILE,OAAO,EAAE,EAJJ;IAKLC,cAAc,EAAE;EALX;AANwB,CAAlB,CAAf;AAAA,eAeeC,sBAAS,EAAC/B,SAAD,CAAxB;AAAA","names":["CardCover","_ref","index","total","style","theme","rest","roundness","coverStyle","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","React","View","styles","container","Image","image","displayName","StyleSheet","create","height","backgroundColor","grey200","overflow","flex","undefined","width","padding","justifyContent","withTheme"],"sources":["CardCover.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, ViewStyle, Image, StyleProp } from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { grey200 } from '../../styles/colors';\n\nexport type Props = React.ComponentPropsWithRef<typeof Image> & {\n  /**\n   * @internal\n   */\n  index?: number;\n  /**\n   * @internal\n   */\n  total?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to show a cover image inside a Card.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/card-cover.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Card } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends Image props https://reactnative.dev/docs/image#props\n */\nconst CardCover = ({ index, total, style, theme, ...rest }: Props) => {\n  const { roundness } = theme;\n\n  let coverStyle;\n\n  if (index === 0) {\n    if (total === 1) {\n      coverStyle = {\n        borderRadius: roundness,\n      };\n    } else {\n      coverStyle = {\n        borderTopLeftRadius: roundness,\n        borderTopRightRadius: roundness,\n      };\n    }\n  } else if (typeof total === 'number' && index === total - 1) {\n    coverStyle = {\n      borderBottomLeftRadius: roundness,\n    };\n  }\n\n  return (\n    <View style={[styles.container, coverStyle, style]}>\n      <Image {...rest} style={[styles.image, coverStyle]} />\n    </View>\n  );\n};\n\nCardCover.displayName = 'Card.Cover';\nconst styles = StyleSheet.create({\n  container: {\n    height: 195,\n    backgroundColor: grey200,\n    overflow: 'hidden',\n  },\n  image: {\n    flex: 1,\n    height: undefined,\n    width: undefined,\n    padding: 16,\n    justifyContent: 'flex-end',\n  },\n});\n\nexport default withTheme(CardCover);\n\n// @component-docs ignore-next-line\nexport { CardCover };\n"]},"metadata":{},"sourceType":"script"}