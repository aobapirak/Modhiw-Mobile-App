{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _color = _interopRequireDefault(require(\"color\"));\nvar _reactNative = require(\"react-native\");\nvar _Surface = _interopRequireDefault(require(\"../../Surface\"));\nvar _Icon = _interopRequireDefault(require(\"../../Icon\"));\nvar _TouchableRipple = _interopRequireDefault(require(\"../../TouchableRipple/TouchableRipple\"));\nvar _theming = require(\"../../../core/theming\");\nvar _colors = require(\"../../../styles/colors\");\nvar _AnimatedText = _interopRequireDefault(require(\"../../Typography/AnimatedText\"));\nvar _utils = require(\"./utils\");\nvar _excluded = [\"icon\", \"label\", \"accessibilityLabel\", \"accessibilityState\", \"color\", \"disabled\", \"onPress\", \"onLongPress\", \"theme\", \"style\", \"visible\", \"uppercase\", \"testID\", \"animateFrom\", \"extended\", \"iconMode\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar SIZE = 56;\nvar BORDER_RADIUS = SIZE / 2;\nvar SCALE = 0.9;\nvar AnimatedFAB = function AnimatedFAB(_ref) {\n  var icon = _ref.icon,\n    label = _ref.label,\n    _ref$accessibilityLab = _ref.accessibilityLabel,\n    accessibilityLabel = _ref$accessibilityLab === void 0 ? label : _ref$accessibilityLab,\n    accessibilityState = _ref.accessibilityState,\n    customColor = _ref.color,\n    disabled = _ref.disabled,\n    onPress = _ref.onPress,\n    onLongPress = _ref.onLongPress,\n    theme = _ref.theme,\n    style = _ref.style,\n    _ref$visible = _ref.visible,\n    visible = _ref$visible === void 0 ? true : _ref$visible,\n    _ref$uppercase = _ref.uppercase,\n    uppercase = _ref$uppercase === void 0 ? true : _ref$uppercase,\n    testID = _ref.testID,\n    _ref$animateFrom = _ref.animateFrom,\n    animateFrom = _ref$animateFrom === void 0 ? 'right' : _ref$animateFrom,\n    _ref$extended = _ref.extended,\n    extended = _ref$extended === void 0 ? false : _ref$extended,\n    _ref$iconMode = _ref.iconMode,\n    iconMode = _ref$iconMode === void 0 ? 'dynamic' : _ref$iconMode,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var isIOS = _reactNative.Platform.OS === 'ios';\n  var isAnimatedFromRight = animateFrom === 'right';\n  var isIconStatic = iconMode === 'static';\n  var isRTL = _reactNative.I18nManager.isRTL;\n  var _React$useRef = React.useRef(new _reactNative.Animated.Value(visible ? 1 : 0)),\n    visibility = _React$useRef.current;\n  var _React$useRef2 = React.useRef(new _reactNative.Animated.Value(0)),\n    animFAB = _React$useRef2.current;\n  var scale = theme.animation.scale;\n  var _React$useState = React.useState(0),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n    textWidth = _React$useState2[0],\n    setTextWidth = _React$useState2[1];\n  var _React$useState3 = React.useState(0),\n    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),\n    textHeight = _React$useState4[0],\n    setTextHeight = _React$useState4[1];\n  React.useEffect(function () {\n    if (visible) {\n      _reactNative.Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      _reactNative.Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n  var disabledColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();\n  var _ref3 = _reactNative.StyleSheet.flatten(style) || {},\n    _ref3$backgroundColor = _ref3.backgroundColor,\n    backgroundColor = _ref3$backgroundColor === void 0 ? disabled ? disabledColor : theme.colors.accent : _ref3$backgroundColor;\n  var foregroundColor;\n  if (typeof customColor !== 'undefined') {\n    foregroundColor = customColor;\n  } else if (disabled) {\n    foregroundColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.32).rgb().string();\n  } else {\n    foregroundColor = !(0, _color.default)(backgroundColor).isLight() ? _colors.white : 'rgba(0, 0, 0, .54)';\n  }\n  var rippleColor = (0, _color.default)(foregroundColor).alpha(0.32).rgb().string();\n  var extendedWidth = textWidth + 1.5 * SIZE;\n  var distance = isAnimatedFromRight ? -textWidth - BORDER_RADIUS : textWidth + BORDER_RADIUS;\n  React.useEffect(function () {\n    _reactNative.Animated.timing(animFAB, {\n      toValue: !extended ? 0 : distance,\n      duration: 150 * scale,\n      useNativeDriver: true,\n      easing: _reactNative.Easing.linear\n    }).start();\n  }, [animFAB, scale, distance, extended]);\n  var onTextLayout = function onTextLayout(_ref2) {\n    var nativeEvent = _ref2.nativeEvent;\n    var currentWidth = Math.ceil(nativeEvent.lines[0].width);\n    var currentHeight = Math.ceil(nativeEvent.lines[0].height);\n    if (currentWidth !== textWidth || currentHeight !== textHeight) {\n      setTextHeight(currentHeight);\n      if (isIOS) {\n        return setTextWidth(currentWidth - 12);\n      }\n      setTextWidth(currentWidth);\n    }\n  };\n  var propForDirection = function propForDirection(right) {\n    if (isAnimatedFromRight) {\n      return right;\n    }\n    return right.reverse();\n  };\n  var combinedStyles = (0, _utils.getCombinedStyles)({\n    isAnimatedFromRight: isAnimatedFromRight,\n    isIconStatic: isIconStatic,\n    distance: distance,\n    animFAB: animFAB\n  });\n  return React.createElement(_Surface.default, _extends({}, rest, {\n    style: [{\n      opacity: visibility,\n      transform: [{\n        scale: visibility\n      }],\n      elevation: isIOS ? 6 : 0\n    }, styles.container, disabled && styles.disabled, style]\n  }), React.createElement(_reactNative.Animated.View, {\n    style: [{\n      transform: [{\n        scaleY: animFAB.interpolate({\n          inputRange: propForDirection([distance, 0]),\n          outputRange: propForDirection([SCALE, 1])\n        })\n      }]\n    }, styles.standard]\n  }, React.createElement(_reactNative.View, {\n    style: [_reactNative.StyleSheet.absoluteFill, styles.shadowWrapper]\n  }, React.createElement(_reactNative.Animated.View, {\n    pointerEvents: \"none\",\n    style: [_reactNative.StyleSheet.absoluteFill, styles.shadow, {\n      width: extendedWidth,\n      opacity: animFAB.interpolate({\n        inputRange: propForDirection([distance, 0.9 * distance, 0]),\n        outputRange: propForDirection([1, 0.15, 0])\n      })\n    }]\n  }), React.createElement(_reactNative.Animated.View, {\n    pointerEvents: \"none\",\n    style: [_reactNative.StyleSheet.absoluteFill, styles.shadow, {\n      opacity: animFAB.interpolate({\n        inputRange: propForDirection([distance, 0.9 * distance, 0]),\n        outputRange: propForDirection([0, 0.85, 1])\n      }),\n      width: SIZE,\n      borderRadius: animFAB.interpolate({\n        inputRange: propForDirection([distance, 0]),\n        outputRange: propForDirection([SIZE / (extendedWidth / SIZE), BORDER_RADIUS])\n      })\n    }, combinedStyles.absoluteFill]\n  })), React.createElement(_reactNative.Animated.View, {\n    pointerEvents: \"box-none\",\n    style: [styles.innerWrapper]\n  }, React.createElement(_reactNative.Animated.View, {\n    style: [styles.standard, {\n      width: extendedWidth,\n      backgroundColor: backgroundColor\n    }, combinedStyles.innerWrapper]\n  }, React.createElement(_TouchableRipple.default, {\n    borderless: true,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    rippleColor: rippleColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: Object.assign({}, accessibilityState, {\n      disabled: disabled\n    }),\n    testID: testID,\n    style: styles.touchable\n  }, React.createElement(_reactNative.View, {\n    style: [styles.standard, {\n      width: extendedWidth\n    }]\n  }))))), React.createElement(_reactNative.Animated.View, {\n    style: [styles.iconWrapper, combinedStyles.iconWrapper],\n    pointerEvents: \"none\"\n  }, React.createElement(_Icon.default, {\n    source: icon,\n    size: 24,\n    color: foregroundColor\n  })), React.createElement(_reactNative.View, {\n    pointerEvents: \"none\"\n  }, React.createElement(_AnimatedText.default, {\n    numberOfLines: 1,\n    onTextLayout: isIOS ? onTextLayout : undefined,\n    ellipsizeMode: 'tail',\n    style: [(0, _defineProperty2.default)({}, isAnimatedFromRight || isRTL ? 'right' : 'left', isIconStatic ? isIOS ? SIZE - 10 : SIZE - 12 : BORDER_RADIUS), {\n      minWidth: textWidth,\n      top: -BORDER_RADIUS - textHeight / 2,\n      opacity: animFAB.interpolate({\n        inputRange: propForDirection([distance, 0.7 * distance, 0]),\n        outputRange: propForDirection([1, 0, 0])\n      }),\n      transform: [{\n        translateX: animFAB.interpolate({\n          inputRange: propForDirection([distance, 0]),\n          outputRange: propForDirection([0, SIZE])\n        })\n      }]\n    }, styles.label, uppercase && styles.uppercaseLabel, Object.assign({\n      color: foregroundColor\n    }, theme.fonts.medium)]\n  }, label)), !isIOS &&\n  React.createElement(_reactNative.ScrollView, {\n    style: styles.textPlaceholderContainer\n  }, React.createElement(_reactNative.Text, {\n    onTextLayout: onTextLayout\n  }, label)));\n};\nvar styles = _reactNative.StyleSheet.create({\n  standard: {\n    height: SIZE,\n    borderRadius: BORDER_RADIUS\n  },\n  disabled: {\n    elevation: 0\n  },\n  container: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    borderRadius: BORDER_RADIUS\n  },\n  innerWrapper: {\n    flexDirection: 'row',\n    overflow: 'hidden',\n    borderRadius: BORDER_RADIUS\n  },\n  shadowWrapper: {\n    elevation: 0\n  },\n  shadow: {\n    elevation: 6,\n    borderRadius: BORDER_RADIUS\n  },\n  touchable: {\n    borderRadius: BORDER_RADIUS\n  },\n  iconWrapper: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'absolute',\n    height: SIZE,\n    width: SIZE\n  },\n  label: {\n    position: 'absolute'\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  },\n  textPlaceholderContainer: {\n    height: 0,\n    position: 'absolute'\n  }\n});\nvar _default = (0, _theming.withTheme)(AnimatedFAB);\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["SIZE","BORDER_RADIUS","SCALE","AnimatedFAB","_ref","icon","label","accessibilityLabel","accessibilityState","customColor","color","disabled","onPress","onLongPress","theme","style","visible","uppercase","testID","animateFrom","extended","iconMode","rest","isIOS","Platform","OS","isAnimatedFromRight","isIconStatic","isRTL","I18nManager","React","useRef","Animated","Value","visibility","current","animFAB","scale","animation","useState","textWidth","setTextWidth","textHeight","setTextHeight","useEffect","timing","toValue","duration","useNativeDriver","start","disabledColor","dark","white","black","alpha","rgb","string","StyleSheet","flatten","backgroundColor","colors","accent","foregroundColor","isLight","rippleColor","extendedWidth","distance","easing","Easing","linear","onTextLayout","_ref2","nativeEvent","currentWidth","Math","ceil","lines","width","currentHeight","height","propForDirection","right","reverse","combinedStyles","getCombinedStyles","Surface","opacity","transform","elevation","styles","container","View","scaleY","interpolate","inputRange","outputRange","standard","absoluteFill","shadowWrapper","pointerEvents","shadow","borderRadius","innerWrapper","TouchableRipple","borderless","accessibilityTraits","accessibilityComponentType","accessibilityRole","touchable","iconWrapper","Icon","source","size","AnimatedText","numberOfLines","undefined","ellipsizeMode","minWidth","top","translateX","uppercaseLabel","fonts","medium","ScrollView","textPlaceholderContainer","Text","create","position","flexDirection","overflow","alignItems","justifyContent","textTransform","withTheme"],"sources":["AnimatedFAB.tsx"],"sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  Easing,\n  ScrollView,\n  Text,\n  Platform,\n  I18nManager,\n} from 'react-native';\nimport Surface from '../../Surface';\nimport Icon from '../../Icon';\nimport TouchableRipple from '../../TouchableRipple/TouchableRipple';\nimport type { $RemoveChildren } from '../../../types';\nimport type { IconSource } from '../../Icon';\nimport { withTheme } from '../../../core/theming';\nimport type {\n  AccessibilityState,\n  NativeSyntheticEvent,\n  TextLayoutEventData,\n} from 'react-native';\nimport { white, black } from '../../../styles/colors';\nimport AnimatedText from '../../Typography/AnimatedText';\nimport { getCombinedStyles } from './utils';\n\nexport type AnimatedFABIconMode = 'static' | 'dynamic';\nexport type AnimatedFABAnimateFrom = 'left' | 'right';\n\nexport type Props = $RemoveChildren<typeof Surface> & {\n  /**\n   * Icon to display for the `FAB`.\n   */\n  icon: IconSource;\n  /**\n   * Label for extended `FAB`.\n   */\n  label: string;\n  /**\n   * Make the label text uppercased.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\n   * Uses `label` by default if specified.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility state for the FAB. This is read by the screen reader when the user taps the FAB.\n   */\n  accessibilityState?: AccessibilityState;\n  /**\n   * Custom color for the icon and label of the `FAB`.\n   */\n  color?: string;\n  /**\n   * Whether `FAB` is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether `FAB` is currently visible.\n   */\n  visible?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Whether icon should be translated to the end of extended `FAB` or be static and stay in the same place. The default value is `dynamic`.\n   */\n  iconMode?: AnimatedFABIconMode;\n  /**\n   * Indicates from which direction animation should be performed. The default value is `right`.\n   */\n  animateFrom?: AnimatedFABAnimateFrom;\n  /**\n   * Whether `FAB` should start animation to extend.\n   */\n  extended: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  testID?: string;\n};\n\nconst SIZE = 56;\nconst BORDER_RADIUS = SIZE / 2;\nconst SCALE = 0.9;\n\nconst AnimatedFAB = ({\n  icon,\n  label,\n  accessibilityLabel = label,\n  accessibilityState,\n  color: customColor,\n  disabled,\n  onPress,\n  onLongPress,\n  theme,\n  style,\n  visible = true,\n  uppercase = true,\n  testID,\n  animateFrom = 'right',\n  extended = false,\n  iconMode = 'dynamic',\n  ...rest\n}: Props) => {\n  const isIOS = Platform.OS === 'ios';\n  const isAnimatedFromRight = animateFrom === 'right';\n  const isIconStatic = iconMode === 'static';\n  const { isRTL } = I18nManager;\n  const { current: visibility } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const { current: animFAB } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n  const { scale } = theme.animation;\n\n  const [textWidth, setTextWidth] = React.useState<number>(0);\n  const [textHeight, setTextHeight] = React.useState<number>(0);\n\n  React.useEffect(() => {\n    if (visible) {\n      Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n\n  const disabledColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  const { backgroundColor = disabled ? disabledColor : theme.colors.accent } =\n    StyleSheet.flatten<ViewStyle>(style) || {};\n\n  let foregroundColor: string;\n\n  if (typeof customColor !== 'undefined') {\n    foregroundColor = customColor;\n  } else if (disabled) {\n    foregroundColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else {\n    foregroundColor = !color(backgroundColor as string).isLight()\n      ? white\n      : 'rgba(0, 0, 0, .54)';\n  }\n\n  const rippleColor = color(foregroundColor).alpha(0.32).rgb().string();\n\n  const extendedWidth = textWidth + 1.5 * SIZE;\n\n  const distance = isAnimatedFromRight\n    ? -textWidth - BORDER_RADIUS\n    : textWidth + BORDER_RADIUS;\n\n  React.useEffect(() => {\n    Animated.timing(animFAB, {\n      toValue: !extended ? 0 : distance,\n      duration: 150 * scale,\n      useNativeDriver: true,\n      easing: Easing.linear,\n    }).start();\n  }, [animFAB, scale, distance, extended]);\n\n  const onTextLayout = ({\n    nativeEvent,\n  }: NativeSyntheticEvent<TextLayoutEventData>) => {\n    const currentWidth = Math.ceil(nativeEvent.lines[0].width);\n    const currentHeight = Math.ceil(nativeEvent.lines[0].height);\n\n    if (currentWidth !== textWidth || currentHeight !== textHeight) {\n      setTextHeight(currentHeight);\n\n      if (isIOS) {\n        return setTextWidth(currentWidth - 12);\n      }\n\n      setTextWidth(currentWidth);\n    }\n  };\n\n  const propForDirection = <T,>(right: T[]): T[] => {\n    if (isAnimatedFromRight) {\n      return right;\n    }\n\n    return right.reverse();\n  };\n\n  const combinedStyles = getCombinedStyles({\n    isAnimatedFromRight,\n    isIconStatic,\n    distance,\n    animFAB,\n  });\n\n  return (\n    <Surface\n      {...rest}\n      style={\n        [\n          {\n            opacity: visibility,\n            transform: [\n              {\n                scale: visibility,\n              },\n            ],\n            elevation: isIOS ? 6 : 0,\n          },\n          styles.container,\n          disabled && styles.disabled,\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n    >\n      <Animated.View\n        style={[\n          {\n            transform: [\n              {\n                scaleY: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0]),\n                  outputRange: propForDirection([SCALE, 1]),\n                }),\n              },\n            ],\n          },\n          styles.standard,\n        ]}\n      >\n        <View style={[StyleSheet.absoluteFill, styles.shadowWrapper]}>\n          <Animated.View\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              styles.shadow,\n              {\n                width: extendedWidth,\n                opacity: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0.9 * distance, 0]),\n                  outputRange: propForDirection([1, 0.15, 0]),\n                }),\n              },\n            ]}\n          />\n          <Animated.View\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              styles.shadow,\n              {\n                opacity: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0.9 * distance, 0]),\n                  outputRange: propForDirection([0, 0.85, 1]),\n                }),\n                width: SIZE,\n                borderRadius: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0]),\n                  outputRange: propForDirection([\n                    SIZE / (extendedWidth / SIZE),\n                    BORDER_RADIUS,\n                  ]),\n                }),\n              },\n              combinedStyles.absoluteFill,\n            ]}\n          />\n        </View>\n        <Animated.View pointerEvents=\"box-none\" style={[styles.innerWrapper]}>\n          <Animated.View\n            style={[\n              styles.standard,\n              {\n                width: extendedWidth,\n                backgroundColor,\n              },\n              combinedStyles.innerWrapper,\n            ]}\n          >\n            <TouchableRipple\n              borderless\n              onPress={onPress}\n              onLongPress={onLongPress}\n              rippleColor={rippleColor}\n              disabled={disabled}\n              accessibilityLabel={accessibilityLabel}\n              // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n              accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n              accessibilityComponentType=\"button\"\n              accessibilityRole=\"button\"\n              accessibilityState={{ ...accessibilityState, disabled }}\n              testID={testID}\n              style={styles.touchable}\n            >\n              <View\n                style={[\n                  styles.standard,\n                  {\n                    width: extendedWidth,\n                  },\n                ]}\n              />\n            </TouchableRipple>\n          </Animated.View>\n        </Animated.View>\n      </Animated.View>\n\n      <Animated.View\n        style={[styles.iconWrapper, combinedStyles.iconWrapper]}\n        pointerEvents=\"none\"\n      >\n        <Icon source={icon} size={24} color={foregroundColor} />\n      </Animated.View>\n\n      <View pointerEvents=\"none\">\n        <AnimatedText\n          numberOfLines={1}\n          onTextLayout={isIOS ? onTextLayout : undefined}\n          ellipsizeMode={'tail'}\n          style={[\n            {\n              [isAnimatedFromRight || isRTL ? 'right' : 'left']: isIconStatic\n                ? isIOS\n                  ? SIZE - 10\n                  : SIZE - 12\n                : BORDER_RADIUS,\n            },\n            {\n              minWidth: textWidth,\n              top: -BORDER_RADIUS - textHeight / 2,\n              opacity: animFAB.interpolate({\n                inputRange: propForDirection([distance, 0.7 * distance, 0]),\n                outputRange: propForDirection([1, 0, 0]),\n              }),\n              transform: [\n                {\n                  translateX: animFAB.interpolate({\n                    inputRange: propForDirection([distance, 0]),\n                    outputRange: propForDirection([0, SIZE]),\n                  }),\n                },\n              ],\n            },\n            styles.label,\n            uppercase && styles.uppercaseLabel,\n            {\n              color: foregroundColor,\n              ...theme.fonts.medium,\n            },\n          ]}\n        >\n          {label}\n        </AnimatedText>\n      </View>\n\n      {!isIOS && (\n        // Method `onTextLayout` on Android returns sizes of text visible on the screen,\n        // however during render the text in `FAB` isn't fully visible. In order to get\n        // proper text measurements there is a need to additionaly render that text, but\n        // wrapped in absolutely positioned `ScrollView` which height is 0.\n        <ScrollView style={styles.textPlaceholderContainer}>\n          <Text onTextLayout={onTextLayout}>{label}</Text>\n        </ScrollView>\n      )}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  standard: {\n    height: SIZE,\n    borderRadius: BORDER_RADIUS,\n  },\n  disabled: {\n    elevation: 0,\n  },\n  container: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    borderRadius: BORDER_RADIUS,\n  },\n  innerWrapper: {\n    flexDirection: 'row',\n    overflow: 'hidden',\n    borderRadius: BORDER_RADIUS,\n  },\n  shadowWrapper: {\n    elevation: 0,\n  },\n  shadow: {\n    elevation: 6,\n    borderRadius: BORDER_RADIUS,\n  },\n  touchable: {\n    borderRadius: BORDER_RADIUS,\n  },\n  iconWrapper: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'absolute',\n    height: SIZE,\n    width: SIZE,\n  },\n  label: {\n    position: 'absolute',\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n  textPlaceholderContainer: {\n    height: 0,\n    position: 'absolute',\n  },\n});\n\nexport default withTheme(AnimatedFAB);\n"]},"metadata":{},"sourceType":"script"}