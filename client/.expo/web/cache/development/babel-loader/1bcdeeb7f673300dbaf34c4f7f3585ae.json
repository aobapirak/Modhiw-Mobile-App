{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _InteractionManager = _interopRequireDefault(require(\"../../../exports/InteractionManager\"));\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Batchinator = function () {\n  function Batchinator(callback, delayMS) {\n    _classCallCheck(this, Batchinator);\n    this._delay = delayMS;\n    this._callback = callback;\n  }\n\n  Batchinator.prototype.dispose = function dispose() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      abort: false\n    };\n    if (this._taskHandle) {\n      this._taskHandle.cancel();\n      if (!options.abort) {\n        this._callback();\n      }\n      this._taskHandle = null;\n    }\n  };\n  Batchinator.prototype.schedule = function schedule() {\n    var _this = this;\n    if (this._taskHandle) {\n      return;\n    }\n    var timeoutHandle = setTimeout(function () {\n      _this._taskHandle = _InteractionManager.default.runAfterInteractions(function () {\n        _this._taskHandle = null;\n        _this._callback();\n      });\n    }, this._delay);\n    this._taskHandle = {\n      cancel: function cancel() {\n        return clearTimeout(timeoutHandle);\n      }\n    };\n  };\n  return Batchinator;\n}();\nvar _default = Batchinator;\nexports.default = _default;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","Batchinator","callback","delayMS","_delay","_callback","prototype","dispose","options","arguments","length","undefined","abort","_taskHandle","cancel","schedule","_this","timeoutHandle","setTimeout","InteractionManager","runAfterInteractions","clearTimeout"],"sources":["C:/Users/prariya/Desktop/Modhiw/client/node_modules/react-native-phone-number-input/node_modules/react-native-web/dist/vendor/react-native/Batchinator/index.js"],"sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport InteractionManager from '../../../exports/InteractionManager';\n\n/**\n * A simple class for batching up invocations of a low-pri callback. A timeout is set to run the\n * callback once after a delay, no matter how many times it's scheduled. Once the delay is reached,\n * InteractionManager.runAfterInteractions is used to invoke the callback after any hi-pri\n * interactions are done running.\n *\n * Make sure to cleanup with dispose().  Example:\n *\n *   class Widget extends React.Component {\n *     _batchedSave: new Batchinator(() => this._saveState, 1000);\n *     _saveSate() {\n *       // save this.state to disk\n *     }\n *     componentDidUpdate() {\n *       this._batchedSave.schedule();\n *     }\n *     componentWillUnmount() {\n *       this._batchedSave.dispose();\n *     }\n *     ...\n *   }\n */\n\nvar Batchinator = function () {\n  function Batchinator(callback, delayMS) {\n    _classCallCheck(this, Batchinator);\n\n    this._delay = delayMS;\n    this._callback = callback;\n  }\n  /*\n   * Cleanup any pending tasks.\n   *\n   * By default, if there is a pending task the callback is run immediately. Set the option abort to\n   * true to not call the callback if it was pending.\n   */\n\n\n  Batchinator.prototype.dispose = function dispose() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { abort: false };\n\n    if (this._taskHandle) {\n      this._taskHandle.cancel();\n      if (!options.abort) {\n        this._callback();\n      }\n      this._taskHandle = null;\n    }\n  };\n\n  Batchinator.prototype.schedule = function schedule() {\n    var _this = this;\n\n    if (this._taskHandle) {\n      return;\n    }\n    var timeoutHandle = setTimeout(function () {\n      _this._taskHandle = InteractionManager.runAfterInteractions(function () {\n        // Note that we clear the handle before invoking the callback so that if the callback calls\n        // schedule again, it will actually schedule another task.\n        _this._taskHandle = null;\n        _this._callback();\n      });\n    }, this._delay);\n    this._taskHandle = { cancel: function cancel() {\n        return clearTimeout(timeoutHandle);\n      } };\n  };\n\n  return Batchinator;\n}();\n\nexport default Batchinator;"],"mappings":";;;;;AAWA;AAXA,SAASA,eAAe,CAACC,QAAQ,EAAEC,WAAW,EAAE;EAAE,IAAI,EAAED,QAAQ,YAAYC,WAAW,CAAC,EAAE;IAAE,MAAM,IAAIC,SAAS,CAAC,mCAAmC,CAAC;EAAE;AAAE;;AAoCxJ,IAAIC,WAAW,GAAG,YAAY;EAC5B,SAASA,WAAW,CAACC,QAAQ,EAAEC,OAAO,EAAE;IACtCN,eAAe,CAAC,IAAI,EAAEI,WAAW,CAAC;IAElC,IAAI,CAACG,MAAM,GAAGD,OAAO;IACrB,IAAI,CAACE,SAAS,GAAGH,QAAQ;EAC3B;;EASAD,WAAW,CAACK,SAAS,CAACC,OAAO,GAAG,SAASA,OAAO,GAAG;IACjD,IAAIC,OAAO,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG;MAAEG,KAAK,EAAE;IAAM,CAAC;IAElG,IAAI,IAAI,CAACC,WAAW,EAAE;MACpB,IAAI,CAACA,WAAW,CAACC,MAAM,EAAE;MACzB,IAAI,CAACN,OAAO,CAACI,KAAK,EAAE;QAClB,IAAI,CAACP,SAAS,EAAE;MAClB;MACA,IAAI,CAACQ,WAAW,GAAG,IAAI;IACzB;EACF,CAAC;EAEDZ,WAAW,CAACK,SAAS,CAACS,QAAQ,GAAG,SAASA,QAAQ,GAAG;IACnD,IAAIC,KAAK,GAAG,IAAI;IAEhB,IAAI,IAAI,CAACH,WAAW,EAAE;MACpB;IACF;IACA,IAAII,aAAa,GAAGC,UAAU,CAAC,YAAY;MACzCF,KAAK,CAACH,WAAW,GAAGM,2BAAkB,CAACC,oBAAoB,CAAC,YAAY;QAGtEJ,KAAK,CAACH,WAAW,GAAG,IAAI;QACxBG,KAAK,CAACX,SAAS,EAAE;MACnB,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAACD,MAAM,CAAC;IACf,IAAI,CAACS,WAAW,GAAG;MAAEC,MAAM,EAAE,SAASA,MAAM,GAAG;QAC3C,OAAOO,YAAY,CAACJ,aAAa,CAAC;MACpC;IAAE,CAAC;EACP,CAAC;EAED,OAAOhB,WAAW;AACpB,CAAC,EAAE;AAAC,eAEWA,WAAW;AAAA"},"metadata":{},"sourceType":"script"}