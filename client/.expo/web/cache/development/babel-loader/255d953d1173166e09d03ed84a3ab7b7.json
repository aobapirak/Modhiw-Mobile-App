{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.RadioButton = void 0;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _RadioButtonAndroid = _interopRequireDefault(require(\"./RadioButtonAndroid\"));\nvar _RadioButtonIOS = _interopRequireDefault(require(\"./RadioButtonIOS\"));\nvar _theming = require(\"../../core/theming\");\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar RadioButton = function RadioButton(props) {\n  var Button = _reactNative.Platform.select({\n    default: _RadioButtonAndroid.default,\n    ios: _RadioButtonIOS.default\n  });\n  return React.createElement(Button, props);\n};\nvar _default = (0, _theming.withTheme)(RadioButton);\nexports.default = _default;\n\nvar RadioButtonWithTheme = (0, _theming.withTheme)(RadioButton);\nexports.RadioButton = RadioButtonWithTheme;","map":{"version":3,"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAuFA,IAAMA,WAAW,GAAIC,SAAfD,WAAW,CAAIC,KAAD,EAAkB;EACpC,IAAMC,MAAM,GAAGC,qBAAQ,CAACC,MAAT,CAAgB;IAC7BC,OAAO,EAAEC,2BADoB;IAE7BC,GAAG,EAAEC;EAFwB,CAAhB,CAAf;EAKA,OAAOC,oBAACP,MAAD,EAAYD,KAAZ,CAAP;AACD,CAPD;AAAA,eASeS,sBAAS,EAACV,WAAD,CAAxB;AAAA;;AAGA,IAAMW,oBAAoB,GAAGD,sBAAS,EAACV,WAAD,CAAtC","names":["RadioButton","props","Button","Platform","select","default","RadioButtonAndroid","ios","RadioButtonIOS","React","withTheme","RadioButtonWithTheme"],"sources":["RadioButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform } from 'react-native';\nimport RadioButtonAndroid from './RadioButtonAndroid';\nimport RadioButtonIOS from './RadioButtonIOS';\nimport { withTheme } from '../../core/theming';\n\nexport type Props = {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [checked, setChecked] = React.useState('first');\n *\n *   return (\n *     <View>\n *       <RadioButton\n *         value=\"first\"\n *         status={ checked === 'first' ? 'checked' : 'unchecked' }\n *         onPress={() => setChecked('first')}\n *       />\n *       <RadioButton\n *         value=\"second\"\n *         status={ checked === 'second' ? 'checked' : 'unchecked' }\n *         onPress={() => setChecked('second')}\n *       />\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst RadioButton = (props: Props) => {\n  const Button = Platform.select({\n    default: RadioButtonAndroid,\n    ios: RadioButtonIOS,\n  });\n\n  return <Button {...props} />;\n};\n\nexport default withTheme(RadioButton);\n\n// @component-docs ignore-next-line\nconst RadioButtonWithTheme = withTheme(RadioButton);\n// @component-docs ignore-next-line\nexport { RadioButtonWithTheme as RadioButton };\n"]},"metadata":{},"sourceType":"script"}