{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _color = _interopRequireDefault(require(\"color\"));\nvar _ActivityIndicator = _interopRequireDefault(require(\"./ActivityIndicator\"));\nvar _Icon = _interopRequireDefault(require(\"./Icon\"));\nvar _Surface = _interopRequireDefault(require(\"./Surface\"));\nvar _Text = _interopRequireDefault(require(\"./Typography/Text\"));\nvar _TouchableRipple = _interopRequireDefault(require(\"./TouchableRipple/TouchableRipple\"));\nvar _colors = require(\"../styles/colors\");\nvar _theming = require(\"../core/theming\");\nvar _excluded = [\"disabled\", \"compact\", \"mode\", \"dark\", \"loading\", \"icon\", \"color\", \"children\", \"uppercase\", \"accessibilityLabel\", \"accessibilityHint\", \"onPress\", \"onLongPress\", \"style\", \"theme\", \"contentStyle\", \"labelStyle\", \"testID\", \"accessible\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar Button = function Button(_ref) {\n  var _borderRadius, _StyleSheet$flatten;\n  var disabled = _ref.disabled,\n    compact = _ref.compact,\n    _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? 'text' : _ref$mode,\n    dark = _ref.dark,\n    loading = _ref.loading,\n    icon = _ref.icon,\n    buttonColor = _ref.color,\n    children = _ref.children,\n    _ref$uppercase = _ref.uppercase,\n    uppercase = _ref$uppercase === void 0 ? true : _ref$uppercase,\n    accessibilityLabel = _ref.accessibilityLabel,\n    accessibilityHint = _ref.accessibilityHint,\n    onPress = _ref.onPress,\n    onLongPress = _ref.onLongPress,\n    style = _ref.style,\n    theme = _ref.theme,\n    contentStyle = _ref.contentStyle,\n    labelStyle = _ref.labelStyle,\n    testID = _ref.testID,\n    accessible = _ref.accessible,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var _React$useRef = React.useRef(new _reactNative.Animated.Value(disabled || mode !== 'contained' ? 0 : 2)),\n    elevation = _React$useRef.current;\n  React.useEffect(function () {\n    elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);\n  }, [mode, elevation, disabled]);\n  var handlePressIn = function handlePressIn() {\n    if (mode === 'contained') {\n      var scale = theme.animation.scale;\n      _reactNative.Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n  var handlePressOut = function handlePressOut() {\n    if (mode === 'contained') {\n      var scale = theme.animation.scale;\n      _reactNative.Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n  var colors = theme.colors,\n    roundness = theme.roundness;\n  var font = theme.fonts.medium;\n  var backgroundColor, borderColor, textColor, borderWidth;\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n  if (mode === 'outlined') {\n    borderColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string();\n    borderWidth = _reactNative.StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n  if (disabled) {\n    textColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.32).rgb().string();\n  } else if (mode === 'contained') {\n    var isDark;\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark = backgroundColor === 'transparent' ? false : !(0, _color.default)(backgroundColor).isLight();\n    }\n    textColor = isDark ? _colors.white : _colors.black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n  var rippleColor = (0, _color.default)(textColor).alpha(0.32).rgb().string();\n  var buttonStyle = {\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    borderWidth: borderWidth,\n    borderRadius: roundness\n  };\n  var touchableStyle = {\n    borderRadius: style ? (_borderRadius = (_reactNative.StyleSheet.flatten(style) || {}).borderRadius) !== null && _borderRadius !== void 0 ? _borderRadius : roundness : roundness\n  };\n  var _ref2 = _reactNative.StyleSheet.flatten(labelStyle) || {},\n    customLabelColor = _ref2.color,\n    customLabelSize = _ref2.fontSize;\n  var textStyle = Object.assign({\n    color: textColor\n  }, font);\n  var iconStyle = ((_StyleSheet$flatten = _reactNative.StyleSheet.flatten(contentStyle)) === null || _StyleSheet$flatten === void 0 ? void 0 : _StyleSheet$flatten.flexDirection) === 'row-reverse' ? styles.iconReverse : styles.icon;\n  return React.createElement(_Surface.default, _extends({}, rest, {\n    style: [styles.button, compact && styles.compact, {\n      elevation: elevation\n    }, buttonStyle, style]\n  }), React.createElement(_TouchableRipple.default, {\n    borderless: true,\n    delayPressIn: 0,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityHint: accessibilityHint,\n\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled: disabled\n    },\n    accessible: accessible,\n    disabled: disabled,\n    rippleColor: rippleColor,\n    style: touchableStyle,\n    testID: testID\n  }, React.createElement(_reactNative.View, {\n    style: [styles.content, contentStyle]\n  }, icon && loading !== true ? React.createElement(_reactNative.View, {\n    style: iconStyle\n  }, React.createElement(_Icon.default, {\n    source: icon,\n    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : 16,\n    color: typeof customLabelColor === 'string' ? customLabelColor : textColor\n  })) : null, loading ? React.createElement(_ActivityIndicator.default, {\n    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : 16,\n    color: typeof customLabelColor === 'string' ? customLabelColor : textColor,\n    style: iconStyle\n  }) : null, React.createElement(_Text.default, {\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.label, compact && styles.compactLabel, uppercase && styles.uppercaseLabel, textStyle, font, labelStyle]\n  }, children))));\n};\nvar styles = _reactNative.StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid'\n  },\n  compact: {\n    minWidth: 'auto'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16\n  },\n  compactLabel: {\n    marginHorizontal: 8\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  }\n});\nvar _default = (0, _theming.withTheme)(Button);\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AA8GA,IAAMA,MAAM,GAAG,SAATA,MAAM,CAAGC,MAqBF;EAAA;EAAA,IApBXC,QADc,GAqBHD,KApBXC,QADc;IAEdC,OAFc,GAqBHF,KAnBXE,OAFc;IAAA,YAqBHF,KAlBXG,IAAI;IAAJA,IAAI,0BAAG,MAHO;IAIdC,IAJc,GAqBHJ,KAjBXI,IAJc;IAKdC,OALc,GAqBHL,KAhBXK,OALc;IAMdC,IANc,GAqBHN,KAfXM,IANc;IAOPC,WAPO,GAqBHP,KAdXQ,KAAK;IACLC,QARc,GAqBHT,KAbXS,QARc;IAAA,iBAqBHT,KAZXU,SAAS;IAATA,SAAS,+BAAG,IATE;IAUdC,kBAVc,GAqBHX,KAXXW,kBAVc;IAWdC,iBAXc,GAqBHZ,KAVXY,iBAXc;IAYdC,OAZc,GAqBHb,KATXa,OAZc;IAadC,WAbc,GAqBHd,KARXc,WAbc;IAcdC,KAdc,GAqBHf,KAPXe,KAdc;IAedC,KAfc,GAqBHhB,KANXgB,KAfc;IAgBdC,YAhBc,GAqBHjB,KALXiB,YAhBc;IAiBdC,UAjBc,GAqBHlB,KAJXkB,UAjBc;IAkBdC,MAlBc,GAqBHnB,KAHXmB,MAlBc;IAmBdC,UAnBc,GAqBHpB,KAFXoB,UAnBc;IAoBXC,8CACQrB;EACX,oBAA+BsB,KAAK,CAACC,MAAN,CAC7B,IAAIC,qBAAQ,CAACC,KAAb,CAAmBxB,QAAQ,IAAIE,IAAI,KAAK,WAArB,GAAmC,CAAnC,GAAuC,CAA1D,CAD6B,CAA/B;IAAiBuB,0BAATC,OAAO;EAGfL,KAAK,CAACM,SAAN,CAAgB,YAAM;IACpBF,SAAS,CAACG,QAAV,CAAmB5B,QAAQ,IAAIE,IAAI,KAAK,WAArB,GAAmC,CAAnC,GAAuC,CAA1D;EACD,CAFD,EAEG,CAACA,IAAD,EAAOuB,SAAP,EAAkBzB,QAAlB,CAFH;EAIA,IAAM6B,aAAa,GAAG,SAAhBA,aAAa,GAAS;IAC1B,IAAI3B,IAAI,KAAK,WAAb,EAA0B;MACxB,IAAQ4B,QAAUf,KAAK,CAACgB,SAAxB,CAAQD;MACRP,qBAAQ,CAACS,MAAT,CAAgBP,SAAhB,EAA2B;QACzBQ,OAAO,EAAE,CADgB;QAEzBC,QAAQ,EAAE,MAAMJ,KAFS;QAGzBK,eAAe,EAAE;MAHQ,CAA3B,EAIGC,KAJH;IAKD;EACF,CATD;EAWA,IAAMC,cAAc,GAAG,SAAjBA,cAAc,GAAS;IAC3B,IAAInC,IAAI,KAAK,WAAb,EAA0B;MACxB,IAAQ4B,QAAUf,KAAK,CAACgB,SAAxB,CAAQD;MACRP,qBAAQ,CAACS,MAAT,CAAgBP,SAAhB,EAA2B;QACzBQ,OAAO,EAAE,CADgB;QAEzBC,QAAQ,EAAE,MAAMJ,KAFS;QAGzBK,eAAe,EAAE;MAHQ,CAA3B,EAIGC,KAJH;IAKD;EACF,CATD;EAWA,IAAQE,MAAF,GAAwBvB,KAA9B,CAAQuB,MAAF;IAAUC,YAAcxB,KAA9B,CAAgBwB;EAChB,IAAMC,IAAI,GAAGzB,KAAK,CAAC0B,KAAN,CAAYC,MAAzB;EAEA,IAAIC,eAAJ,EACEC,WADF,EAEEC,SAFF,EAGEC,WAHF;EAKA,IAAI5C,IAAI,KAAK,WAAb,EAA0B;IACxB,IAAIF,QAAJ,EAAc;MACZ2C,eAAe,GAAGpC,kBAAK,EAACQ,KAAK,CAACZ,IAAN,GAAa4C,aAAb,GAAqBC,aAAtB,CAAL,CACfC,KADe,CACT,IADS,EAEfC,GAFe,GAGfC,MAHe,EAAlB;IAID,CALD,MAKO,IAAI7C,WAAJ,EAAiB;MACtBqC,eAAe,GAAGrC,WAAlB;IACD,CAFM,MAEA;MACLqC,eAAe,GAAGL,MAAM,CAACc,OAAzB;IACD;EACF,CAXD,MAWO;IACLT,eAAe,GAAG,aAAlB;EACD;EAED,IAAIzC,IAAI,KAAK,UAAb,EAAyB;IACvB0C,WAAW,GAAGrC,kBAAK,EAACQ,KAAK,CAACZ,IAAN,GAAa4C,aAAb,GAAqBC,aAAtB,CAAL,CACXC,KADW,CACL,IADK,EAEXC,GAFW,GAGXC,MAHW,EAAd;IAIAL,WAAW,GAAGO,uBAAU,CAACC,aAAzB;EACD,CAND,MAMO;IACLV,WAAW,GAAG,aAAd;IACAE,WAAW,GAAG,CAAd;EACD;EAED,IAAI9C,QAAJ,EAAc;IACZ6C,SAAS,GAAGtC,kBAAK,EAACQ,KAAK,CAACZ,IAAN,GAAa4C,aAAb,GAAqBC,aAAtB,CAAL,CACTC,KADS,CACH,IADG,EAETC,GAFS,GAGTC,MAHS,EAAZ;EAID,CALD,MAKO,IAAIjD,IAAI,KAAK,WAAb,EAA0B;IAC/B,IAAIqD,MAAJ;IAEA,IAAI,OAAOpD,IAAP,KAAgB,SAApB,EAA+B;MAC7BoD,MAAM,GAAGpD,IAAT;IACD,CAFD,MAEO;MACLoD,MAAM,GACJZ,eAAe,KAAK,aAApB,GACI,KADJ,GAEI,CAACpC,kBAAK,EAACoC,eAAD,CAAL,CAAuBa,OAAvB,EAHP;IAID;IAEDX,SAAS,GAAGU,MAAM,GAAGR,aAAH,GAAWC,aAA7B;EACD,CAbM,MAaA,IAAI1C,WAAJ,EAAiB;IACtBuC,SAAS,GAAGvC,WAAZ;EACD,CAFM,MAEA;IACLuC,SAAS,GAAGP,MAAM,CAACc,OAAnB;EACD;EAED,IAAMK,WAAW,GAAGlD,kBAAK,EAACsC,SAAD,CAAL,CAAiBI,KAAjB,CAAuB,IAAvB,EAA6BC,GAA7B,GAAmCC,MAAnC,EAApB;EACA,IAAMO,WAAW,GAAG;IAClBf,eADkB,EAClBA,eADkB;IAElBC,WAFkB,EAElBA,WAFkB;IAGlBE,WAHkB,EAGlBA,WAHkB;IAIlBa,YAAY,EAAEpB;EAJI,CAApB;EAMA,IAAMqB,cAAc,GAAG;IACrBD,YAAY,EAAE7C,KAAK,oBACf,CAAEuC,uBAAU,CAACQ,OAAX,CAAmB/C,KAAnB,KAA6B,EAA/B,EAAiD6C,YADlC,yDAEfpB,SAFe,GAGfA;EAJiB,CAAvB;EAOA,YACEc,uBAAU,CAACQ,OAAX,CAAmB5C,UAAnB,KAAkC,EADpC;IAAe6C,gBAAT,SAAEvD,KAAK;IAA8BwD,wBAAVC,QAAQ;EAGzC,IAAMC,SAAS;IAAK1D,KAAK,EAAEsC;EAAT,GAAuBL,KAAzC;EACA,IAAM0B,SAAS,GACb,+CAAU,CAACL,OAAX,CAAmB7C,YAAnB,6EAAkCmD,aAAlC,MAAoD,aAApD,GACIC,MAAM,CAACC,WADX,GAEID,MAAM,CAAC/D,IAHb;EAKA,OACEgB,oBAACiD,gBAAD,eACMlD,IADN;IAEEN,KAAK,EAAE,CACLsD,MAAM,CAACG,MADF,EAELtE,OAAO,IAAImE,MAAM,CAACnE,OAFb,EAGL;MAAEwB;IAAF,CAHK,EAILiC,WAJK,EAKL5C,KALK;EAFT,IAUEO,oBAACmD,wBAAD;IACEC,UAAU,MADZ;IAEEC,YAAY,EAAE,CAFhB;IAGE9D,OAAO,EAAEA,OAHX;IAIEC,WAAW,EAAEA,WAJf;IAKE8D,SAAS,EAAE9C,aALb;IAME+C,UAAU,EAAEvC,cANd;IAOE3B,kBAAkB,EAAEA,kBAPtB;IAQEC,iBAAiB,EAAEA,iBARrB;;IAUEkE,mBAAmB,EAAE7E,QAAQ,GAAG,CAAC,QAAD,EAAW,UAAX,CAAH,GAA4B,QAV3D;IAWE8E,0BAA0B,EAAC,QAX7B;IAYEC,iBAAiB,EAAC,QAZpB;IAaEC,kBAAkB,EAAE;MAAEhF;IAAF,CAbtB;IAcEmB,UAAU,EAAEA,UAdd;IAeEnB,QAAQ,EAAEA,QAfZ;IAgBEyD,WAAW,EAAEA,WAhBf;IAiBE3C,KAAK,EAAE8C,cAjBT;IAkBE1C,MAAM,EAAEA;EAlBV,GAoBEG,oBAAC4D,iBAAD;IAAMnE,KAAK,EAAE,CAACsD,MAAM,CAACc,OAAR,EAAiBlE,YAAjB;EAAb,GACGX,IAAI,IAAID,OAAO,KAAK,IAApB,GACCiB,oBAAC4D,iBAAD;IAAMnE,KAAK,EAAEoD;EAAb,GACE7C,oBAAC8D,aAAD;IACEC,MAAM,EAAE/E,IADV;IAEEgF,IAAI,EAAEtB,eAAF,aAAEA,eAAF,cAAEA,eAAF,GAAqB,EAF3B;IAGExD,KAAK,EACH,OAAOuD,gBAAP,KAA4B,QAA5B,GACIA,gBADJ,GAEIjB;EANR,EADF,CADD,GAYG,IAbN,EAcGzC,OAAO,GACNiB,oBAACiE,0BAAD;IACED,IAAI,EAAEtB,eAAF,aAAEA,eAAF,cAAEA,eAAF,GAAqB,EAD3B;IAEExD,KAAK,EACH,OAAOuD,gBAAP,KAA4B,QAA5B,GACIA,gBADJ,GAEIjB,SALR;IAOE/B,KAAK,EAAEoD;EAPT,EADM,GAUJ,IAxBN,EAyBE7C,oBAACkE,aAAD;IACEC,UAAU,EAAE,KADd;IAEEC,aAAa,EAAE,CAFjB;IAGE3E,KAAK,EAAE,CACLsD,MAAM,CAACsB,KADF,EAELzF,OAAO,IAAImE,MAAM,CAACuB,YAFb,EAGLlF,SAAS,IAAI2D,MAAM,CAACwB,cAHf,EAIL3B,SAJK,EAKLzB,IALK,EAMLvB,UANK;EAHT,GAYGT,QAZH,CAzBF,CApBF,CAVF,CADF;AA0ED,CA9MD;AAgNA,IAAM4D,MAAM,GAAGf,uBAAU,CAACwC,MAAX,CAAkB;EAC/BtB,MAAM,EAAE;IACNuB,QAAQ,EAAE,EADJ;IAENC,WAAW,EAAE;EAFP,CADuB;EAK/B9F,OAAO,EAAE;IACP6F,QAAQ,EAAE;EADH,CALsB;EAQ/BZ,OAAO,EAAE;IACPf,aAAa,EAAE,KADR;IAEP6B,UAAU,EAAE,QAFL;IAGPC,cAAc,EAAE;EAHT,CARsB;EAa/B5F,IAAI,EAAE;IACJ6F,UAAU,EAAE,EADR;IAEJC,WAAW,EAAE,CAAC;EAFV,CAbyB;EAiB/B9B,WAAW,EAAE;IACX8B,WAAW,EAAE,EADF;IAEXD,UAAU,EAAE,CAAC;EAFF,CAjBkB;EAqB/BR,KAAK,EAAE;IACLU,SAAS,EAAE,QADN;IAELC,aAAa,EAAE,CAFV;IAGLC,cAAc,EAAE,CAHX;IAILC,gBAAgB,EAAE;EAJb,CArBwB;EA2B/BZ,YAAY,EAAE;IACZY,gBAAgB,EAAE;EADN,CA3BiB;EA8B/BX,cAAc,EAAE;IACdY,aAAa,EAAE;EADD;AA9Be,CAAlB,CAAf;AAAA,eAmCeC,sBAAS,EAAC3G,MAAD,CAAxB;AAAA","names":["Button","_ref","disabled","compact","mode","dark","loading","icon","buttonColor","color","children","uppercase","accessibilityLabel","accessibilityHint","onPress","onLongPress","style","theme","contentStyle","labelStyle","testID","accessible","rest","React","useRef","Animated","Value","elevation","current","useEffect","setValue","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","colors","roundness","font","fonts","medium","backgroundColor","borderColor","textColor","borderWidth","white","black","alpha","rgb","string","primary","StyleSheet","hairlineWidth","isDark","isLight","rippleColor","buttonStyle","borderRadius","touchableStyle","flatten","customLabelColor","customLabelSize","fontSize","textStyle","iconStyle","flexDirection","styles","iconReverse","Surface","button","TouchableRipple","borderless","delayPressIn","onPressIn","onPressOut","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","View","content","Icon","source","size","ActivityIndicator","Text","selectable","numberOfLines","label","compactLabel","uppercaseLabel","create","minWidth","borderStyle","alignItems","justifyContent","marginLeft","marginRight","textAlign","letterSpacing","marginVertical","marginHorizontal","textTransform","withTheme"],"sources":["Button.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\nexport type Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility hint for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityHint?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = ({\n  disabled,\n  compact,\n  mode = 'text',\n  dark,\n  loading,\n  icon,\n  color: buttonColor,\n  children,\n  uppercase = true,\n  accessibilityLabel,\n  accessibilityHint,\n  onPress,\n  onLongPress,\n  style,\n  theme,\n  contentStyle,\n  labelStyle,\n  testID,\n  accessible,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(disabled || mode !== 'contained' ? 0 : 2)\n  );\n  React.useEffect(() => {\n    elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);\n  }, [mode, elevation, disabled]);\n\n  const handlePressIn = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressOut = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const { colors, roundness } = theme;\n  const font = theme.fonts.medium;\n\n  let backgroundColor: string,\n    borderColor: string,\n    textColor: string,\n    borderWidth: number;\n\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n\n  if (mode === 'outlined') {\n    borderColor = color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n    borderWidth = StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n\n  if (disabled) {\n    textColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else if (mode === 'contained') {\n    let isDark;\n\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark =\n        backgroundColor === 'transparent'\n          ? false\n          : !color(backgroundColor).isLight();\n    }\n\n    textColor = isDark ? white : black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n\n  const rippleColor = color(textColor).alpha(0.32).rgb().string();\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius: roundness,\n  };\n  const touchableStyle = {\n    borderRadius: style\n      ? ((StyleSheet.flatten(style) || {}) as ViewStyle).borderRadius ??\n        roundness\n      : roundness,\n  };\n\n  const { color: customLabelColor, fontSize: customLabelSize } =\n    StyleSheet.flatten(labelStyle) || {};\n\n  const textStyle = { color: textColor, ...font };\n  const iconStyle =\n    StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'\n      ? styles.iconReverse\n      : styles.icon;\n\n  return (\n    <Surface\n      {...rest}\n      style={[\n        styles.button,\n        compact && styles.compact,\n        { elevation },\n        buttonStyle,\n        style,\n      ]}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        accessible={accessible}\n        disabled={disabled}\n        rippleColor={rippleColor}\n        style={touchableStyle}\n        testID={testID}\n      >\n        <View style={[styles.content, contentStyle]}>\n          {icon && loading !== true ? (\n            <View style={iconStyle}>\n              <Icon\n                source={icon}\n                size={customLabelSize ?? 16}\n                color={\n                  typeof customLabelColor === 'string'\n                    ? customLabelColor\n                    : textColor\n                }\n              />\n            </View>\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customLabelSize ?? 16}\n              color={\n                typeof customLabelColor === 'string'\n                  ? customLabelColor\n                  : textColor\n              }\n              style={iconStyle}\n            />\n          ) : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.label,\n              compact && styles.compactLabel,\n              uppercase && styles.uppercaseLabel,\n              textStyle,\n              font,\n              labelStyle,\n            ]}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n});\n\nexport default withTheme(Button);\n"]},"metadata":{},"sourceType":"script"}