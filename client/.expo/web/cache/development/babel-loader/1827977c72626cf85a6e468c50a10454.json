{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _ExecutionEnvironment = require(\"fbjs/lib/ExecutionEnvironment\");\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar initialURL = _ExecutionEnvironment.canUseDOM ? window.location.href : '';\nvar Linking = {\n  addEventListener: function addEventListener() {},\n  removeEventListener: function removeEventListener() {},\n  canOpenURL: function canOpenURL() {\n    return Promise.resolve(true);\n  },\n  getInitialURL: function getInitialURL() {\n    return Promise.resolve(initialURL);\n  },\n  openURL: function openURL(url) {\n    try {\n      open(url);\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  },\n  _validateURL: function _validateURL(url) {\n    (0, _invariant.default)(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);\n    (0, _invariant.default)(url, 'Invalid URL: cannot be empty');\n  }\n};\nvar open = function open(url) {\n  if (_ExecutionEnvironment.canUseDOM) {\n    window.location = new URL(url, window.location).toString();\n  }\n};\nvar _default = Linking;\nexports.default = _default;","map":{"version":3,"names":["initialURL","canUseDOM","window","location","href","Linking","addEventListener","removeEventListener","canOpenURL","Promise","resolve","getInitialURL","openURL","url","open","e","reject","_validateURL","invariant","URL","toString"],"sources":["C:/Users/prariya/Desktop/Modhiw/client/node_modules/react-native-phone-number-input/node_modules/react-native-web/dist/exports/Linking/index.js"],"sourcesContent":["/**\n * Copyright (c) 2016-present, Nicolas Gallagher.\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport invariant from 'fbjs/lib/invariant';\n\nvar initialURL = canUseDOM ? window.location.href : '';\n\nvar Linking = {\n  addEventListener: function addEventListener() {},\n  removeEventListener: function removeEventListener() {},\n  canOpenURL: function canOpenURL() {\n    return Promise.resolve(true);\n  },\n  getInitialURL: function getInitialURL() {\n    return Promise.resolve(initialURL);\n  },\n  openURL: function openURL(url) {\n    try {\n      open(url);\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  },\n  _validateURL: function _validateURL(url) {\n    invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);\n    invariant(url, 'Invalid URL: cannot be empty');\n  }\n};\n\nvar open = function open(url) {\n  if (canUseDOM) {\n    window.location = new URL(url, window.location).toString();\n  }\n};\n\nexport default Linking;"],"mappings":";;;;;AAUA;AACA;;AAEA,IAAIA,UAAU,GAAGC,+BAAS,GAAGC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,EAAE;AAEtD,IAAIC,OAAO,GAAG;EACZC,gBAAgB,EAAE,SAASA,gBAAgB,GAAG,CAAC,CAAC;EAChDC,mBAAmB,EAAE,SAASA,mBAAmB,GAAG,CAAC,CAAC;EACtDC,UAAU,EAAE,SAASA,UAAU,GAAG;IAChC,OAAOC,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;EAC9B,CAAC;EACDC,aAAa,EAAE,SAASA,aAAa,GAAG;IACtC,OAAOF,OAAO,CAACC,OAAO,CAACV,UAAU,CAAC;EACpC,CAAC;EACDY,OAAO,EAAE,SAASA,OAAO,CAACC,GAAG,EAAE;IAC7B,IAAI;MACFC,IAAI,CAACD,GAAG,CAAC;MACT,OAAOJ,OAAO,CAACC,OAAO,EAAE;IAC1B,CAAC,CAAC,OAAOK,CAAC,EAAE;MACV,OAAON,OAAO,CAACO,MAAM,CAACD,CAAC,CAAC;IAC1B;EACF,CAAC;EACDE,YAAY,EAAE,SAASA,YAAY,CAACJ,GAAG,EAAE;IACvC,IAAAK,kBAAS,EAAC,OAAOL,GAAG,KAAK,QAAQ,EAAE,wCAAwC,GAAGA,GAAG,CAAC;IAClF,IAAAK,kBAAS,EAACL,GAAG,EAAE,8BAA8B,CAAC;EAChD;AACF,CAAC;AAED,IAAIC,IAAI,GAAG,SAASA,IAAI,CAACD,GAAG,EAAE;EAC5B,IAAIZ,+BAAS,EAAE;IACbC,MAAM,CAACC,QAAQ,GAAG,IAAIgB,GAAG,CAACN,GAAG,EAAEX,MAAM,CAACC,QAAQ,CAAC,CAACiB,QAAQ,EAAE;EAC5D;AACF,CAAC;AAAC,eAEaf,OAAO;AAAA"},"metadata":{},"sourceType":"script"}