{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.RadioButtonGroup = exports.RadioButtonContext = void 0;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar RadioButtonContext = React.createContext(null);\nexports.RadioButtonContext = RadioButtonContext;\n\nvar RadioButtonGroup = function RadioButtonGroup(_ref) {\n  var value = _ref.value,\n    onValueChange = _ref.onValueChange,\n    children = _ref.children;\n  return React.createElement(RadioButtonContext.Provider, {\n    value: {\n      value: value,\n      onValueChange: onValueChange\n    }\n  }, React.createElement(_reactNative.View, {\n    accessibilityRole: \"radiogroup\"\n  }, children));\n};\nexports.RadioButtonGroup = RadioButtonGroup;\nRadioButtonGroup.displayName = 'RadioButton.Group';\nvar _default = RadioButtonGroup;\nexports.default = _default;","map":{"version":3,"mappings":";;;;AAAA;AACA;AAAA;AAAA;AAsBO,IAAMA,kBAAkB,GAAGC,KAAK,CAACC,aAAN,CAChC,IADgC,CAA3B;AAAA;;AA4CP,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAGC;EAAA,IAAGC,KAAF,GAADD,KAAGC,KAAF;IAASC,aAAT,GAADF,KAAUE,aAAT;IAAwBC,WAAzBH,KAAyBG;EAAzB,OACvBN,oBAACD,kBAAD,CAAoBQ,QAApB;IAA6BH,KAAK,EAAE;MAAEA,KAAF,EAAEA,KAAF;MAASC;IAAT;EAApC,GACEL,oBAACQ,iBAAD;IAAMC,iBAAiB,EAAC;EAAxB,GAAsCH,QAAtC,CADF,CADuB;AAAA,CAAzB;AAAA;AAMAJ,gBAAgB,CAACQ,WAAjB,GAA+B,mBAA/B;AAAA,eACeR,gBAAf;AAAA","names":["RadioButtonContext","React","createContext","RadioButtonGroup","_ref","value","onValueChange","children","Provider","View","accessibilityRole","displayName"],"sources":["RadioButtonGroup.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View } from 'react-native';\n\nexport type Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => void;\n  /**\n   * Value of the currently selected radio button.\n   */\n  value: string;\n  /**\n   * React elements containing radio buttons.\n   */\n  children: React.ReactNode;\n};\n\nexport type RadioButtonContextType = {\n  value: string;\n  onValueChange: (item: string) => void;\n};\n\nexport const RadioButtonContext = React.createContext<RadioButtonContextType>(\n  null as any\n);\n\n/**\n * Radio button group allows to control a group of radio buttons.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-button-group-android.gif\" />\n *  <figcaption>Android</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-button-group-ios.gif\" />\n *  <figcaption>iOS</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { RadioButton, Text } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={newValue => setValue(newValue)} value={value}>\n *       <View>\n *         <Text>First</Text>\n *         <RadioButton value=\"first\" />\n *       </View>\n *       <View>\n *         <Text>Second</Text>\n *         <RadioButton value=\"second\" />\n *       </View>\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst RadioButtonGroup = ({ value, onValueChange, children }: Props) => (\n  <RadioButtonContext.Provider value={{ value, onValueChange }}>\n    <View accessibilityRole=\"radiogroup\">{children}</View>\n  </RadioButtonContext.Provider>\n);\n\nRadioButtonGroup.displayName = 'RadioButton.Group';\nexport default RadioButtonGroup;\n\n// @component-docs ignore-next-line\nexport { RadioButtonGroup };\n"]},"metadata":{},"sourceType":"script"}