{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = usePreventRemoveContext;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _PreventRemoveContext = _interopRequireDefault(require(\"./PreventRemoveContext\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction usePreventRemoveContext() {\n  var value = React.useContext(_PreventRemoveContext.default);\n  if (value == null) {\n    throw new Error(\"Couldn't find the prevent remove context. Is your component inside NavigationContent?\");\n  }\n  return value;\n}","map":{"version":3,"mappings":";;;;;AAAA;AAEA;AAAA;AAAA;AAEe,SAASA,uBAAT,GAAmC;EAChD,IAAMC,KAAK,GAAGC,KAAK,CAACC,UAAN,CAAiBC,6BAAjB,CAAd;EAEA,IAAIH,KAAK,IAAI,IAAb,EAAmB;IACjB,MAAM,IAAII,KAAJ,CACJ,uFADI,CAAN;EAGD;EAED,OAAOJ,KAAP;AACD","names":["usePreventRemoveContext","value","React","useContext","PreventRemoveContext","Error"],"sources":["usePreventRemoveContext.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport PreventRemoveContext from './PreventRemoveContext';\n\nexport default function usePreventRemoveContext() {\n  const value = React.useContext(PreventRemoveContext);\n\n  if (value == null) {\n    throw new Error(\n      \"Couldn't find the prevent remove context. Is your component inside NavigationContent?\"\n    );\n  }\n\n  return value;\n}\n"]},"metadata":{},"sourceType":"script"}