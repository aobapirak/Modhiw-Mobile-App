{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.CheckboxItem = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _Checkbox = _interopRequireDefault(require(\"./Checkbox\"));\nvar _CheckboxAndroid = _interopRequireDefault(require(\"./CheckboxAndroid\"));\nvar _CheckboxIOS = _interopRequireDefault(require(\"./CheckboxIOS\"));\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));\nvar _theming = require(\"../../core/theming\");\nvar _excluded = [\"style\", \"status\", \"label\", \"onPress\", \"labelStyle\", \"theme\", \"testID\", \"mode\", \"position\", \"disabled\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar CheckboxItem = function CheckboxItem(_ref) {\n  var style = _ref.style,\n    status = _ref.status,\n    label = _ref.label,\n    onPress = _ref.onPress,\n    labelStyle = _ref.labelStyle,\n    theme = _ref.theme,\n    testID = _ref.testID,\n    mode = _ref.mode,\n    _ref$position = _ref.position,\n    position = _ref$position === void 0 ? 'trailing' : _ref$position,\n    disabled = _ref.disabled,\n    props = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var checkboxProps = Object.assign({}, props, {\n    status: status,\n    theme: theme,\n    disabled: disabled\n  });\n  var isLeading = position === 'leading';\n  var checkbox;\n  if (mode === 'android') {\n    checkbox = React.createElement(_CheckboxAndroid.default, checkboxProps);\n  } else if (mode === 'ios') {\n    checkbox = React.createElement(_CheckboxIOS.default, checkboxProps);\n  } else {\n    checkbox = React.createElement(_Checkbox.default, checkboxProps);\n  }\n  return React.createElement(_TouchableRipple.default, {\n    accessibilityLabel: label,\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      checked: status === 'checked',\n      disabled: disabled\n    },\n    onPress: onPress,\n    testID: testID,\n    disabled: disabled\n  }, React.createElement(_reactNative.View, {\n    style: [styles.container, style],\n    pointerEvents: \"none\",\n    importantForAccessibility: \"no-hide-descendants\"\n  }, isLeading && checkbox, React.createElement(_Text.default, {\n    style: [styles.label, {\n      color: disabled ? theme.colors.disabled : theme.colors.text,\n      textAlign: isLeading ? 'right' : 'left'\n    }, labelStyle]\n  }, label), !isLeading && checkbox));\n};\nCheckboxItem.displayName = 'Checkbox.Item';\nvar _default = (0, _theming.withTheme)(CheckboxItem);\nexports.default = _default;\n\nvar CheckboxItemWithTheme = (0, _theming.withTheme)(CheckboxItem);\nexports.CheckboxItem = CheckboxItemWithTheme;\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1\n  }\n});","map":{"version":3,"mappings":";;;;;;AAAA;AAEA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAyEA,IAAMA,YAAY,GAAG,SAAfA,YAAY,CAAGC,MAYR;EAAA,IAXXC,KADoB,GAYTD,KAXXC,KADoB;IAEpBC,MAFoB,GAYTF,KAVXE,MAFoB;IAGpBC,KAHoB,GAYTH,KATXG,KAHoB;IAIpBC,OAJoB,GAYTJ,KARXI,OAJoB;IAKpBC,UALoB,GAYTL,KAPXK,UALoB;IAMpBC,KANoB,GAYTN,KANXM,KANoB;IAOpBC,MAPoB,GAYTP,KALXO,MAPoB;IAQpBC,IARoB,GAYTR,KAJXQ,IARoB;IAAA,gBAYTR,KAHXS,QAAQ;IAARA,QAAQ,8BAAG,UATS;IAUpBC,QAVoB,GAYTV,KAFXU,QAVoB;IAWjBC,+CACQX;EACX,IAAMY,aAAa,qBAAQD,KAAL;IAAYT,MAAZ,EAAYA,MAAZ;IAAoBI,KAApB,EAAoBA,KAApB;IAA2BI;EAAAA,EAAjD;EACA,IAAMG,SAAS,GAAGJ,QAAQ,KAAK,SAA/B;EACA,IAAIK,QAAJ;EAEA,IAAIN,IAAI,KAAK,SAAb,EAAwB;IACtBM,QAAQ,GAAGC,oBAACC,wBAAD,EAAqBJ,aAArB,CAAX;EACD,CAFD,MAEO,IAAIJ,IAAI,KAAK,KAAb,EAAoB;IACzBM,QAAQ,GAAGC,oBAACE,oBAAD,EAAiBL,aAAjB,CAAX;EACD,CAFM,MAEA;IACLE,QAAQ,GAAGC,oBAACG,iBAAD,EAAcN,aAAd,CAAX;EACD;EAED,OACEG,oBAACI,wBAAD;IACEC,kBAAkB,EAAEjB,KADtB;IAEEkB,iBAAiB,EAAC,UAFpB;IAGEC,kBAAkB,EAAE;MAClBC,OAAO,EAAErB,MAAM,KAAK,SADF;MAElBQ;IAFkB,CAHtB;IAOEN,OAAO,EAAEA,OAPX;IAQEG,MAAM,EAAEA,MARV;IASEG,QAAQ,EAAEA;EATZ,GAWEK,oBAACS,iBAAD;IACEvB,KAAK,EAAE,CAACwB,MAAM,CAACC,SAAR,EAAmBzB,KAAnB,CADT;IAEE0B,aAAa,EAAC,MAFhB;IAGEC,yBAAyB,EAAC;EAH5B,GAKGf,SAAS,IAAIC,QALhB,EAMEC,oBAACc,aAAD;IACE5B,KAAK,EAAE,CACLwB,MAAM,CAACtB,KADF,EAEL;MACE2B,KAAK,EAAEpB,QAAQ,GAAGJ,KAAK,CAACyB,MAAN,CAAarB,QAAhB,GAA2BJ,KAAK,CAACyB,MAAN,CAAaC,IADzD;MAEEC,SAAS,EAAEpB,SAAS,GAAG,OAAH,GAAa;IAFnC,CAFK,EAMLR,UANK;EADT,GAUGF,KAVH,CANF,EAkBG,CAACU,SAAD,IAAcC,QAlBjB,CAXF,CADF;AAkCD,CA3DD;AA6DAf,YAAY,CAACmC,WAAb,GAA2B,eAA3B;AAAA,eAEeC,sBAAS,EAACpC,YAAD,CAAxB;AAAA;;AAGA,IAAMqC,qBAAqB,GAAGD,sBAAS,EAACpC,YAAD,CAAvC;;AAIA,IAAM0B,MAAM,GAAGY,uBAAU,CAACC,MAAX,CAAkB;EAC/BZ,SAAS,EAAE;IACTa,aAAa,EAAE,KADN;IAETC,UAAU,EAAE,QAFH;IAGTC,cAAc,EAAE,eAHP;IAITC,eAAe,EAAE,CAJR;IAKTC,iBAAiB,EAAE;EALV,CADoB;EAQ/BxC,KAAK,EAAE;IACLyC,QAAQ,EAAE,EADL;IAELC,UAAU,EAAE,CAFP;IAGLC,QAAQ,EAAE;EAHL;AARwB,CAAlB,CAAf","names":["CheckboxItem","_ref","style","status","label","onPress","labelStyle","theme","testID","mode","position","disabled","props","checkboxProps","isLeading","checkbox","React","CheckboxAndroid","CheckboxIOS","Checkbox","TouchableRipple","accessibilityLabel","accessibilityRole","accessibilityState","checked","View","styles","container","pointerEvents","importantForAccessibility","Text","color","colors","text","textAlign","displayName","withTheme","CheckboxItemWithTheme","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","fontSize","flexShrink","flexGrow"],"sources":["CheckboxItem.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\nexport type Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Checkbox control position.\n   */\n  position?: 'leading' | 'trailing';\n  /**\n   * Whether `<Checkbox.Android />` or `<Checkbox.IOS />` should be used.\n   * Left undefined `<Checkbox />` will be used.\n   */\n  mode?: 'android' | 'ios';\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme,\n  testID,\n  mode,\n  position = 'trailing',\n  disabled,\n  ...props\n}: Props) => {\n  const checkboxProps = { ...props, status, theme, disabled };\n  const isLeading = position === 'leading';\n  let checkbox;\n\n  if (mode === 'android') {\n    checkbox = <CheckboxAndroid {...checkboxProps} />;\n  } else if (mode === 'ios') {\n    checkbox = <CheckboxIOS {...checkboxProps} />;\n  } else {\n    checkbox = <Checkbox {...checkboxProps} />;\n  }\n\n  return (\n    <TouchableRipple\n      accessibilityLabel={label}\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{\n        checked: status === 'checked',\n        disabled,\n      }}\n      onPress={onPress}\n      testID={testID}\n      disabled={disabled}\n    >\n      <View\n        style={[styles.container, style]}\n        pointerEvents=\"none\"\n        importantForAccessibility=\"no-hide-descendants\"\n      >\n        {isLeading && checkbox}\n        <Text\n          style={[\n            styles.label,\n            {\n              color: disabled ? theme.colors.disabled : theme.colors.text,\n              textAlign: isLeading ? 'right' : 'left',\n            },\n            labelStyle,\n          ]}\n        >\n          {label}\n        </Text>\n        {!isLeading && checkbox}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default withTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nconst CheckboxItemWithTheme = withTheme(CheckboxItem);\n// @component-docs ignore-next-line\nexport { CheckboxItemWithTheme as CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}