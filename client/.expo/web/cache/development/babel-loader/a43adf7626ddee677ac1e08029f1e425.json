{"ast":null,"code":"\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _ListViewDataSource = _interopRequireDefault(require(\"./ListViewDataSource\"));\nvar _Platform = _interopRequireDefault(require(\"../../../exports/Platform\"));\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _findNodeHandle = _interopRequireDefault(require(\"../../../exports/findNodeHandle\"));\nvar _NativeModules = _interopRequireDefault(require(\"../../../exports/NativeModules\"));\nvar _ScrollView = _interopRequireDefault(require(\"../../../exports/ScrollView\"));\nvar _ScrollResponder = _interopRequireDefault(require(\"../../../modules/ScrollResponder\"));\nvar _StaticRenderer = _interopRequireDefault(require(\"../StaticRenderer\"));\nvar _reactTimerMixin = _interopRequireDefault(require(\"react-timer-mixin\"));\nvar _View = _interopRequireDefault(require(\"../../../exports/View\"));\nvar _cloneReferencedElement = _interopRequireDefault(require(\"./cloneReferencedElement\"));\nvar _createReactClass = _interopRequireDefault(require(\"create-react-class\"));\nvar _isEmpty = _interopRequireDefault(require(\"../isEmpty\"));\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n  return target;\n}\nvar merge = function merge() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return Object.assign.apply(Object, [{}].concat(args));\n};\nvar RCTScrollViewManager = _NativeModules.default.ScrollViewManager;\nvar DEFAULT_PAGE_SIZE = 1;\nvar DEFAULT_INITIAL_ROWS = 10;\nvar DEFAULT_SCROLL_RENDER_AHEAD = 1000;\nvar DEFAULT_END_REACHED_THRESHOLD = 1000;\nvar DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;\n\nvar ListView = (0, _createReactClass.default)({\n  displayName: 'ListView',\n  _childFrames: [],\n  _sentEndForContentLength: null,\n  _scrollComponent: null,\n  _prevRenderedRowsCount: 0,\n  _visibleRows: {},\n  scrollProperties: {},\n  mixins: [_ScrollResponder.default.Mixin, _reactTimerMixin.default],\n  statics: {\n    DataSource: _ListViewDataSource.default\n  },\n  propTypes: Object.assign({}, _ScrollView.default.propTypes, {\n    dataSource: _propTypes.default.instanceOf(_ListViewDataSource.default).isRequired,\n    renderSeparator: _propTypes.default.func,\n    renderRow: _propTypes.default.func.isRequired,\n    initialListSize: _propTypes.default.number.isRequired,\n    onEndReached: _propTypes.default.func,\n    onEndReachedThreshold: _propTypes.default.number.isRequired,\n    pageSize: _propTypes.default.number.isRequired,\n    renderFooter: _propTypes.default.func,\n    renderHeader: _propTypes.default.func,\n    renderSectionHeader: _propTypes.default.func,\n    renderScrollComponent: _propTypes.default.func.isRequired,\n    scrollRenderAheadDistance: _propTypes.default.number.isRequired,\n    onChangeVisibleRows: _propTypes.default.func,\n    removeClippedSubviews: _propTypes.default.bool,\n    stickySectionHeadersEnabled: _propTypes.default.bool,\n    stickyHeaderIndices: _propTypes.default.arrayOf(_propTypes.default.number).isRequired,\n    enableEmptySections: _propTypes.default.bool\n  }),\n  getMetrics: function getMetrics() {\n    return {\n      contentLength: this.scrollProperties.contentLength,\n      totalRows: this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount(),\n      renderedRows: this.state.curRenderedRowsCount,\n      visibleRows: Object.keys(this._visibleRows).length\n    };\n  },\n  getScrollResponder: function getScrollResponder() {\n    if (this._scrollComponent && this._scrollComponent.getScrollResponder) {\n      return this._scrollComponent.getScrollResponder();\n    }\n  },\n  getScrollableNode: function getScrollableNode() {\n    if (this._scrollComponent && this._scrollComponent.getScrollableNode) {\n      return this._scrollComponent.getScrollableNode();\n    } else {\n      return (0, _findNodeHandle.default)(this._scrollComponent);\n    }\n  },\n  scrollTo: function scrollTo() {\n    if (this._scrollComponent && this._scrollComponent.scrollTo) {\n      var _scrollComponent;\n      (_scrollComponent = this._scrollComponent).scrollTo.apply(_scrollComponent, arguments);\n    }\n  },\n  scrollToEnd: function scrollToEnd(options) {\n    if (this._scrollComponent) {\n      if (this._scrollComponent.scrollToEnd) {\n        this._scrollComponent.scrollToEnd(options);\n      } else {\n        console.warn('The scroll component used by the ListView does not support ' + 'scrollToEnd. Check the renderScrollComponent prop of your ListView.');\n      }\n    }\n  },\n  flashScrollIndicators: function flashScrollIndicators() {\n    if (this._scrollComponent && this._scrollComponent.flashScrollIndicators) {\n      this._scrollComponent.flashScrollIndicators();\n    }\n  },\n  setNativeProps: function setNativeProps(props) {\n    if (this._scrollComponent) {\n      this._scrollComponent.setNativeProps(props);\n    }\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      initialListSize: DEFAULT_INITIAL_ROWS,\n      pageSize: DEFAULT_PAGE_SIZE,\n      renderScrollComponent: function renderScrollComponent(props) {\n        return _react.default.createElement(_ScrollView.default, props);\n      },\n      scrollRenderAheadDistance: DEFAULT_SCROLL_RENDER_AHEAD,\n      onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,\n      stickySectionHeadersEnabled: _Platform.default.OS === 'ios' || _Platform.default.OS === 'web',\n      stickyHeaderIndices: []\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      curRenderedRowsCount: this.props.initialListSize,\n      highlightedRow: {}\n    };\n  },\n  getInnerViewNode: function getInnerViewNode() {\n    return this._scrollComponent.getInnerViewNode();\n  },\n  UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {\n    this.scrollProperties = {\n      visibleLength: null,\n      contentLength: null,\n      offset: 0\n    };\n    this._childFrames = [];\n    this._visibleRows = {};\n    this._prevRenderedRowsCount = 0;\n    this._sentEndForContentLength = null;\n  },\n  componentDidMount: function componentDidMount() {\n    var _this = this;\n\n    this.requestAnimationFrame(function () {\n      _this._measureAndUpdateScrollProps();\n    });\n  },\n  UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {\n    var _this2 = this;\n    if (this.props.dataSource !== nextProps.dataSource || this.props.initialListSize !== nextProps.initialListSize) {\n      this.setState(function (state, props) {\n        _this2._prevRenderedRowsCount = 0;\n        return {\n          curRenderedRowsCount: Math.min(Math.max(state.curRenderedRowsCount, props.initialListSize), props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount())\n        };\n      }, function () {\n        return _this2._renderMoreRowsIfNeeded();\n      });\n    }\n  },\n  componentDidUpdate: function componentDidUpdate() {\n    var _this3 = this;\n    this.requestAnimationFrame(function () {\n      _this3._measureAndUpdateScrollProps();\n    });\n  },\n  _onRowHighlighted: function _onRowHighlighted(sectionID, rowID) {\n    this.setState({\n      highlightedRow: {\n        sectionID: sectionID,\n        rowID: rowID\n      }\n    });\n  },\n  render: function render() {\n    var bodyComponents = [];\n    var dataSource = this.props.dataSource;\n    var allRowIDs = dataSource.rowIdentities;\n    var rowCount = 0;\n    var stickySectionHeaderIndices = [];\n    var renderSectionHeader = this.props.renderSectionHeader;\n    var header = this.props.renderHeader && this.props.renderHeader();\n    var footer = this.props.renderFooter && this.props.renderFooter();\n    var totalIndex = header ? 1 : 0;\n    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n      var sectionID = dataSource.sectionIdentities[sectionIdx];\n      var rowIDs = allRowIDs[sectionIdx];\n      if (rowIDs.length === 0) {\n        if (this.props.enableEmptySections === undefined) {\n          var warning = require('fbjs/lib/warning');\n          warning(false, 'In next release empty section headers will be rendered.' + \" In this release you can use 'enableEmptySections' flag to render empty section headers.\");\n          continue;\n        } else {\n          var invariant = require('fbjs/lib/invariant');\n          invariant(this.props.enableEmptySections, \"In next release 'enableEmptySections' flag will be deprecated, empty section headers will always be rendered.\" + ' If empty section headers are not desirable their indices should be excluded from sectionIDs object.' + \" In this release 'enableEmptySections' may only have value 'true' to allow empty section headers rendering.\");\n        }\n      }\n      if (renderSectionHeader) {\n        var element = renderSectionHeader(dataSource.getSectionHeaderData(sectionIdx), sectionID);\n        if (element) {\n          bodyComponents.push(_react.default.cloneElement(element, {\n            key: 's_' + sectionID\n          }));\n          if (this.props.stickySectionHeadersEnabled) {\n            stickySectionHeaderIndices.push(totalIndex);\n          }\n          totalIndex++;\n        }\n      }\n      for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {\n        var rowID = rowIDs[rowIdx];\n        var comboID = sectionID + '_' + rowID;\n        var shouldUpdateRow = rowCount >= this._prevRenderedRowsCount && dataSource.rowShouldUpdate(sectionIdx, rowIdx);\n        var row = _react.default.createElement(_StaticRenderer.default, {\n          key: 'r_' + comboID,\n          shouldUpdate: !!shouldUpdateRow,\n          render: this.props.renderRow.bind(null, dataSource.getRowData(sectionIdx, rowIdx), sectionID, rowID, this._onRowHighlighted)\n        });\n        bodyComponents.push(row);\n        totalIndex++;\n        if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {\n          var adjacentRowHighlighted = this.state.highlightedRow.sectionID === sectionID && (this.state.highlightedRow.rowID === rowID || this.state.highlightedRow.rowID === rowIDs[rowIdx + 1]);\n          var separator = this.props.renderSeparator(sectionID, rowID, adjacentRowHighlighted);\n          if (separator) {\n            bodyComponents.push(_react.default.createElement(_View.default, {\n              key: 's_' + comboID\n            }, separator));\n            totalIndex++;\n          }\n        }\n        if (++rowCount === this.state.curRenderedRowsCount) {\n          break;\n        }\n      }\n      if (rowCount >= this.state.curRenderedRowsCount) {\n        break;\n      }\n    }\n    var _props = this.props,\n      renderScrollComponent = _props.renderScrollComponent,\n      props = _objectWithoutProperties(_props, ['renderScrollComponent']);\n    if (!props.scrollEventThrottle) {\n      props.scrollEventThrottle = DEFAULT_SCROLL_CALLBACK_THROTTLE;\n    }\n    if (props.removeClippedSubviews === undefined) {\n      props.removeClippedSubviews = true;\n    }\n    Object.assign(props, {\n      onScroll: this._onScroll,\n      stickyHeaderIndices: this.props.stickyHeaderIndices.concat(stickySectionHeaderIndices),\n      onKeyboardWillShow: undefined,\n      onKeyboardWillHide: undefined,\n      onKeyboardDidShow: undefined,\n      onKeyboardDidHide: undefined\n    });\n    return (0, _cloneReferencedElement.default)(renderScrollComponent(props), {\n      ref: this._setScrollComponentRef,\n      onContentSizeChange: this._onContentSizeChange,\n      onLayout: this._onLayout,\n      DEPRECATED_sendUpdatedChildFrames: typeof props.onChangeVisibleRows !== undefined\n    }, header, bodyComponents, footer);\n  },\n\n  _measureAndUpdateScrollProps: function _measureAndUpdateScrollProps() {\n    var scrollComponent = this.getScrollResponder();\n    if (!scrollComponent || !scrollComponent.getInnerViewNode) {\n      return;\n    }\n\n    RCTScrollViewManager && RCTScrollViewManager.calculateChildFrames && RCTScrollViewManager.calculateChildFrames((0, _findNodeHandle.default)(scrollComponent), this._updateVisibleRows);\n  },\n  _setScrollComponentRef: function _setScrollComponentRef(scrollComponent) {\n    this._scrollComponent = scrollComponent;\n  },\n  _onContentSizeChange: function _onContentSizeChange(width, height) {\n    var contentLength = !this.props.horizontal ? height : width;\n    if (contentLength !== this.scrollProperties.contentLength) {\n      this.scrollProperties.contentLength = contentLength;\n      this._updateVisibleRows();\n      this._renderMoreRowsIfNeeded();\n    }\n    this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);\n  },\n  _onLayout: function _onLayout(event) {\n    var _event$nativeEvent$la = event.nativeEvent.layout,\n      width = _event$nativeEvent$la.width,\n      height = _event$nativeEvent$la.height;\n    var visibleLength = !this.props.horizontal ? height : width;\n    if (visibleLength !== this.scrollProperties.visibleLength) {\n      this.scrollProperties.visibleLength = visibleLength;\n      this._updateVisibleRows();\n      this._renderMoreRowsIfNeeded();\n    }\n    this.props.onLayout && this.props.onLayout(event);\n  },\n  _maybeCallOnEndReached: function _maybeCallOnEndReached(event) {\n    if (this.props.onEndReached && this.scrollProperties.contentLength !== this._sentEndForContentLength && this._getDistanceFromEnd(this.scrollProperties) < this.props.onEndReachedThreshold && this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {\n      this._sentEndForContentLength = this.scrollProperties.contentLength;\n      this.props.onEndReached(event);\n      return true;\n    }\n    return false;\n  },\n  _renderMoreRowsIfNeeded: function _renderMoreRowsIfNeeded() {\n    if (this.scrollProperties.contentLength === null || this.scrollProperties.visibleLength === null || this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {\n      this._maybeCallOnEndReached();\n      return;\n    }\n    var distanceFromEnd = this._getDistanceFromEnd(this.scrollProperties);\n    if (distanceFromEnd < this.props.scrollRenderAheadDistance) {\n      this._pageInNewRows();\n    }\n  },\n  _pageInNewRows: function _pageInNewRows() {\n    var _this4 = this;\n    this.setState(function (state, props) {\n      var rowsToRender = Math.min(state.curRenderedRowsCount + props.pageSize, props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount());\n      _this4._prevRenderedRowsCount = state.curRenderedRowsCount;\n      return {\n        curRenderedRowsCount: rowsToRender\n      };\n    }, function () {\n      _this4._measureAndUpdateScrollProps();\n      _this4._prevRenderedRowsCount = _this4.state.curRenderedRowsCount;\n    });\n  },\n  _getDistanceFromEnd: function _getDistanceFromEnd(scrollProperties) {\n    return scrollProperties.contentLength - scrollProperties.visibleLength - scrollProperties.offset;\n  },\n  _updateVisibleRows: function _updateVisibleRows(updatedFrames) {\n    var _this5 = this;\n    if (!this.props.onChangeVisibleRows) {\n      return;\n    }\n\n    if (updatedFrames) {\n      updatedFrames.forEach(function (newFrame) {\n        _this5._childFrames[newFrame.index] = merge(newFrame);\n      });\n    }\n    var isVertical = !this.props.horizontal;\n    var dataSource = this.props.dataSource;\n    var visibleMin = this.scrollProperties.offset;\n    var visibleMax = visibleMin + this.scrollProperties.visibleLength;\n    var allRowIDs = dataSource.rowIdentities;\n    var header = this.props.renderHeader && this.props.renderHeader();\n    var totalIndex = header ? 1 : 0;\n    var visibilityChanged = false;\n    var changedRows = {};\n    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n      var rowIDs = allRowIDs[sectionIdx];\n      if (rowIDs.length === 0) {\n        continue;\n      }\n      var sectionID = dataSource.sectionIdentities[sectionIdx];\n      if (this.props.renderSectionHeader) {\n        totalIndex++;\n      }\n      var visibleSection = this._visibleRows[sectionID];\n      if (!visibleSection) {\n        visibleSection = {};\n      }\n      for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {\n        var rowID = rowIDs[rowIdx];\n        var frame = this._childFrames[totalIndex];\n        totalIndex++;\n        if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {\n          totalIndex++;\n        }\n        if (!frame) {\n          break;\n        }\n        var rowVisible = visibleSection[rowID];\n        var min = isVertical ? frame.y : frame.x;\n        var max = min + (isVertical ? frame.height : frame.width);\n        if (!min && !max || min === max) {\n          break;\n        }\n        if (min > visibleMax || max < visibleMin) {\n          if (rowVisible) {\n            visibilityChanged = true;\n            delete visibleSection[rowID];\n            if (!changedRows[sectionID]) {\n              changedRows[sectionID] = {};\n            }\n            changedRows[sectionID][rowID] = false;\n          }\n        } else if (!rowVisible) {\n          visibilityChanged = true;\n          visibleSection[rowID] = true;\n          if (!changedRows[sectionID]) {\n            changedRows[sectionID] = {};\n          }\n          changedRows[sectionID][rowID] = true;\n        }\n      }\n      if (!(0, _isEmpty.default)(visibleSection)) {\n        this._visibleRows[sectionID] = visibleSection;\n      } else if (this._visibleRows[sectionID]) {\n        delete this._visibleRows[sectionID];\n      }\n    }\n    visibilityChanged && this.props.onChangeVisibleRows(this._visibleRows, changedRows);\n  },\n  _onScroll: function _onScroll(e) {\n    var isVertical = !this.props.horizontal;\n    this.scrollProperties.visibleLength = e.nativeEvent.layoutMeasurement[isVertical ? 'height' : 'width'];\n    this.scrollProperties.contentLength = e.nativeEvent.contentSize[isVertical ? 'height' : 'width'];\n    this.scrollProperties.offset = e.nativeEvent.contentOffset[isVertical ? 'y' : 'x'];\n    this._updateVisibleRows(e.nativeEvent.updatedChildFrames);\n    if (!this._maybeCallOnEndReached(e)) {\n      this._renderMoreRowsIfNeeded();\n    }\n    if (this.props.onEndReached && this._getDistanceFromEnd(this.scrollProperties) > this.props.onEndReachedThreshold) {\n      this._sentEndForContentLength = null;\n    }\n    this.props.onScroll && this.props.onScroll(e);\n  }\n});\nvar _default = ListView;\nexports.default = _default;","map":{"version":3,"names":["_objectWithoutProperties","obj","keys","target","i","indexOf","Object","prototype","hasOwnProperty","call","merge","_len","arguments","length","args","Array","_key","assign","apply","concat","RCTScrollViewManager","NativeModules","ScrollViewManager","DEFAULT_PAGE_SIZE","DEFAULT_INITIAL_ROWS","DEFAULT_SCROLL_RENDER_AHEAD","DEFAULT_END_REACHED_THRESHOLD","DEFAULT_SCROLL_CALLBACK_THROTTLE","ListView","createReactClass","displayName","_childFrames","_sentEndForContentLength","_scrollComponent","_prevRenderedRowsCount","_visibleRows","scrollProperties","mixins","ScrollResponder","Mixin","TimerMixin","statics","DataSource","ListViewDataSource","propTypes","ScrollView","dataSource","PropTypes","instanceOf","isRequired","renderSeparator","func","renderRow","initialListSize","number","onEndReached","onEndReachedThreshold","pageSize","renderFooter","renderHeader","renderSectionHeader","renderScrollComponent","scrollRenderAheadDistance","onChangeVisibleRows","removeClippedSubviews","bool","stickySectionHeadersEnabled","stickyHeaderIndices","arrayOf","enableEmptySections","getMetrics","contentLength","totalRows","props","getRowAndSectionCount","getRowCount","renderedRows","state","curRenderedRowsCount","visibleRows","getScrollResponder","getScrollableNode","findNodeHandle","scrollTo","scrollToEnd","options","console","warn","flashScrollIndicators","setNativeProps","getDefaultProps","React","createElement","Platform","OS","getInitialState","highlightedRow","getInnerViewNode","UNSAFE_componentWillMount","visibleLength","offset","componentDidMount","_this","requestAnimationFrame","_measureAndUpdateScrollProps","UNSAFE_componentWillReceiveProps","nextProps","_this2","setState","Math","min","max","_renderMoreRowsIfNeeded","componentDidUpdate","_this3","_onRowHighlighted","sectionID","rowID","render","bodyComponents","allRowIDs","rowIdentities","rowCount","stickySectionHeaderIndices","header","footer","totalIndex","sectionIdx","sectionIdentities","rowIDs","undefined","warning","require","invariant","element","getSectionHeaderData","push","cloneElement","key","rowIdx","comboID","shouldUpdateRow","rowShouldUpdate","row","StaticRenderer","shouldUpdate","bind","getRowData","adjacentRowHighlighted","separator","View","_props","scrollEventThrottle","onScroll","_onScroll","onKeyboardWillShow","onKeyboardWillHide","onKeyboardDidShow","onKeyboardDidHide","cloneReferencedElement","ref","_setScrollComponentRef","onContentSizeChange","_onContentSizeChange","onLayout","_onLayout","DEPRECATED_sendUpdatedChildFrames","scrollComponent","calculateChildFrames","_updateVisibleRows","width","height","horizontal","event","_event$nativeEvent$la","nativeEvent","layout","_maybeCallOnEndReached","_getDistanceFromEnd","distanceFromEnd","_pageInNewRows","_this4","rowsToRender","updatedFrames","_this5","forEach","newFrame","index","isVertical","visibleMin","visibleMax","visibilityChanged","changedRows","visibleSection","frame","rowVisible","y","x","isEmpty","e","layoutMeasurement","contentSize","contentOffset","updatedChildFrames"],"sources":["C:/Users/prariya/Desktop/Modhiw/client/node_modules/react-native-phone-number-input/node_modules/react-native-web/dist/vendor/react-native/ListView/index.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule ListView\n * \n * @format\n */\n'use strict';\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nimport ListViewDataSource from './ListViewDataSource';\nimport Platform from '../../../exports/Platform';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport findNodeHandle from '../../../exports/findNodeHandle';\nimport NativeModules from '../../../exports/NativeModules';\nimport ScrollView from '../../../exports/ScrollView';\nimport ScrollResponder from '../../../modules/ScrollResponder';\nimport StaticRenderer from '../StaticRenderer';\nimport TimerMixin from 'react-timer-mixin';\nimport View from '../../../exports/View';\n\nimport cloneReferencedElement from './cloneReferencedElement';\nimport createReactClass from 'create-react-class';\nimport isEmpty from '../isEmpty';\n\nvar merge = function merge() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return Object.assign.apply(Object, [{}].concat(args));\n};\nvar RCTScrollViewManager = NativeModules.ScrollViewManager;\n\nvar DEFAULT_PAGE_SIZE = 1;\nvar DEFAULT_INITIAL_ROWS = 10;\nvar DEFAULT_SCROLL_RENDER_AHEAD = 1000;\nvar DEFAULT_END_REACHED_THRESHOLD = 1000;\nvar DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;\n\n/**\n * DEPRECATED - use one of the new list components, such as [`FlatList`](docs/flatlist.html)\n * or [`SectionList`](docs/sectionlist.html) for bounded memory use, fewer bugs,\n * better performance, an easier to use API, and more features. Check out this\n * [blog post](https://facebook.github.io/react-native/blog/2017/03/13/better-list-views.html)\n * for more details.\n *\n * ListView - A core component designed for efficient display of vertically\n * scrolling lists of changing data. The minimal API is to create a\n * [`ListView.DataSource`](docs/listviewdatasource.html), populate it with a simple\n * array of data blobs, and instantiate a `ListView` component with that data\n * source and a `renderRow` callback which takes a blob from the data array and\n * returns a renderable component.\n *\n * Minimal example:\n *\n * ```\n * class MyComponent extends Component {\n *   constructor() {\n *     super();\n *     const ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});\n *     this.state = {\n *       dataSource: ds.cloneWithRows(['row 1', 'row 2']),\n *     };\n *   }\n *\n *   render() {\n *     return (\n *       <ListView\n *         dataSource={this.state.dataSource}\n *         renderRow={(rowData) => <Text>{rowData}</Text>}\n *       />\n *     );\n *   }\n * }\n * ```\n *\n * ListView also supports more advanced features, including sections with sticky\n * section headers, header and footer support, callbacks on reaching the end of\n * the available data (`onEndReached`) and on the set of rows that are visible\n * in the device viewport change (`onChangeVisibleRows`), and several\n * performance optimizations.\n *\n * There are a few performance operations designed to make ListView scroll\n * smoothly while dynamically loading potentially very large (or conceptually\n * infinite) data sets:\n *\n *  * Only re-render changed rows - the rowHasChanged function provided to the\n *    data source tells the ListView if it needs to re-render a row because the\n *    source data has changed - see ListViewDataSource for more details.\n *\n *  * Rate-limited row rendering - By default, only one row is rendered per\n *    event-loop (customizable with the `pageSize` prop). This breaks up the\n *    work into smaller chunks to reduce the chance of dropping frames while\n *    rendering rows.\n */\n\nvar ListView = createReactClass({\n  displayName: 'ListView',\n  _childFrames: [],\n  _sentEndForContentLength: null,\n  _scrollComponent: null,\n  _prevRenderedRowsCount: 0,\n  _visibleRows: {},\n  scrollProperties: {},\n\n  mixins: [ScrollResponder.Mixin, TimerMixin],\n\n  statics: {\n    DataSource: ListViewDataSource\n  },\n\n  /**\n   * You must provide a renderRow function. If you omit any of the other render\n   * functions, ListView will simply skip rendering them.\n   *\n   * - renderRow(rowData, sectionID, rowID, highlightRow);\n   * - renderSectionHeader(sectionData, sectionID);\n   */\n  propTypes: Object.assign({}, ScrollView.propTypes, {\n    /**\n     * An instance of [ListView.DataSource](docs/listviewdatasource.html) to use\n     */\n    dataSource: PropTypes.instanceOf(ListViewDataSource).isRequired,\n    /**\n     * (sectionID, rowID, adjacentRowHighlighted) => renderable\n     *\n     * If provided, a renderable component to be rendered as the separator\n     * below each row but not the last row if there is a section header below.\n     * Take a sectionID and rowID of the row above and whether its adjacent row\n     * is highlighted.\n     */\n    renderSeparator: PropTypes.func,\n    /**\n     * (rowData, sectionID, rowID, highlightRow) => renderable\n     *\n     * Takes a data entry from the data source and its ids and should return\n     * a renderable component to be rendered as the row. By default the data\n     * is exactly what was put into the data source, but it's also possible to\n     * provide custom extractors. ListView can be notified when a row is\n     * being highlighted by calling `highlightRow(sectionID, rowID)`. This\n     * sets a boolean value of adjacentRowHighlighted in renderSeparator, allowing you\n     * to control the separators above and below the highlighted row. The highlighted\n     * state of a row can be reset by calling highlightRow(null).\n     */\n    renderRow: PropTypes.func.isRequired,\n    /**\n     * How many rows to render on initial component mount. Use this to make\n     * it so that the first screen worth of data appears at one time instead of\n     * over the course of multiple frames.\n     */\n    initialListSize: PropTypes.number.isRequired,\n    /**\n     * Called when all rows have been rendered and the list has been scrolled\n     * to within onEndReachedThreshold of the bottom. The native scroll\n     * event is provided.\n     */\n    onEndReached: PropTypes.func,\n    /**\n     * Threshold in pixels (virtual, not physical) for calling onEndReached.\n     */\n    onEndReachedThreshold: PropTypes.number.isRequired,\n    /**\n     * Number of rows to render per event loop. Note: if your 'rows' are actually\n     * cells, i.e. they don't span the full width of your view (as in the\n     * ListViewGridLayoutExample), you should set the pageSize to be a multiple\n     * of the number of cells per row, otherwise you're likely to see gaps at\n     * the edge of the ListView as new pages are loaded.\n     */\n    pageSize: PropTypes.number.isRequired,\n    /**\n     * () => renderable\n     *\n     * The header and footer are always rendered (if these props are provided)\n     * on every render pass. If they are expensive to re-render, wrap them\n     * in StaticContainer or other mechanism as appropriate. Footer is always\n     * at the bottom of the list, and header at the top, on every render pass.\n     * In a horizontal ListView, the header is rendered on the left and the\n     * footer on the right.\n     */\n    renderFooter: PropTypes.func,\n    renderHeader: PropTypes.func,\n    /**\n     * (sectionData, sectionID) => renderable\n     *\n     * If provided, a header is rendered for this section.\n     */\n    renderSectionHeader: PropTypes.func,\n    /**\n     * (props) => renderable\n     *\n     * A function that returns the scrollable component in which the list rows\n     * are rendered. Defaults to returning a ScrollView with the given props.\n     */\n    renderScrollComponent: PropTypes.func.isRequired,\n    /**\n     * How early to start rendering rows before they come on screen, in\n     * pixels.\n     */\n    scrollRenderAheadDistance: PropTypes.number.isRequired,\n    /**\n     * (visibleRows, changedRows) => void\n     *\n     * Called when the set of visible rows changes. `visibleRows` maps\n     * { sectionID: { rowID: true }} for all the visible rows, and\n     * `changedRows` maps { sectionID: { rowID: true | false }} for the rows\n     * that have changed their visibility, with true indicating visible, and\n     * false indicating the view has moved out of view.\n     */\n    onChangeVisibleRows: PropTypes.func,\n    /**\n     * A performance optimization for improving scroll perf of\n     * large lists, used in conjunction with overflow: 'hidden' on the row\n     * containers. This is enabled by default.\n     */\n    removeClippedSubviews: PropTypes.bool,\n    /**\n     * Makes the sections headers sticky. The sticky behavior means that it\n     * will scroll with the content at the top of the section until it reaches\n     * the top of the screen, at which point it will stick to the top until it\n     * is pushed off the screen by the next section header. This property is\n     * not supported in conjunction with `horizontal={true}`. Only enabled by\n     * default on iOS because of typical platform standards.\n     */\n    stickySectionHeadersEnabled: PropTypes.bool,\n    /**\n     * An array of child indices determining which children get docked to the\n     * top of the screen when scrolling. For example, passing\n     * `stickyHeaderIndices={[0]}` will cause the first child to be fixed to the\n     * top of the scroll view. This property is not supported in conjunction\n     * with `horizontal={true}`.\n     */\n    stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number).isRequired,\n    /**\n     * Flag indicating whether empty section headers should be rendered. In the future release\n     * empty section headers will be rendered by default, and the flag will be deprecated.\n     * If empty sections are not desired to be rendered their indices should be excluded from sectionID object.\n     */\n    enableEmptySections: PropTypes.bool\n  }),\n\n  /**\n   * Exports some data, e.g. for perf investigations or analytics.\n   */\n  getMetrics: function getMetrics() {\n    return {\n      contentLength: this.scrollProperties.contentLength,\n      totalRows: this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount(),\n      renderedRows: this.state.curRenderedRowsCount,\n      visibleRows: Object.keys(this._visibleRows).length\n    };\n  },\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   * Note that `this._scrollComponent` might not be a `ScrollView`, so we\n   * need to check that it responds to `getScrollResponder` before calling it.\n   */\n  getScrollResponder: function getScrollResponder() {\n    if (this._scrollComponent && this._scrollComponent.getScrollResponder) {\n      return this._scrollComponent.getScrollResponder();\n    }\n  },\n\n  getScrollableNode: function getScrollableNode() {\n    if (this._scrollComponent && this._scrollComponent.getScrollableNode) {\n      return this._scrollComponent.getScrollableNode();\n    } else {\n      return findNodeHandle(this._scrollComponent);\n    }\n  },\n\n  /**\n   * Scrolls to a given x, y offset, either immediately or with a smooth animation.\n   *\n   * See `ScrollView#scrollTo`.\n   */\n  scrollTo: function scrollTo() {\n    if (this._scrollComponent && this._scrollComponent.scrollTo) {\n      var _scrollComponent;\n\n      (_scrollComponent = this._scrollComponent).scrollTo.apply(_scrollComponent, arguments);\n    }\n  },\n\n  /**\n   * If this is a vertical ListView scrolls to the bottom.\n   * If this is a horizontal ListView scrolls to the right.\n   *\n   * Use `scrollToEnd({animated: true})` for smooth animated scrolling,\n   * `scrollToEnd({animated: false})` for immediate scrolling.\n   * If no options are passed, `animated` defaults to true.\n   *\n   * See `ScrollView#scrollToEnd`.\n   */\n  scrollToEnd: function scrollToEnd(options) {\n    if (this._scrollComponent) {\n      if (this._scrollComponent.scrollToEnd) {\n        this._scrollComponent.scrollToEnd(options);\n      } else {\n        console.warn('The scroll component used by the ListView does not support ' + 'scrollToEnd. Check the renderScrollComponent prop of your ListView.');\n      }\n    }\n  },\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators: function flashScrollIndicators() {\n    if (this._scrollComponent && this._scrollComponent.flashScrollIndicators) {\n      this._scrollComponent.flashScrollIndicators();\n    }\n  },\n\n  setNativeProps: function setNativeProps(props) {\n    if (this._scrollComponent) {\n      this._scrollComponent.setNativeProps(props);\n    }\n  },\n\n  /**\n   * React life cycle hooks.\n   */\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      initialListSize: DEFAULT_INITIAL_ROWS,\n      pageSize: DEFAULT_PAGE_SIZE,\n      renderScrollComponent: function renderScrollComponent(props) {\n        return React.createElement(ScrollView, props);\n      },\n      scrollRenderAheadDistance: DEFAULT_SCROLL_RENDER_AHEAD,\n      onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,\n      stickySectionHeadersEnabled: Platform.OS === 'ios' || Platform.OS === 'web',\n      stickyHeaderIndices: []\n    };\n  },\n\n  getInitialState: function getInitialState() {\n    return {\n      curRenderedRowsCount: this.props.initialListSize,\n      highlightedRow: {}\n    };\n  },\n\n  getInnerViewNode: function getInnerViewNode() {\n    return this._scrollComponent.getInnerViewNode();\n  },\n\n  UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {\n    // this data should never trigger a render pass, so don't put in state\n    this.scrollProperties = {\n      visibleLength: null,\n      contentLength: null,\n      offset: 0\n    };\n    this._childFrames = [];\n    this._visibleRows = {};\n    this._prevRenderedRowsCount = 0;\n    this._sentEndForContentLength = null;\n  },\n\n  componentDidMount: function componentDidMount() {\n    var _this = this;\n\n    // do this in animation frame until componentDidMount actually runs after\n    // the component is laid out\n    this.requestAnimationFrame(function () {\n      _this._measureAndUpdateScrollProps();\n    });\n  },\n\n  UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {\n    var _this2 = this;\n\n    if (this.props.dataSource !== nextProps.dataSource || this.props.initialListSize !== nextProps.initialListSize) {\n      this.setState(function (state, props) {\n        _this2._prevRenderedRowsCount = 0;\n        return {\n          curRenderedRowsCount: Math.min(Math.max(state.curRenderedRowsCount, props.initialListSize), props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount())\n        };\n      }, function () {\n        return _this2._renderMoreRowsIfNeeded();\n      });\n    }\n  },\n\n  componentDidUpdate: function componentDidUpdate() {\n    var _this3 = this;\n\n    this.requestAnimationFrame(function () {\n      _this3._measureAndUpdateScrollProps();\n    });\n  },\n\n  _onRowHighlighted: function _onRowHighlighted(sectionID, rowID) {\n    this.setState({ highlightedRow: { sectionID: sectionID, rowID: rowID } });\n  },\n\n  render: function render() {\n    var bodyComponents = [];\n\n    var dataSource = this.props.dataSource;\n    var allRowIDs = dataSource.rowIdentities;\n    var rowCount = 0;\n    var stickySectionHeaderIndices = [];\n\n    var renderSectionHeader = this.props.renderSectionHeader;\n\n\n    var header = this.props.renderHeader && this.props.renderHeader();\n    var footer = this.props.renderFooter && this.props.renderFooter();\n    var totalIndex = header ? 1 : 0;\n\n    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n      var sectionID = dataSource.sectionIdentities[sectionIdx];\n      var rowIDs = allRowIDs[sectionIdx];\n      if (rowIDs.length === 0) {\n        if (this.props.enableEmptySections === undefined) {\n          /* $FlowFixMe(>=0.54.0 site=react_native_oss) This comment suppresses\n           * an error found when Flow v0.54 was deployed. To see the error\n           * delete this comment and run Flow. */\n          var warning = require('fbjs/lib/warning');\n          warning(false, 'In next release empty section headers will be rendered.' + \" In this release you can use 'enableEmptySections' flag to render empty section headers.\");\n          continue;\n        } else {\n          var invariant = require('fbjs/lib/invariant');\n          invariant(this.props.enableEmptySections, \"In next release 'enableEmptySections' flag will be deprecated, empty section headers will always be rendered.\" + ' If empty section headers are not desirable their indices should be excluded from sectionIDs object.' + \" In this release 'enableEmptySections' may only have value 'true' to allow empty section headers rendering.\");\n        }\n      }\n\n      if (renderSectionHeader) {\n        var element = renderSectionHeader(dataSource.getSectionHeaderData(sectionIdx), sectionID);\n        if (element) {\n          bodyComponents.push(React.cloneElement(element, { key: 's_' + sectionID }));\n          if (this.props.stickySectionHeadersEnabled) {\n            stickySectionHeaderIndices.push(totalIndex);\n          }\n          totalIndex++;\n        }\n      }\n\n      for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {\n        var rowID = rowIDs[rowIdx];\n        var comboID = sectionID + '_' + rowID;\n        var shouldUpdateRow = rowCount >= this._prevRenderedRowsCount && dataSource.rowShouldUpdate(sectionIdx, rowIdx);\n        var row = React.createElement(StaticRenderer, {\n          key: 'r_' + comboID,\n          shouldUpdate: !!shouldUpdateRow,\n          render: this.props.renderRow.bind(null, dataSource.getRowData(sectionIdx, rowIdx), sectionID, rowID, this._onRowHighlighted)\n        });\n        bodyComponents.push(row);\n        totalIndex++;\n\n        if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {\n          var adjacentRowHighlighted = this.state.highlightedRow.sectionID === sectionID && (this.state.highlightedRow.rowID === rowID || this.state.highlightedRow.rowID === rowIDs[rowIdx + 1]);\n          var separator = this.props.renderSeparator(sectionID, rowID, adjacentRowHighlighted);\n          if (separator) {\n            bodyComponents.push(React.createElement(\n              View,\n              { key: 's_' + comboID },\n              separator\n            ));\n            totalIndex++;\n          }\n        }\n        if (++rowCount === this.state.curRenderedRowsCount) {\n          break;\n        }\n      }\n      if (rowCount >= this.state.curRenderedRowsCount) {\n        break;\n      }\n    }\n\n    var _props = this.props,\n        renderScrollComponent = _props.renderScrollComponent,\n        props = _objectWithoutProperties(_props, ['renderScrollComponent']);\n\n    if (!props.scrollEventThrottle) {\n      props.scrollEventThrottle = DEFAULT_SCROLL_CALLBACK_THROTTLE;\n    }\n    if (props.removeClippedSubviews === undefined) {\n      props.removeClippedSubviews = true;\n    }\n    Object.assign(props, {\n      onScroll: this._onScroll,\n      stickyHeaderIndices: this.props.stickyHeaderIndices.concat(stickySectionHeaderIndices),\n\n      // Do not pass these events downstream to ScrollView since they will be\n      // registered in ListView's own ScrollResponder.Mixin\n      onKeyboardWillShow: undefined,\n      onKeyboardWillHide: undefined,\n      onKeyboardDidShow: undefined,\n      onKeyboardDidHide: undefined\n    });\n\n    return cloneReferencedElement(renderScrollComponent(props), {\n      ref: this._setScrollComponentRef,\n      onContentSizeChange: this._onContentSizeChange,\n      onLayout: this._onLayout,\n      DEPRECATED_sendUpdatedChildFrames: typeof props.onChangeVisibleRows !== undefined\n    }, header, bodyComponents, footer);\n  },\n\n  /**\n   * Private methods\n   */\n\n  _measureAndUpdateScrollProps: function _measureAndUpdateScrollProps() {\n    var scrollComponent = this.getScrollResponder();\n    if (!scrollComponent || !scrollComponent.getInnerViewNode) {\n      return;\n    }\n\n    // RCTScrollViewManager.calculateChildFrames is not available on\n    // every platform\n    RCTScrollViewManager && RCTScrollViewManager.calculateChildFrames && RCTScrollViewManager.calculateChildFrames(findNodeHandle(scrollComponent), this._updateVisibleRows);\n  },\n\n  _setScrollComponentRef: function _setScrollComponentRef(scrollComponent) {\n    this._scrollComponent = scrollComponent;\n  },\n\n  _onContentSizeChange: function _onContentSizeChange(width, height) {\n    var contentLength = !this.props.horizontal ? height : width;\n    if (contentLength !== this.scrollProperties.contentLength) {\n      this.scrollProperties.contentLength = contentLength;\n      this._updateVisibleRows();\n      this._renderMoreRowsIfNeeded();\n    }\n    this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);\n  },\n\n  _onLayout: function _onLayout(event) {\n    var _event$nativeEvent$la = event.nativeEvent.layout,\n        width = _event$nativeEvent$la.width,\n        height = _event$nativeEvent$la.height;\n\n    var visibleLength = !this.props.horizontal ? height : width;\n    if (visibleLength !== this.scrollProperties.visibleLength) {\n      this.scrollProperties.visibleLength = visibleLength;\n      this._updateVisibleRows();\n      this._renderMoreRowsIfNeeded();\n    }\n    this.props.onLayout && this.props.onLayout(event);\n  },\n\n  _maybeCallOnEndReached: function _maybeCallOnEndReached(event) {\n    if (this.props.onEndReached && this.scrollProperties.contentLength !== this._sentEndForContentLength && this._getDistanceFromEnd(this.scrollProperties) < this.props.onEndReachedThreshold && this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {\n      this._sentEndForContentLength = this.scrollProperties.contentLength;\n      this.props.onEndReached(event);\n      return true;\n    }\n    return false;\n  },\n\n  _renderMoreRowsIfNeeded: function _renderMoreRowsIfNeeded() {\n    if (this.scrollProperties.contentLength === null || this.scrollProperties.visibleLength === null || this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {\n      this._maybeCallOnEndReached();\n      return;\n    }\n\n    var distanceFromEnd = this._getDistanceFromEnd(this.scrollProperties);\n    if (distanceFromEnd < this.props.scrollRenderAheadDistance) {\n      this._pageInNewRows();\n    }\n  },\n\n  _pageInNewRows: function _pageInNewRows() {\n    var _this4 = this;\n\n    this.setState(function (state, props) {\n      var rowsToRender = Math.min(state.curRenderedRowsCount + props.pageSize, props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount());\n      _this4._prevRenderedRowsCount = state.curRenderedRowsCount;\n      return {\n        curRenderedRowsCount: rowsToRender\n      };\n    }, function () {\n      _this4._measureAndUpdateScrollProps();\n      _this4._prevRenderedRowsCount = _this4.state.curRenderedRowsCount;\n    });\n  },\n\n  _getDistanceFromEnd: function _getDistanceFromEnd(scrollProperties) {\n    return scrollProperties.contentLength - scrollProperties.visibleLength - scrollProperties.offset;\n  },\n\n  _updateVisibleRows: function _updateVisibleRows(updatedFrames) {\n    var _this5 = this;\n\n    if (!this.props.onChangeVisibleRows) {\n      return; // No need to compute visible rows if there is no callback\n    }\n    if (updatedFrames) {\n      updatedFrames.forEach(function (newFrame) {\n        _this5._childFrames[newFrame.index] = merge(newFrame);\n      });\n    }\n    var isVertical = !this.props.horizontal;\n    var dataSource = this.props.dataSource;\n    var visibleMin = this.scrollProperties.offset;\n    var visibleMax = visibleMin + this.scrollProperties.visibleLength;\n    var allRowIDs = dataSource.rowIdentities;\n\n    var header = this.props.renderHeader && this.props.renderHeader();\n    var totalIndex = header ? 1 : 0;\n    var visibilityChanged = false;\n    var changedRows = {};\n    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n      var rowIDs = allRowIDs[sectionIdx];\n      if (rowIDs.length === 0) {\n        continue;\n      }\n      var sectionID = dataSource.sectionIdentities[sectionIdx];\n      if (this.props.renderSectionHeader) {\n        totalIndex++;\n      }\n      var visibleSection = this._visibleRows[sectionID];\n      if (!visibleSection) {\n        visibleSection = {};\n      }\n      for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {\n        var rowID = rowIDs[rowIdx];\n        var frame = this._childFrames[totalIndex];\n        totalIndex++;\n        if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {\n          totalIndex++;\n        }\n        if (!frame) {\n          break;\n        }\n        var rowVisible = visibleSection[rowID];\n        var min = isVertical ? frame.y : frame.x;\n        var max = min + (isVertical ? frame.height : frame.width);\n        if (!min && !max || min === max) {\n          break;\n        }\n        if (min > visibleMax || max < visibleMin) {\n          if (rowVisible) {\n            visibilityChanged = true;\n            delete visibleSection[rowID];\n            if (!changedRows[sectionID]) {\n              changedRows[sectionID] = {};\n            }\n            changedRows[sectionID][rowID] = false;\n          }\n        } else if (!rowVisible) {\n          visibilityChanged = true;\n          visibleSection[rowID] = true;\n          if (!changedRows[sectionID]) {\n            changedRows[sectionID] = {};\n          }\n          changedRows[sectionID][rowID] = true;\n        }\n      }\n      if (!isEmpty(visibleSection)) {\n        this._visibleRows[sectionID] = visibleSection;\n      } else if (this._visibleRows[sectionID]) {\n        delete this._visibleRows[sectionID];\n      }\n    }\n    visibilityChanged && this.props.onChangeVisibleRows(this._visibleRows, changedRows);\n  },\n\n  _onScroll: function _onScroll(e) {\n    var isVertical = !this.props.horizontal;\n    this.scrollProperties.visibleLength = e.nativeEvent.layoutMeasurement[isVertical ? 'height' : 'width'];\n    this.scrollProperties.contentLength = e.nativeEvent.contentSize[isVertical ? 'height' : 'width'];\n    this.scrollProperties.offset = e.nativeEvent.contentOffset[isVertical ? 'y' : 'x'];\n    this._updateVisibleRows(e.nativeEvent.updatedChildFrames);\n    if (!this._maybeCallOnEndReached(e)) {\n      this._renderMoreRowsIfNeeded();\n    }\n\n    if (this.props.onEndReached && this._getDistanceFromEnd(this.scrollProperties) > this.props.onEndReachedThreshold) {\n      // Scrolled out of the end zone, so it should be able to trigger again.\n      this._sentEndForContentLength = null;\n    }\n\n    this.props.onScroll && this.props.onScroll(e);\n  }\n});\n\nexport default ListView;"],"mappings":"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"},"metadata":{},"sourceType":"script"}