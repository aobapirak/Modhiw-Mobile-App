{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _TextInputOutlined = _interopRequireDefault(require(\"./TextInputOutlined\"));\nvar _TextInputFlat = _interopRequireDefault(require(\"./TextInputFlat\"));\nvar _TextInputIcon = _interopRequireDefault(require(\"./Adornment/TextInputIcon\"));\nvar _TextInputAffix = _interopRequireDefault(require(\"./Adornment/TextInputAffix\"));\nvar _theming = require(\"../../core/theming\");\nvar _excluded = [\"mode\", \"dense\", \"disabled\", \"error\", \"multiline\", \"editable\", \"render\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar BLUR_ANIMATION_DURATION = 180;\nvar FOCUS_ANIMATION_DURATION = 150;\n\nvar TextInput = React.forwardRef(function (_ref, ref) {\n  var _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? 'flat' : _ref$mode,\n    _ref$dense = _ref.dense,\n    dense = _ref$dense === void 0 ? false : _ref$dense,\n    _ref$disabled = _ref.disabled,\n    disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n    _ref$error = _ref.error,\n    errorProp = _ref$error === void 0 ? false : _ref$error,\n    _ref$multiline = _ref.multiline,\n    multiline = _ref$multiline === void 0 ? false : _ref$multiline,\n    _ref$editable = _ref.editable,\n    editable = _ref$editable === void 0 ? true : _ref$editable,\n    _ref$render = _ref.render,\n    render = _ref$render === void 0 ? function (props) {\n      return React.createElement(_reactNative.TextInput, props);\n    } : _ref$render,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var isControlled = rest.value !== undefined;\n  var validInputValue = isControlled ? rest.value : rest.defaultValue;\n  var _React$useRef = React.useRef(new _reactNative.Animated.Value(validInputValue ? 0 : 1)),\n    labeled = _React$useRef.current;\n  var _React$useRef2 = React.useRef(new _reactNative.Animated.Value(errorProp ? 1 : 0)),\n    error = _React$useRef2.current;\n  var _React$useState = React.useState(false),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n    focused = _React$useState2[0],\n    setFocused = _React$useState2[1];\n  var _React$useState3 = React.useState(' '),\n    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),\n    placeholder = _React$useState4[0],\n    setPlaceholder = _React$useState4[1];\n  var _React$useState5 = React.useState(validInputValue),\n    _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),\n    uncontrolledValue = _React$useState6[0],\n    setUncontrolledValue = _React$useState6[1];\n\n  var value = isControlled ? rest.value : uncontrolledValue;\n  var _React$useState7 = React.useState({\n      measured: false,\n      width: 0,\n      height: 0\n    }),\n    _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 2),\n    labelLayout = _React$useState8[0],\n    setLabelLayout = _React$useState8[1];\n  var _React$useState9 = React.useState({\n      width: null,\n      height: null\n    }),\n    _React$useState10 = (0, _slicedToArray2.default)(_React$useState9, 2),\n    leftLayout = _React$useState10[0],\n    setLeftLayout = _React$useState10[1];\n  var _React$useState11 = React.useState({\n      width: null,\n      height: null\n    }),\n    _React$useState12 = (0, _slicedToArray2.default)(_React$useState11, 2),\n    rightLayout = _React$useState12[0],\n    setRightLayout = _React$useState12[1];\n  var timer = React.useRef();\n  var root = React.useRef();\n  var scale = rest.theme.animation.scale;\n  React.useImperativeHandle(ref, function () {\n    return {\n      focus: function focus() {\n        var _root$current;\n        return (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.focus();\n      },\n      clear: function clear() {\n        var _root$current2;\n        return (_root$current2 = root.current) === null || _root$current2 === void 0 ? void 0 : _root$current2.clear();\n      },\n      setNativeProps: function setNativeProps(args) {\n        var _root$current3;\n        return (_root$current3 = root.current) === null || _root$current3 === void 0 ? void 0 : _root$current3.setNativeProps(args);\n      },\n      isFocused: function isFocused() {\n        var _root$current4;\n        return ((_root$current4 = root.current) === null || _root$current4 === void 0 ? void 0 : _root$current4.isFocused()) || false;\n      },\n      blur: function blur() {\n        var _root$current5;\n        return (_root$current5 = root.current) === null || _root$current5 === void 0 ? void 0 : _root$current5.blur();\n      },\n      forceFocus: function forceFocus() {\n        var _root$current6;\n        return (_root$current6 = root.current) === null || _root$current6 === void 0 ? void 0 : _root$current6.focus();\n      }\n    };\n  });\n  React.useEffect(function () {\n    if (errorProp) {\n      _reactNative.Animated.timing(error, {\n        toValue: 1,\n        duration: FOCUS_ANIMATION_DURATION * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      {\n        _reactNative.Animated.timing(error, {\n          toValue: 0,\n          duration: BLUR_ANIMATION_DURATION * scale,\n          useNativeDriver: true\n        }).start();\n      }\n    }\n  }, [errorProp, scale, error]);\n  React.useEffect(function () {\n    if (focused || !rest.label) {\n      timer.current = setTimeout(function () {\n        return setPlaceholder(rest.placeholder);\n      }, 50);\n    } else {\n      setPlaceholder(' ');\n    }\n    return function () {\n      if (timer.current) {\n        clearTimeout(timer.current);\n      }\n    };\n  }, [focused, rest.label, rest.placeholder]);\n  React.useEffect(function () {\n    if (value || focused) {\n      _reactNative.Animated.timing(labeled, {\n        toValue: 0,\n        duration: BLUR_ANIMATION_DURATION * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      {\n        _reactNative.Animated.timing(labeled, {\n          toValue: 1,\n          duration: FOCUS_ANIMATION_DURATION * scale,\n          useNativeDriver: true\n        }).start();\n      }\n    }\n  }, [focused, value, labeled, scale]);\n  var onLeftAffixLayoutChange = function onLeftAffixLayoutChange(event) {\n    setLeftLayout({\n      height: event.nativeEvent.layout.height,\n      width: event.nativeEvent.layout.width\n    });\n  };\n  var onRightAffixLayoutChange = function onRightAffixLayoutChange(event) {\n    setRightLayout({\n      width: event.nativeEvent.layout.width,\n      height: event.nativeEvent.layout.height\n    });\n  };\n  var handleFocus = function handleFocus(args) {\n    var _rest$onFocus;\n    if (disabled || !editable) {\n      return;\n    }\n    setFocused(true);\n    (_rest$onFocus = rest.onFocus) === null || _rest$onFocus === void 0 ? void 0 : _rest$onFocus.call(rest, args);\n  };\n  var handleBlur = function handleBlur(args) {\n    var _rest$onBlur;\n    if (!editable) {\n      return;\n    }\n    setFocused(false);\n    (_rest$onBlur = rest.onBlur) === null || _rest$onBlur === void 0 ? void 0 : _rest$onBlur.call(rest, args);\n  };\n  var handleChangeText = function handleChangeText(value) {\n    var _rest$onChangeText;\n    if (!editable || disabled) {\n      return;\n    }\n    if (!isControlled) {\n      setUncontrolledValue(value);\n    }\n    (_rest$onChangeText = rest.onChangeText) === null || _rest$onChangeText === void 0 ? void 0 : _rest$onChangeText.call(rest, value);\n  };\n  var handleLayoutAnimatedText = function handleLayoutAnimatedText(e) {\n    setLabelLayout({\n      width: e.nativeEvent.layout.width,\n      height: e.nativeEvent.layout.height,\n      measured: true\n    });\n  };\n  var forceFocus = function forceFocus() {\n    var _root$current7;\n    return (_root$current7 = root.current) === null || _root$current7 === void 0 ? void 0 : _root$current7.focus();\n  };\n  var _rest$maxFontSizeMult = rest.maxFontSizeMultiplier,\n    maxFontSizeMultiplier = _rest$maxFontSizeMult === void 0 ? 1.5 : _rest$maxFontSizeMult;\n  if (mode === 'outlined') {\n    return React.createElement(_TextInputOutlined.default, _extends({\n      dense: dense,\n      disabled: disabled,\n      error: errorProp,\n      multiline: multiline,\n      editable: editable,\n      render: render\n    }, rest, {\n      value: value,\n      parentState: {\n        labeled: labeled,\n        error: error,\n        focused: focused,\n        placeholder: placeholder,\n        value: value,\n        labelLayout: labelLayout,\n        leftLayout: leftLayout,\n        rightLayout: rightLayout\n      },\n      innerRef: function innerRef(ref) {\n        root.current = ref;\n      },\n      onFocus: handleFocus,\n      forceFocus: forceFocus,\n      onBlur: handleBlur,\n      onChangeText: handleChangeText,\n      onLayoutAnimatedText: handleLayoutAnimatedText,\n      onLeftAffixLayoutChange: onLeftAffixLayoutChange,\n      onRightAffixLayoutChange: onRightAffixLayoutChange,\n      maxFontSizeMultiplier: maxFontSizeMultiplier\n    }));\n  }\n  return React.createElement(_TextInputFlat.default, _extends({\n    dense: dense,\n    disabled: disabled,\n    error: errorProp,\n    multiline: multiline,\n    editable: editable,\n    render: render\n  }, rest, {\n    value: value,\n    parentState: {\n      labeled: labeled,\n      error: error,\n      focused: focused,\n      placeholder: placeholder,\n      value: value,\n      labelLayout: labelLayout,\n      leftLayout: leftLayout,\n      rightLayout: rightLayout\n    },\n    innerRef: function innerRef(ref) {\n      root.current = ref;\n    },\n    onFocus: handleFocus,\n    forceFocus: forceFocus,\n    onBlur: handleBlur,\n    onChangeText: handleChangeText,\n    onLayoutAnimatedText: handleLayoutAnimatedText,\n    onLeftAffixLayoutChange: onLeftAffixLayoutChange,\n    onRightAffixLayoutChange: onRightAffixLayoutChange,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }));\n});\n\nTextInput.Icon = _TextInputIcon.default;\n\nTextInput.Affix = _TextInputAffix.default;\nvar _default = (0, _theming.withTheme)(TextInput);\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;AAAA;AACA;AAOA;AACA;AACA;AAGA;AAGA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AAGA,IAAMA,uBAAuB,GAAG,GAAhC;AACA,IAAMC,wBAAwB,GAAG,GAAjC;;AA6KA,IAAMC,SAAS,GAAGC,KAAK,CAACC,UAAN,CAChB,gBAWEC,GAXF,EAYK;EAAA,qBAVDC,IAAI;IAAJA,IAAI,0BAAG,MADT;IAAA,aAWGC,KATDC,KAAK;IAALA,KAAK,2BAAG,KAFV;IAAA,gBAWGD,KARDE,QAAQ;IAARA,QAAQ,8BAAG,KAHb;IAAA,aAWGF,KAPDG,KAAK;IAAEC,SAAS,2BAAG,KAJrB;IAAA,iBAWGJ,KANDK,SAAS;IAATA,SAAS,+BAAG,KALd;IAAA,gBAWGL,KALDM,QAAQ;IAARA,QAAQ,8BAAG,IANb;IAAA,cAWGN,KAJDO,MAAM;IAANA,MAAM,4BAAIC,eAAD;MAAA,OAAwBZ,oBAACa,sBAAD,EAAqBD,KAArB,CAPnC;IAAA;IAQKE,8CAGFV;EACH,IAAMW,YAAY,GAAGD,IAAI,CAACE,KAAL,KAAeC,SAApC;EACA,IAAMC,eAAe,GAAGH,YAAY,GAAGD,IAAI,CAACE,KAAR,GAAgBF,IAAI,CAACK,YAAzD;EAEA,oBAA6BnB,KAAK,CAACoB,MAAN,CAC3B,IAAIC,qBAAQ,CAACC,KAAb,CAAmBJ,eAAe,GAAG,CAAH,GAAO,CAAzC,CAD2B,CAA7B;IAAiBK,wBAATC,OAAO;EAGf,qBAA2BxB,KAAK,CAACoB,MAAN,CACzB,IAAIC,qBAAQ,CAACC,KAAb,CAAmBd,SAAS,GAAG,CAAH,GAAO,CAAnC,CADyB,CAA3B;IAAiBD,uBAATiB,OAAO;EAGf,sBAA8BxB,KAAK,CAACyB,QAAN,CAAwB,KAAxB,CAA9B;IAAA;IAAOC,OAAD;IAAUC,UAAV;EACN,uBAAsC3B,KAAK,CAACyB,QAAN,CACpC,GADoC,CAAtC;IAAA;IAAOG,WAAD;IAAcC,cAAd;EAGN,uBAAkD7B,KAAK,CAACyB,QAAN,CAEhDP,eAFgD,CAAlD;IAAA;IAAOY,iBAAD;IAAoBC,oBAApB;;EAIN,IAAMf,KAAK,GAAGD,YAAY,GAAGD,IAAI,CAACE,KAAR,GAAgBc,iBAA1C;EAEA,uBAAsC9B,KAAK,CAACyB,QAAN,CAInC;MACDO,QAAQ,EAAE,KADT;MAEDC,KAAK,EAAE,CAFN;MAGDC,MAAM,EAAE;IAHP,CAJmC,CAAtC;IAAA;IAAOC,WAAD;IAAcC,cAAd;EASN,uBAAoCpC,KAAK,CAACyB,QAAN,CAGjC;MACDQ,KAAK,EAAE,IADN;MAEDC,MAAM,EAAE;IAFP,CAHiC,CAApC;IAAA;IAAOG,UAAD;IAAaC,aAAb;EAON,wBAAsCtC,KAAK,CAACyB,QAAN,CAGnC;MACDQ,KAAK,EAAE,IADN;MAEDC,MAAM,EAAE;IAFP,CAHmC,CAAtC;IAAA;IAAOK,WAAD;IAAcC,cAAd;EAQN,IAAMC,KAAK,GAAGzC,KAAK,CAACoB,MAAN,EAAd;EAEA,IAAMsB,IAAI,GAAG1C,KAAK,CAACoB,MAAN,EAAb;EAEA,IAAQuB,QAAU7B,IAAI,CAAC8B,KAAL,CAAWC,SAA7B,CAAQF;EAER3C,KAAK,CAAC8C,mBAAN,CAA0B5C,GAA1B,EAA+B;IAAA,OAAO;MACpC6C,KAAK,EAAE;QAAA;QAAA,wBAAML,IAAI,CAAClB,OAAX,kDAAMwB,cAAcD,KAAd,EAAN;MAAA,CAD6B;MAEpCE,KAAK,EAAE;QAAA;QAAA,yBAAMP,IAAI,CAAClB,OAAX,mDAAM0B,eAAcD,KAAd,EAAN;MAAA,CAF6B;MAGpCE,cAAc,EAAGC,4BAAD;QAAA;QAAA,yBAAkBV,IAAI,CAAClB,OAAvB,mDAAkB6B,eAAcF,cAAd,CAA6BC,IAA7B,CAAlB;MAAA,CAHoB;MAIpCE,SAAS,EAAE;QAAA;QAAA,OAAM,uBAAI,CAAC9B,OAAL,kEAAc8B,SAAd,OAA6B,KAAnC;MAAA,CAJyB;MAKpCC,IAAI,EAAE;QAAA;QAAA,yBAAMb,IAAI,CAAClB,OAAX,mDAAMgC,eAAcD,IAAd,EAAN;MAAA,CAL8B;MAMpCE,UAAU,EAAE;QAAA;QAAA,yBAAMf,IAAI,CAAClB,OAAX,mDAAMkC,eAAcX,KAAd,EAAN;MAAA;IANwB,CAAP;EAAA,CAA/B;EASA/C,KAAK,CAAC2D,SAAN,CAAgB,YAAM;IAEpB,IAAInD,SAAJ,EAAe;MAEba,qBAAQ,CAACuC,MAAT,CAAgBrD,KAAhB,EAAuB;QACrBsD,OAAO,EAAE,CADY;QAErBC,QAAQ,EAAEhE,wBAAwB,GAAG6C,KAFhB;QAIrBoB,eAAe,EAAE;MAJI,CAAvB,EAKGC,KALH;IAMD,CARD,MAQO;MAEL;QACE3C,qBAAQ,CAACuC,MAAT,CAAgBrD,KAAhB,EAAuB;UACrBsD,OAAO,EAAE,CADY;UAErBC,QAAQ,EAAEjE,uBAAuB,GAAG8C,KAFf;UAIrBoB,eAAe,EAAE;QAJI,CAAvB,EAKGC,KALH;MAMD;IACF;EACF,CArBD,EAqBG,CAACxD,SAAD,EAAYmC,KAAZ,EAAmBpC,KAAnB,CArBH;EAuBAP,KAAK,CAAC2D,SAAN,CAAgB,YAAM;IAIpB,IAAIjC,OAAO,IAAI,CAACZ,IAAI,CAACmD,KAArB,EAA4B;MAG1BxB,KAAK,CAACjB,OAAN,GAAgB0C,UAAU,CACxB;QAAA,OAAMrC,cAAc,CAACf,IAAI,CAACc,WAAN,CADI;MAAA,GAExB,EAFwB,CAA1B;IAID,CAPD,MAOO;MAULC,cAAc,CAAC,GAAD,CAAd;IACD;IAED,OAAO,YAAM;MACX,IAAIY,KAAK,CAACjB,OAAV,EAAmB;QACjB2C,YAAY,CAAC1B,KAAK,CAACjB,OAAP,CAAZ;MACD;IACF,CAJD;EAKD,CA7BD,EA6BG,CAACE,OAAD,EAAUZ,IAAI,CAACmD,KAAf,EAAsBnD,IAAI,CAACc,WAA3B,CA7BH;EA+BA5B,KAAK,CAAC2D,SAAN,CAAgB,YAAM;IAKpB,IAAI3C,KAAK,IAAIU,OAAb,EAAsB;MAEpBL,qBAAQ,CAACuC,MAAT,CAAgBrC,OAAhB,EAAyB;QACvBsC,OAAO,EAAE,CADc;QAEvBC,QAAQ,EAAEjE,uBAAuB,GAAG8C,KAFb;QAIvBoB,eAAe,EAAE;MAJM,CAAzB,EAKGC,KALH;IAMD,CARD,MAQO;MAEL;QACE3C,qBAAQ,CAACuC,MAAT,CAAgBrC,OAAhB,EAAyB;UACvBsC,OAAO,EAAE,CADc;UAEvBC,QAAQ,EAAEhE,wBAAwB,GAAG6C,KAFd;UAIvBoB,eAAe,EAAE;QAJM,CAAzB,EAKGC,KALH;MAMD;IACF;EACF,CAxBD,EAwBG,CAACtC,OAAD,EAAUV,KAAV,EAAiBO,OAAjB,EAA0BoB,KAA1B,CAxBH;EA0BA,IAAMyB,uBAAuB,GAAIC,SAA3BD,uBAAuB,CAAIC,KAAD,EAA8B;IAC5D/B,aAAa,CAAC;MACZJ,MAAM,EAAEmC,KAAK,CAACC,WAAN,CAAkBC,MAAlB,CAAyBrC,MADrB;MAEZD,KAAK,EAAEoC,KAAK,CAACC,WAAN,CAAkBC,MAAlB,CAAyBtC;IAFpB,CAAD,CAAb;EAID,CALD;EAOA,IAAMuC,wBAAwB,GAAIH,SAA5BG,wBAAwB,CAAIH,KAAD,EAA8B;IAC7D7B,cAAc,CAAC;MACbP,KAAK,EAAEoC,KAAK,CAACC,WAAN,CAAkBC,MAAlB,CAAyBtC,KADnB;MAEbC,MAAM,EAAEmC,KAAK,CAACC,WAAN,CAAkBC,MAAlB,CAAyBrC;IAFpB,CAAD,CAAd;EAID,CALD;EAOA,IAAMuC,WAAW,GAAIrB,SAAfqB,WAAW,CAAIrB,IAAD,EAAe;IAAA;IACjC,IAAI9C,QAAQ,IAAI,CAACI,QAAjB,EAA2B;MACzB;IACD;IAEDiB,UAAU,CAAC,IAAD,CAAV;IAEA,qBAAI,CAAC+C,OAAL,yEAAI,EAAWtB,IAAX,CAAJ;EACD,CARD;EAUA,IAAMuB,UAAU,GAAIvB,SAAduB,UAAU,CAAIvB,IAAD,EAAkB;IAAA;IACnC,IAAI,CAAC1C,QAAL,EAAe;MACb;IACD;IAEDiB,UAAU,CAAC,KAAD,CAAV;IACA,oBAAI,CAACiD,MAAL,uEAAI,EAAUxB,IAAV,CAAJ;EACD,CAPD;EASA,IAAMyB,gBAAgB,GAAI7D,SAApB6D,gBAAgB,CAAI7D,KAAD,EAAmB;IAAA;IAC1C,IAAI,CAACN,QAAD,IAAaJ,QAAjB,EAA2B;MACzB;IACD;IAED,IAAI,CAACS,YAAL,EAAmB;MAEjBgB,oBAAoB,CAACf,KAAD,CAApB;IACD;IACD,0BAAI,CAAC8D,YAAL,mFAAI,EAAgB9D,KAAhB,CAAJ;EACD,CAVD;EAYA,IAAM+D,wBAAwB,GAAIC,SAA5BD,wBAAwB,CAAIC,CAAD,EAA0B;IACzD5C,cAAc,CAAC;MACbH,KAAK,EAAE+C,CAAC,CAACV,WAAF,CAAcC,MAAd,CAAqBtC,KADf;MAEbC,MAAM,EAAE8C,CAAC,CAACV,WAAF,CAAcC,MAAd,CAAqBrC,MAFhB;MAGbF,QAAQ,EAAE;IAHG,CAAD,CAAd;EAKD,CAND;EAOA,IAAMyB,UAAU,GAAG,SAAbA,UAAU,GAAG;IAAA;IAAA,yBAAMf,IAAI,CAAClB,OAAX,mDAAMyD,eAAclC,KAAd,EAAN;EAAA,CAAnB;EAEA,4BAAwCjC,IAAxC,CAAQoE,qBAAqB;IAArBA,qBAAqB,sCAAG;EAEhC,IAAI/E,IAAI,KAAK,UAAb,EAAyB;IACvB,OACEH,oBAACmF,0BAAD;MACE9E,KAAK,EAAEA,KADT;MAEEC,QAAQ,EAAEA,QAFZ;MAGEC,KAAK,EAAEC,SAHT;MAIEC,SAAS,EAAEA,SAJb;MAKEC,QAAQ,EAAEA,QALZ;MAMEC,MAAM,EAAEA;IANV,GAOMG,IAPN;MAQEE,KAAK,EAAEA,KART;MASEoE,WAAW,EAAE;QACX7D,OADW,EACXA,OADW;QAEXhB,KAFW,EAEXA,KAFW;QAGXmB,OAHW,EAGXA,OAHW;QAIXE,WAJW,EAIXA,WAJW;QAKXZ,KALW,EAKXA,KALW;QAMXmB,WANW,EAMXA,WANW;QAOXE,UAPW,EAOXA,UAPW;QAQXE;MARW,CATf;MAmBE8C,QAAQ,EAAGnF,qBAAD,EAAS;QACjBwC,IAAI,CAAClB,OAAL,GAAetB,GAAf;MACD,CArBH;MAsBEwE,OAAO,EAAED,WAtBX;MAuBEhB,UAAU,EAAEA,UAvBd;MAwBEmB,MAAM,EAAED,UAxBV;MAyBEG,YAAY,EAAED,gBAzBhB;MA0BES,oBAAoB,EAAEP,wBA1BxB;MA2BEX,uBAAuB,EAAEA,uBA3B3B;MA4BEI,wBAAwB,EAAEA,wBA5B5B;MA6BEU,qBAAqB,EAAEA;IA7BzB,GADF;EAiCD;EAED,OACElF,oBAACuF,sBAAD;IACElF,KAAK,EAAEA,KADT;IAEEC,QAAQ,EAAEA,QAFZ;IAGEC,KAAK,EAAEC,SAHT;IAIEC,SAAS,EAAEA,SAJb;IAKEC,QAAQ,EAAEA,QALZ;IAMEC,MAAM,EAAEA;EANV,GAOMG,IAPN;IAQEE,KAAK,EAAEA,KART;IASEoE,WAAW,EAAE;MACX7D,OADW,EACXA,OADW;MAEXhB,KAFW,EAEXA,KAFW;MAGXmB,OAHW,EAGXA,OAHW;MAIXE,WAJW,EAIXA,WAJW;MAKXZ,KALW,EAKXA,KALW;MAMXmB,WANW,EAMXA,WANW;MAOXE,UAPW,EAOXA,UAPW;MAQXE;IARW,CATf;IAmBE8C,QAAQ,EAAGnF,qBAAD,EAAS;MACjBwC,IAAI,CAAClB,OAAL,GAAetB,GAAf;IACD,CArBH;IAsBEwE,OAAO,EAAED,WAtBX;IAuBEhB,UAAU,EAAEA,UAvBd;IAwBEmB,MAAM,EAAED,UAxBV;IAyBEG,YAAY,EAAED,gBAzBhB;IA0BES,oBAAoB,EAAEP,wBA1BxB;IA2BEX,uBAAuB,EAAEA,uBA3B3B;IA4BEI,wBAAwB,EAAEA,wBA5B5B;IA6BEU,qBAAqB,EAAEA;EA7BzB,GADF;AAiCD,CArRe,CAAlB;;AAwRAnF,SAAS,CAACyF,IAAV,GAAiBC,sBAAjB;;AAIA1F,SAAS,CAAC2F,KAAV,GAAkBC,uBAAlB;AAAA,eAEeC,sBAAS,EAAC7F,SAAD,CAAxB;AAAA","names":["BLUR_ANIMATION_DURATION","FOCUS_ANIMATION_DURATION","TextInput","React","forwardRef","ref","mode","_ref","dense","disabled","error","errorProp","multiline","editable","render","props","NativeTextInput","rest","isControlled","value","undefined","validInputValue","defaultValue","useRef","Animated","Value","labeled","current","useState","focused","setFocused","placeholder","setPlaceholder","uncontrolledValue","setUncontrolledValue","measured","width","height","labelLayout","setLabelLayout","leftLayout","setLeftLayout","rightLayout","setRightLayout","timer","root","scale","theme","animation","useImperativeHandle","focus","_root$current","clear","_root$current2","setNativeProps","args","_root$current3","isFocused","blur","_root$current5","forceFocus","_root$current6","useEffect","timing","toValue","duration","useNativeDriver","start","label","setTimeout","clearTimeout","onLeftAffixLayoutChange","event","nativeEvent","layout","onRightAffixLayoutChange","handleFocus","onFocus","handleBlur","onBlur","handleChangeText","onChangeText","handleLayoutAnimatedText","e","_root$current7","maxFontSizeMultiplier","TextInputOutlined","parentState","innerRef","onLayoutAnimatedText","TextInputFlat","Icon","TextInputIcon","Affix","TextInputAffix","withTheme"],"sources":["TextInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  TextInput as NativeTextInput,\n  LayoutChangeEvent,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport TextInputOutlined from './TextInputOutlined';\nimport TextInputFlat from './TextInputFlat';\nimport TextInputIcon, {\n  Props as TextInputIconProps,\n} from './Adornment/TextInputIcon';\nimport TextInputAffix, {\n  Props as TextInputAffixProps,\n} from './Adornment/TextInputAffix';\nimport { withTheme } from '../../core/theming';\nimport type { RenderProps, TextInputLabelProp } from './types';\n\nconst BLUR_ANIMATION_DURATION = 180;\nconst FOCUS_ANIMATION_DURATION = 150;\n\nexport type Props = React.ComponentPropsWithRef<typeof NativeTextInput> & {\n  /**\n   * Mode of the TextInput.\n   * - `flat` - flat input with an underline.\n   * - `outlined` - input with an outline.\n   *\n   * In `outlined` mode, the background color of the label is derived from `colors.background` in theme or the `backgroundColor` style.\n   * This component render TextInputOutlined or TextInputFlat based on that props\n   */\n  mode?: 'flat' | 'outlined';\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  /**\n   * If true, user won't be able to interact with the component.\n   */\n  disabled?: boolean;\n  /**\n   * The text or component to use for the floating label.\n   */\n  label?: TextInputLabelProp;\n  /**\n   * Placeholder for the input.\n   */\n  placeholder?: string;\n  /**\n   * Whether to style the TextInput with error style.\n   */\n  error?: boolean;\n  /**\n   * Callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.\n   */\n  onChangeText?: Function;\n  /**\n   * Selection color of the input\n   */\n  selectionColor?: string;\n  /**\n   * Inactive underline color of the input.\n   */\n  underlineColor?: string;\n  /**\n   * Active underline color of the input.\n   */\n  activeUnderlineColor?: string;\n  /**\n   * Inactive outline color of the input.\n   */\n  outlineColor?: string;\n  /**\n   * Active outline color of the input.\n   */\n  activeOutlineColor?: string;\n  /**\n   * Sets min height with densed layout. For `TextInput` in `flat` mode\n   * height is `64dp` or in dense layout - `52dp` with label or `40dp` without label.\n   * For `TextInput` in `outlined` mode\n   * height is `56dp` or in dense layout - `40dp` regardless of label.\n   * When you apply `height` prop in style the `dense` prop affects only `paddingVertical` inside `TextInput`\n   */\n  dense?: boolean;\n  /**\n   * Whether the input can have multiple lines.\n   */\n  multiline?: boolean;\n  /**\n   * The number of lines to show in the input (Android only).\n   */\n  numberOfLines?: number;\n  /**\n   * Callback that is called when the text input is focused.\n   */\n  onFocus?: (args: any) => void;\n  /**\n   * Callback that is called when the text input is blurred.\n   */\n  onBlur?: (args: any) => void;\n  /**\n   *\n   * Callback to render a custom input component such as `react-native-text-input-mask`\n   * instead of the default `TextInput` component from `react-native`.\n   *\n   * Example:\n   * ```js\n   * <TextInput\n   *   label=\"Phone number\"\n   *   render={props =>\n   *     <TextInputMask\n   *       {...props}\n   *       mask=\"+[00] [000] [000] [000]\"\n   *     />\n   *   }\n   * />\n   * ```\n   */\n  render?: (props: RenderProps) => React.ReactNode;\n  /**\n   * Value of the text input.\n   */\n  value?: string;\n  /**\n   * Pass `fontSize` prop to modify the font size inside `TextInput`.\n   * Pass `height` prop to set `TextInput` height. When `height` is passed,\n   * `dense` prop will affect only input's `paddingVertical`.\n   * Pass `paddingHorizontal` to modify horizontal padding.\n   * This can be used to get MD Guidelines v1 TextInput look.\n   */\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ninterface CompoundedComponent\n  extends React.ForwardRefExoticComponent<\n    Props & React.RefAttributes<TextInputHandles>\n  > {\n  Icon: React.FunctionComponent<TextInputIconProps>;\n  Affix: React.FunctionComponent<Partial<TextInputAffixProps>>;\n}\n\ntype TextInputHandles = Pick<\n  NativeTextInput,\n  'focus' | 'clear' | 'blur' | 'isFocused' | 'setNativeProps'\n>;\n\n/**\n * A component to allow users to input text.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.focused.png\" />\n *     <figcaption>Flat (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.disabled.png\" />\n *     <figcaption>Flat (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.focused.png\" />\n *     <figcaption>Outlined (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.disabled.png\" />\n *     <figcaption>Outlined (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState(\"\");\n *\n *   return (\n *     <TextInput\n *       label=\"Email\"\n *       value={text}\n *       onChangeText={text => setText(text)}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n *\n * @extends TextInput props https://reactnative.dev/docs/textinput#props\n */\n\nconst TextInput = React.forwardRef<TextInputHandles, Props>(\n  (\n    {\n      mode = 'flat',\n      dense = false,\n      disabled = false,\n      error: errorProp = false,\n      multiline = false,\n      editable = true,\n      render = (props: RenderProps) => <NativeTextInput {...props} />,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const isControlled = rest.value !== undefined;\n    const validInputValue = isControlled ? rest.value : rest.defaultValue;\n\n    const { current: labeled } = React.useRef<Animated.Value>(\n      new Animated.Value(validInputValue ? 0 : 1)\n    );\n    const { current: error } = React.useRef<Animated.Value>(\n      new Animated.Value(errorProp ? 1 : 0)\n    );\n    const [focused, setFocused] = React.useState<boolean>(false);\n    const [placeholder, setPlaceholder] = React.useState<string | undefined>(\n      ' '\n    );\n    const [uncontrolledValue, setUncontrolledValue] = React.useState<\n      string | undefined\n    >(validInputValue);\n    // Use value from props instead of local state when input is controlled\n    const value = isControlled ? rest.value : uncontrolledValue;\n\n    const [labelLayout, setLabelLayout] = React.useState<{\n      measured: boolean;\n      width: number;\n      height: number;\n    }>({\n      measured: false,\n      width: 0,\n      height: 0,\n    });\n    const [leftLayout, setLeftLayout] = React.useState<{\n      height: number | null;\n      width: number | null;\n    }>({\n      width: null,\n      height: null,\n    });\n    const [rightLayout, setRightLayout] = React.useState<{\n      height: number | null;\n      width: number | null;\n    }>({\n      width: null,\n      height: null,\n    });\n\n    const timer = React.useRef<NodeJS.Timeout | undefined>();\n\n    const root = React.useRef<NativeTextInput | undefined | null>();\n\n    const { scale } = rest.theme.animation;\n\n    React.useImperativeHandle(ref, () => ({\n      focus: () => root.current?.focus(),\n      clear: () => root.current?.clear(),\n      setNativeProps: (args: Object) => root.current?.setNativeProps(args),\n      isFocused: () => root.current?.isFocused() || false,\n      blur: () => root.current?.blur(),\n      forceFocus: () => root.current?.focus(),\n    }));\n\n    React.useEffect(() => {\n      // When the input has an error, we wiggle the label and apply error styles\n      if (errorProp) {\n        // show error\n        Animated.timing(error, {\n          toValue: 1,\n          duration: FOCUS_ANIMATION_DURATION * scale,\n          // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n          useNativeDriver: true,\n        }).start();\n      } else {\n        // hide error\n        {\n          Animated.timing(error, {\n            toValue: 0,\n            duration: BLUR_ANIMATION_DURATION * scale,\n            // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n            useNativeDriver: true,\n          }).start();\n        }\n      }\n    }, [errorProp, scale, error]);\n\n    React.useEffect(() => {\n      // Show placeholder text only if the input is focused, or there's no label\n      // We don't show placeholder if there's a label because the label acts as placeholder\n      // When focused, the label moves up, so we can show a placeholder\n      if (focused || !rest.label) {\n        // Set the placeholder in a delay to offset the label animation\n        // If we show it immediately, they'll overlap and look ugly\n        timer.current = setTimeout(\n          () => setPlaceholder(rest.placeholder),\n          50\n        ) as unknown as NodeJS.Timeout;\n      } else {\n        // hidePlaceholder\n\n        // Issue: https://github.com/callstack/react-native-paper/issues/3138\n        // Description:   Changing the placeholder text value dynamically,\n        //                within multiline input on iOS, doesn't work properly –\n        //                the placeholder is not displayed initially.\n        // Root cause:    Placeholder initial value, which has length 0.\n        // More context:  The issue was also reproduced in react-native, using its own TextInput.\n        // Workaround:    Set an empty space character in the default value.\n        setPlaceholder(' ');\n      }\n\n      return () => {\n        if (timer.current) {\n          clearTimeout(timer.current);\n        }\n      };\n    }, [focused, rest.label, rest.placeholder]);\n\n    React.useEffect(() => {\n      // The label should be minimized if the text input is focused, or has text\n      // In minimized mode, the label moves up and becomes small\n      // workaround for animated regression for react native > 0.61\n      // https://github.com/callstack/react-native-paper/pull/1440\n      if (value || focused) {\n        // minimize label\n        Animated.timing(labeled, {\n          toValue: 0,\n          duration: BLUR_ANIMATION_DURATION * scale,\n          // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n          useNativeDriver: true,\n        }).start();\n      } else {\n        // restore label\n        {\n          Animated.timing(labeled, {\n            toValue: 1,\n            duration: FOCUS_ANIMATION_DURATION * scale,\n            // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n            useNativeDriver: true,\n          }).start();\n        }\n      }\n    }, [focused, value, labeled, scale]);\n\n    const onLeftAffixLayoutChange = (event: LayoutChangeEvent) => {\n      setLeftLayout({\n        height: event.nativeEvent.layout.height,\n        width: event.nativeEvent.layout.width,\n      });\n    };\n\n    const onRightAffixLayoutChange = (event: LayoutChangeEvent) => {\n      setRightLayout({\n        width: event.nativeEvent.layout.width,\n        height: event.nativeEvent.layout.height,\n      });\n    };\n\n    const handleFocus = (args: any) => {\n      if (disabled || !editable) {\n        return;\n      }\n\n      setFocused(true);\n\n      rest.onFocus?.(args);\n    };\n\n    const handleBlur = (args: Object) => {\n      if (!editable) {\n        return;\n      }\n\n      setFocused(false);\n      rest.onBlur?.(args);\n    };\n\n    const handleChangeText = (value: string) => {\n      if (!editable || disabled) {\n        return;\n      }\n\n      if (!isControlled) {\n        // Keep track of value in local state when input is not controlled\n        setUncontrolledValue(value);\n      }\n      rest.onChangeText?.(value);\n    };\n\n    const handleLayoutAnimatedText = (e: LayoutChangeEvent) => {\n      setLabelLayout({\n        width: e.nativeEvent.layout.width,\n        height: e.nativeEvent.layout.height,\n        measured: true,\n      });\n    };\n    const forceFocus = () => root.current?.focus();\n\n    const { maxFontSizeMultiplier = 1.5 } = rest;\n\n    if (mode === 'outlined') {\n      return (\n        <TextInputOutlined\n          dense={dense}\n          disabled={disabled}\n          error={errorProp}\n          multiline={multiline}\n          editable={editable}\n          render={render}\n          {...rest}\n          value={value}\n          parentState={{\n            labeled,\n            error,\n            focused,\n            placeholder,\n            value,\n            labelLayout,\n            leftLayout,\n            rightLayout,\n          }}\n          innerRef={(ref) => {\n            root.current = ref;\n          }}\n          onFocus={handleFocus}\n          forceFocus={forceFocus}\n          onBlur={handleBlur}\n          onChangeText={handleChangeText}\n          onLayoutAnimatedText={handleLayoutAnimatedText}\n          onLeftAffixLayoutChange={onLeftAffixLayoutChange}\n          onRightAffixLayoutChange={onRightAffixLayoutChange}\n          maxFontSizeMultiplier={maxFontSizeMultiplier}\n        />\n      );\n    }\n\n    return (\n      <TextInputFlat\n        dense={dense}\n        disabled={disabled}\n        error={errorProp}\n        multiline={multiline}\n        editable={editable}\n        render={render}\n        {...rest}\n        value={value}\n        parentState={{\n          labeled,\n          error,\n          focused,\n          placeholder,\n          value,\n          labelLayout,\n          leftLayout,\n          rightLayout,\n        }}\n        innerRef={(ref) => {\n          root.current = ref;\n        }}\n        onFocus={handleFocus}\n        forceFocus={forceFocus}\n        onBlur={handleBlur}\n        onChangeText={handleChangeText}\n        onLayoutAnimatedText={handleLayoutAnimatedText}\n        onLeftAffixLayoutChange={onLeftAffixLayoutChange}\n        onRightAffixLayoutChange={onRightAffixLayoutChange}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n      />\n    );\n  }\n) as CompoundedComponent;\n// @component ./Adornment/TextInputIcon.tsx\nTextInput.Icon = TextInputIcon;\n\n// @component ./Adornment/TextInputAffix.tsx\n// @ts-ignore Types of property 'theme' are incompatible.\nTextInput.Affix = TextInputAffix;\n\nexport default withTheme(TextInput);\n"]},"metadata":{},"sourceType":"script"}