{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useFocusedListenersChildrenAdapter;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _NavigationBuilderContext = _interopRequireDefault(require(\"./NavigationBuilderContext\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction useFocusedListenersChildrenAdapter(_ref) {\n  var navigation = _ref.navigation,\n    focusedListeners = _ref.focusedListeners;\n  var _React$useContext = React.useContext(_NavigationBuilderContext.default),\n    addListener = _React$useContext.addListener;\n  var listener = React.useCallback(function (callback) {\n    if (navigation.isFocused()) {\n      for (var _listener of focusedListeners) {\n        var _listener2 = _listener(callback),\n          handled = _listener2.handled,\n          result = _listener2.result;\n        if (handled) {\n          return {\n            handled: handled,\n            result: result\n          };\n        }\n      }\n      return {\n        handled: true,\n        result: callback(navigation)\n      };\n    } else {\n      return {\n        handled: false,\n        result: null\n      };\n    }\n  }, [focusedListeners, navigation]);\n  React.useEffect(function () {\n    return addListener === null || addListener === void 0 ? void 0 : addListener('focus', listener);\n  }, [addListener, listener]);\n}","map":{"version":3,"mappings":";;;;;AACA;AAEA;AAAA;AAAA;AAce,SAASA,kCAAT,OAGH;EAAA,IAFVC,UADyD,GAG/CC,KAFVD,UADyD;IAEzDE,mBACUD,KADVC;EAEA,wBAAwBC,KAAK,CAACC,UAAN,CAAiBC,iCAAjB,CAAxB;IAAQC;EAER,IAAMC,QAAQ,GAAGJ,KAAK,CAACK,WAAN,CACdC,kBAAD,EAA8C;IAC5C,IAAIT,UAAU,CAACU,SAAX,EAAJ,EAA4B;MAC1B,KAAK,IAAMH,SAAX,IAAuBL,gBAAvB,EAAyC;QACvC,iBAA4BK,SAAQ,CAACE,QAAD,CAApC;UAAQE,OAAF,cAAEA,OAAF;UAAWC;QAEjB,IAAID,OAAJ,EAAa;UACX,OAAO;YAAEA,OAAF,EAAEA,OAAF;YAAWC;UAAX,CAAP;QACD;MACF;MAED,OAAO;QAAED,OAAO,EAAE,IAAX;QAAiBC,MAAM,EAAEH,QAAQ,CAACT,UAAD;MAAjC,CAAP;IACD,CAVD,MAUO;MACL,OAAO;QAAEW,OAAO,EAAE,KAAX;QAAkBC,MAAM,EAAE;MAA1B,CAAP;IACD;EACF,CAfc,EAgBf,CAACV,gBAAD,EAAmBF,UAAnB,CAhBe,CAAjB;EAmBAG,KAAK,CAACU,SAAN,CACE;IAAA,OAAMP,WAAN,aAAMA,WAAN,uBAAMA,WAAW,CAAG,OAAH,EAAYC,QAAZ,CADnB;EAAA,GAEE,CAACD,WAAD,EAAcC,QAAd,CAFF;AAID","names":["useFocusedListenersChildrenAdapter","navigation","_ref","focusedListeners","React","useContext","NavigationBuilderContext","addListener","listener","useCallback","callback","isFocused","handled","result","useEffect"],"sources":["useFocusedListenersChildrenAdapter.tsx"],"sourcesContent":["import type { ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  FocusedNavigationCallback,\n  FocusedNavigationListener,\n} from './NavigationBuilderContext';\nimport type { NavigationHelpers } from './types';\n\ntype Options = {\n  navigation: NavigationHelpers<ParamListBase>;\n  focusedListeners: FocusedNavigationListener[];\n};\n\n/**\n * Hook for passing focus callback to children\n */\nexport default function useFocusedListenersChildrenAdapter({\n  navigation,\n  focusedListeners,\n}: Options) {\n  const { addListener } = React.useContext(NavigationBuilderContext);\n\n  const listener = React.useCallback(\n    (callback: FocusedNavigationCallback<any>) => {\n      if (navigation.isFocused()) {\n        for (const listener of focusedListeners) {\n          const { handled, result } = listener(callback);\n\n          if (handled) {\n            return { handled, result };\n          }\n        }\n\n        return { handled: true, result: callback(navigation) };\n      } else {\n        return { handled: false, result: null };\n      }\n    },\n    [focusedListeners, navigation]\n  );\n\n  React.useEffect(\n    () => addListener?.('focus', listener),\n    [addListener, listener]\n  );\n}\n"]},"metadata":{},"sourceType":"script"}