{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = overlay;\nvar _color = _interopRequireDefault(require(\"color\"));\nvar _reactNative = require(\"react-native\");\nvar _DarkTheme = _interopRequireDefault(require(\"./DarkTheme\"));\nvar isAnimatedValue = function isAnimatedValue(it) {\n  return it instanceof _reactNative.Animated.Value;\n};\nfunction overlay(elevation) {\n  var surfaceColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _DarkTheme.default.colors.surface;\n  if (isAnimatedValue(elevation)) {\n    var inputRange = [0, 1, 2, 3, 8, 24];\n\n    return elevation.interpolate({\n      inputRange: inputRange,\n      outputRange: inputRange.map(function (elevation) {\n        return calculateColor(surfaceColor, elevation);\n      })\n    });\n  }\n\n  return calculateColor(surfaceColor, elevation);\n}\nfunction calculateColor(surfaceColor) {\n  var elevation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var overlayTransparency;\n  if (elevation >= 1 && elevation <= 24) {\n    overlayTransparency = elevationOverlayTransparency[elevation];\n  } else if (elevation > 24) {\n    overlayTransparency = elevationOverlayTransparency[24];\n  } else {\n    overlayTransparency = elevationOverlayTransparency[1];\n  }\n  return (0, _color.default)(surfaceColor).mix((0, _color.default)('white'), overlayTransparency * 0.01).hex();\n}\nvar elevationOverlayTransparency = {\n  1: 5,\n  2: 7,\n  3: 8,\n  4: 9,\n  5: 10,\n  6: 11,\n  7: 11.5,\n  8: 12,\n  9: 12.5,\n  10: 13,\n  11: 13.5,\n  12: 14,\n  13: 14.25,\n  14: 14.5,\n  15: 14.75,\n  16: 15,\n  17: 15.12,\n  18: 15.24,\n  19: 15.36,\n  20: 15.48,\n  21: 15.6,\n  22: 15.72,\n  23: 15.84,\n  24: 16\n};","map":{"version":3,"mappings":";;;;;AAAA;AACA;AACA;AAEA,IAAMA,eAAe,GACnBC,SADID,eAAe,CACnBC,EADsB;EAAA,OAEGA,EAAE,YAAYC,qBAAQ,CAACC,KAFlD;AAAA;AAIe,SAASC,OAAT,CACbC,SADa,EAG+C;EAAA,IAD5DC,YAC4D,uEADrCC,kBAAS,CAACC,MAAV,CAAiBC,OACoB;EAC5D,IAAIT,eAAe,CAACK,SAAD,CAAnB,EAAgC;IAC9B,IAAMK,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,EAAhB,CAAnB;;IAGA,OAAOL,SAAS,CAACM,WAAV,CAAsB;MAC3BD,UAD2B,EAC3BA,UAD2B;MAE3BE,WAAW,EAAEF,UAAU,CAACG,GAAX,CAAgBR,mBAAD,EAAe;QACzC,OAAOS,cAAc,CAACR,YAAD,EAAeD,SAAf,CAArB;MACD,CAFY;IAFc,CAAtB,CAAP;EAMD;;EAGD,OAAOS,cAAc,CAACR,YAAD,EAAeD,SAAf,CAArB;AACD;AAED,SAASS,cAAT,CAAwBR,YAAxB,EAAqE;EAAA,IAAvBD,SAAuB,uEAAH,CAAG;EACnE,IAAIU,mBAAJ;EACA,IAAIV,SAAS,IAAI,CAAb,IAAkBA,SAAS,IAAI,EAAnC,EAAuC;IACrCU,mBAAmB,GAAGC,4BAA4B,CAACX,SAAD,CAAlD;EACD,CAFD,MAEO,IAAIA,SAAS,GAAG,EAAhB,EAAoB;IACzBU,mBAAmB,GAAGC,4BAA4B,CAAC,EAAD,CAAlD;EACD,CAFM,MAEA;IACLD,mBAAmB,GAAGC,4BAA4B,CAAC,CAAD,CAAlD;EACD;EACD,OAAOC,kBAAK,EAACX,YAAD,CAAL,CACJY,GADI,CACAD,kBAAK,EAAC,OAAD,CADL,EACgBF,mBAAmB,GAAG,IADtC,EAEJI,GAFI,EAAP;AAGD;AAED,IAAMH,4BAAoD,GAAG;EAC3D,GAAG,CADwD;EAE3D,GAAG,CAFwD;EAG3D,GAAG,CAHwD;EAI3D,GAAG,CAJwD;EAK3D,GAAG,EALwD;EAM3D,GAAG,EANwD;EAO3D,GAAG,IAPwD;EAQ3D,GAAG,EARwD;EAS3D,GAAG,IATwD;EAU3D,IAAI,EAVuD;EAW3D,IAAI,IAXuD;EAY3D,IAAI,EAZuD;EAa3D,IAAI,KAbuD;EAc3D,IAAI,IAduD;EAe3D,IAAI,KAfuD;EAgB3D,IAAI,EAhBuD;EAiB3D,IAAI,KAjBuD;EAkB3D,IAAI,KAlBuD;EAmB3D,IAAI,KAnBuD;EAoB3D,IAAI,KApBuD;EAqB3D,IAAI,IArBuD;EAsB3D,IAAI,KAtBuD;EAuB3D,IAAI,KAvBuD;EAwB3D,IAAI;AAxBuD,CAA7D","names":["isAnimatedValue","it","Animated","Value","overlay","elevation","surfaceColor","DarkTheme","colors","surface","inputRange","interpolate","outputRange","map","calculateColor","overlayTransparency","elevationOverlayTransparency","color","mix","hex"],"sources":["overlay.tsx"],"sourcesContent":["import color from 'color';\nimport { Animated } from 'react-native';\nimport DarkTheme from './DarkTheme';\n\nconst isAnimatedValue = (\n  it: number | Animated.AnimatedInterpolation\n): it is Animated.Value => it instanceof Animated.Value;\n\nexport default function overlay<T extends Animated.Value | number>(\n  elevation: T,\n  surfaceColor: string = DarkTheme.colors.surface\n): T extends number ? string : Animated.AnimatedInterpolation {\n  if (isAnimatedValue(elevation)) {\n    const inputRange = [0, 1, 2, 3, 8, 24];\n\n    // @ts-expect-error: TS doesn't seem to refine the type correctly\n    return elevation.interpolate({\n      inputRange,\n      outputRange: inputRange.map((elevation) => {\n        return calculateColor(surfaceColor, elevation);\n      }),\n    });\n  }\n\n  // @ts-expect-error: TS doesn't seem to refine the type correctly\n  return calculateColor(surfaceColor, elevation);\n}\n\nfunction calculateColor(surfaceColor: string, elevation: number = 1) {\n  let overlayTransparency: number;\n  if (elevation >= 1 && elevation <= 24) {\n    overlayTransparency = elevationOverlayTransparency[elevation];\n  } else if (elevation > 24) {\n    overlayTransparency = elevationOverlayTransparency[24];\n  } else {\n    overlayTransparency = elevationOverlayTransparency[1];\n  }\n  return color(surfaceColor)\n    .mix(color('white'), overlayTransparency * 0.01)\n    .hex();\n}\n\nconst elevationOverlayTransparency: Record<string, number> = {\n  1: 5,\n  2: 7,\n  3: 8,\n  4: 9,\n  5: 10,\n  6: 11,\n  7: 11.5,\n  8: 12,\n  9: 12.5,\n  10: 13,\n  11: 13.5,\n  12: 14,\n  13: 14.25,\n  14: 14.5,\n  15: 14.75,\n  16: 15,\n  17: 15.12,\n  18: 15.24,\n  19: 15.36,\n  20: 15.48,\n  21: 15.6,\n  22: 15.72,\n  23: 15.84,\n  24: 16,\n};\n"]},"metadata":{},"sourceType":"script"}