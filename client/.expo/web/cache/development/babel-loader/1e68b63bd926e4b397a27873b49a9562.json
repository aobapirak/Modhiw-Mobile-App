{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.AppbarBackAction = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _AppbarAction = _interopRequireDefault(require(\"./AppbarAction\"));\nvar _AppbarBackIcon = _interopRequireDefault(require(\"./AppbarBackIcon\"));\nvar _excluded = [\"accessibilityLabel\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar AppbarBackAction = function AppbarBackAction(_ref) {\n  var _ref$accessibilityLab = _ref.accessibilityLabel,\n    accessibilityLabel = _ref$accessibilityLab === void 0 ? 'Back' : _ref$accessibilityLab,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  return React.createElement(_AppbarAction.default, _extends({\n    accessibilityLabel: accessibilityLabel\n  }, rest, {\n    icon: _AppbarBackIcon.default\n  }));\n};\nexports.AppbarBackAction = AppbarBackAction;\nAppbarBackAction.displayName = 'Appbar.BackAction';\nvar _default = AppbarBackAction;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AA8DA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAGC;EAAA,iCAAGC,kBAAkB;IAAlBA,kBAAkB,sCAAG,MAAvB;IAAkCC,8CAAnCF;EAAA,OACvBG,oBAACC,qBAAD;IACEH,kBAAkB,EAAEA;EADtB,GAEMC,IAFN;IAGEG,IAAI,EAAEC;EAHR,GADuB;AAAA,CAAzB;AAAA;AAQAP,gBAAgB,CAACQ,WAAjB,GAA+B,mBAA/B;AAAA,eAEeR,gBAAf;AAAA","names":["AppbarBackAction","_ref","accessibilityLabel","rest","React","AppbarAction","icon","AppbarBackIcon","displayName"],"sources":["AppbarBackAction.tsx"],"sourcesContent":["import * as React from 'react';\nimport type { $Omit } from './../../types';\nimport AppbarAction from './AppbarAction';\nimport AppbarBackIcon from './AppbarBackIcon';\nimport type { StyleProp, ViewStyle } from 'react-native';\n\nexport type Props = $Omit<\n  React.ComponentPropsWithoutRef<typeof AppbarAction>,\n  'icon'\n> & {\n  /**\n   *  Custom color for back icon.\n   */\n  color?: string;\n  /**\n   * Optional icon size.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component used to display a back button in the appbar.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-backaction-android.png\" />\n *     <figcaption>Android</figcaption>\n *   </figure>\n * </div>\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-backaction-ios.png\" />\n *     <figcaption>iOS</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n *\n * const MyComponent = () => (\n *     <Appbar.Header>\n *       <Appbar.BackAction onPress={() => {}} />\n *     </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst AppbarBackAction = ({ accessibilityLabel = 'Back', ...rest }: Props) => (\n  <AppbarAction\n    accessibilityLabel={accessibilityLabel}\n    {...rest}\n    icon={AppbarBackIcon}\n  />\n);\n\nAppbarBackAction.displayName = 'Appbar.BackAction';\n\nexport default AppbarBackAction;\n\n// @component-docs ignore-next-line\nexport { AppbarBackAction };\n"]},"metadata":{},"sourceType":"script"}