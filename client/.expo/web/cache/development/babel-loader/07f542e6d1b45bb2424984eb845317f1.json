{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = deprecate;\nvar _compareVersions = _interopRequireDefault(require(\"compare-versions\"));\nvar _CodedError = require(\"./errors/CodedError\");\nvar postedWarnings = {};\nfunction deprecate(library, deprecatedAPI) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var currentVersion = options.currentVersion,\n    versionToRemove = options.versionToRemove,\n    replacement = options.replacement;\n  var code = codeFromLibrary(library);\n  var key = code + \":\" + deprecatedAPI + \":\" + replacement;\n  if (!postedWarnings[key]) {\n    postedWarnings[key] = true;\n  }\n  if (!currentVersion || !versionToRemove || (0, _compareVersions.default)(currentVersion, versionToRemove) >= 0) {\n    var _message = \"`\" + deprecatedAPI + \"` has been removed\";\n    if (versionToRemove) {\n      _message = _message + \" as of version \\\"\" + versionToRemove + \"\\\"\";\n    }\n    if (replacement && replacement.length) {\n      _message = _message + \" please migrate to: `\" + replacement + \"`\";\n    }\n    throw new _CodedError.CodedError(\"ERR_DEPRECATED_API\", prependLibrary(library, _message));\n  }\n  var message = \"`\" + deprecatedAPI + \"` has been deprecated\";\n  if (replacement && replacement.length) {\n    message = message + \" in favor of `\" + replacement + \"`\";\n  }\n  if (versionToRemove && versionToRemove.length) {\n    message = message + \" and will be removed in version \\\"\" + versionToRemove + \"\\\"\";\n  }\n  console.warn(prependLibrary(library, message));\n}\nfunction prependLibrary(library, message) {\n  return library + \": \" + message;\n}\nfunction codeFromLibrary(library) {\n  var code = library.replace(/[-.]/g, '_').toUpperCase();\n  return code;\n}","map":{"version":3,"mappings":";;;;;AAAA;AAEA;AAEA,IAAMA,cAAc,GAA+B,EAAE;AAKvC,SAAUC,SAAS,CAC/BC,OAAe,EACfC,aAAqB,EAKf;EAAA,IAJNC,8EAII,EAAE;EAEN,IAAQC,cAAc,GAAmCD,OAAO,CAAxDC,cAAc;IAAEC,eAAe,GAAkBF,OAAO,CAAxCE,eAAe;IAAEC,WAAW,GAAKH,OAAO,CAAvBG,WAAW;EACpD,IAAMC,IAAI,GAAGC,eAAe,CAACP,OAAO,CAAC;EACrC,IAAMQ,GAAG,GAAMF,IAAI,SAAIL,aAAa,SAAII,WAAa;EACrD,IAAI,CAACP,cAAc,CAACU,GAAG,CAAC,EAAE;IACxBV,cAAc,CAACU,GAAG,CAAC,GAAG,IAAI;;EAG5B,IACE,CAACL,cAAc,IACf,CAACC,eAAe,IAChB,4BAAe,EAACD,cAAc,EAAEC,eAAe,CAAC,IAAI,CAAC,EACrD;IACA,IAAIK,QAAO,SAAQR,aAAa,uBAAqB;IACrD,IAAIG,eAAe,EAAE;MACnBK,QAAO,GAAMA,QAAO,yBAAmBL,eAAe,OAAG;;IAE3D,IAAIC,WAAW,IAAIA,WAAW,CAACK,MAAM,EAAE;MACrCD,QAAO,GAAMA,QAAO,6BAAyBJ,WAAW,MAAI;;IAG9D,MAAM,IAAIM,sBAAU,uBAAuBC,cAAc,CAACZ,OAAO,EAAES,QAAO,CAAC,CAAC;;EAG9E,IAAIA,OAAO,SAAQR,aAAa,0BAAwB;EACxD,IAAII,WAAW,IAAIA,WAAW,CAACK,MAAM,EAAE;IACrCD,OAAO,GAAMA,OAAO,sBAAkBJ,WAAW,MAAI;;EAEvD,IAAID,eAAe,IAAIA,eAAe,CAACM,MAAM,EAAE;IAC7CD,OAAO,GAAMA,OAAO,0CAAoCL,eAAe,OAAG;;EAE5ES,OAAO,CAACC,IAAI,CAACF,cAAc,CAACZ,OAAO,EAAES,OAAO,CAAC,CAAC;AAChD;AAEA,SAASG,cAAc,CAACZ,OAAe,EAAES,OAAe;EACtD,OAAUT,OAAO,UAAKS,OAAO;AAC/B;AAOA,SAASF,eAAe,CAACP,OAAe;EACtC,IAAMM,IAAI,GAAGN,OAAO,CAACe,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAACC,WAAW,EAAE;EACxD,OAAOV,IAAI;AACb","names":["postedWarnings","deprecate","library","deprecatedAPI","options","currentVersion","versionToRemove","replacement","code","codeFromLibrary","key","message","length","CodedError","prependLibrary","console","warn","replace","toUpperCase"],"sourceRoot":"","sources":["../src/deprecate.ts"],"sourcesContent":["import compareVersions from 'compare-versions';\n\nimport { CodedError } from './errors/CodedError';\n\nconst postedWarnings: { [key: string]: boolean } = {};\n\n/**\n * Used for deprecating values and throwing an error if a given version of Expo has passed.\n */\nexport default function deprecate(\n  library: string,\n  deprecatedAPI: string,\n  options: {\n    replacement?: string;\n    currentVersion?: string;\n    versionToRemove?: string;\n  } = {}\n): void {\n  const { currentVersion, versionToRemove, replacement } = options;\n  const code = codeFromLibrary(library);\n  const key = `${code}:${deprecatedAPI}:${replacement}`;\n  if (!postedWarnings[key]) {\n    postedWarnings[key] = true;\n  }\n\n  if (\n    !currentVersion ||\n    !versionToRemove ||\n    compareVersions(currentVersion, versionToRemove) >= 0\n  ) {\n    let message = `\\`${deprecatedAPI}\\` has been removed`;\n    if (versionToRemove) {\n      message = `${message} as of version \"${versionToRemove}\"`;\n    }\n    if (replacement && replacement.length) {\n      message = `${message} please migrate to: \\`${replacement}\\``;\n    }\n\n    throw new CodedError(`ERR_DEPRECATED_API`, prependLibrary(library, message));\n  }\n\n  let message = `\\`${deprecatedAPI}\\` has been deprecated`;\n  if (replacement && replacement.length) {\n    message = `${message} in favor of \\`${replacement}\\``;\n  }\n  if (versionToRemove && versionToRemove.length) {\n    message = `${message} and will be removed in version \"${versionToRemove}\"`;\n  }\n  console.warn(prependLibrary(library, message));\n}\n\nfunction prependLibrary(library: string, message: string): string {\n  return `${library}: ${message}`;\n}\n\n/**\n * Transform format:\n * Expo.AR -> EXPO_AR\n * expo-ar -> EXPO_AR\n */\nfunction codeFromLibrary(library: string): string {\n  const code = library.replace(/[-.]/g, '_').toUpperCase();\n  return code;\n}\n"]},"metadata":{},"sourceType":"script"}