{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useOnRouteFocus;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _NavigationBuilderContext = _interopRequireDefault(require(\"./NavigationBuilderContext\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction useOnRouteFocus(_ref) {\n  var router = _ref.router,\n    getState = _ref.getState,\n    sourceRouteKey = _ref.key,\n    setState = _ref.setState;\n  var _React$useContext = React.useContext(_NavigationBuilderContext.default),\n    onRouteFocusParent = _React$useContext.onRouteFocus;\n  return React.useCallback(function (key) {\n    var state = getState();\n    var result = router.getStateForRouteFocus(state, key);\n    if (result !== state) {\n      setState(result);\n    }\n    if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {\n      onRouteFocusParent(sourceRouteKey);\n    }\n  }, [getState, onRouteFocusParent, router, setState, sourceRouteKey]);\n}","map":{"version":3,"mappings":";;;;;AAKA;AAEA;AAAA;AAAA;AAce,SAASA,eAAT,OAKK;EAAA,IAJlBC,MADuE,GAKrDC,KAJlBD,MADuE;IAEvEE,QAFuE,GAKrDD,KAHlBC,QAFuE;IAGlEC,cAHkE,GAKrDF,KAFlBG,GAAG;IACHC,WACkBJ,KADlBI;EAEA,wBAA6CC,KAAK,CAACC,UAAN,CAC3CC,iCAD2C,CAA7C;IAAsBC,uCAAdC,YAAY;EAIpB,OAAOJ,KAAK,CAACK,WAAN,CACJP,aAAD,EAAiB;IACf,IAAMQ,KAAK,GAAGV,QAAQ,EAAtB;IACA,IAAMW,MAAM,GAAGb,MAAM,CAACc,qBAAP,CAA6BF,KAA7B,EAAoCR,GAApC,CAAf;IAEA,IAAIS,MAAM,KAAKD,KAAf,EAAsB;MACpBP,QAAQ,CAACQ,MAAD,CAAR;IACD;IAED,IAAIJ,kBAAkB,KAAKM,SAAvB,IAAoCZ,cAAc,KAAKY,SAA3D,EAAsE;MACpEN,kBAAkB,CAACN,cAAD,CAAlB;IACD;EACF,CAZI,EAaL,CAACD,QAAD,EAAWO,kBAAX,EAA+BT,MAA/B,EAAuCK,QAAvC,EAAiDF,cAAjD,CAbK,CAAP;AAeD","names":["useOnRouteFocus","router","_ref","getState","sourceRouteKey","key","setState","React","useContext","NavigationBuilderContext","onRouteFocusParent","onRouteFocus","useCallback","state","result","getStateForRouteFocus","undefined"],"sources":["useOnRouteFocus.tsx"],"sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext from './NavigationBuilderContext';\n\ntype Options<Action extends NavigationAction> = {\n  router: Router<NavigationState, Action>;\n  getState: () => NavigationState;\n  setState: (state: NavigationState) => void;\n  key?: string;\n};\n\n/**\n * Hook to handle focus actions for a route.\n * Focus action needs to be treated specially, coz when a nested route is focused,\n * the parent navigators also needs to be focused.\n */\nexport default function useOnRouteFocus<Action extends NavigationAction>({\n  router,\n  getState,\n  key: sourceRouteKey,\n  setState,\n}: Options<Action>) {\n  const { onRouteFocus: onRouteFocusParent } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  return React.useCallback(\n    (key: string) => {\n      const state = getState();\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (result !== state) {\n        setState(result);\n      }\n\n      if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {\n        onRouteFocusParent(sourceRouteKey);\n      }\n    },\n    [getState, onRouteFocusParent, router, setState, sourceRouteKey]\n  );\n}\n"]},"metadata":{},"sourceType":"script"}