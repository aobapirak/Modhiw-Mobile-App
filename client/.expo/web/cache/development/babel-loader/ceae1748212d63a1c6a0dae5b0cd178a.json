{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Emoji = void 0;\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _nodeEmoji = _interopRequireDefault(require(\"node-emoji\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar Emoji = (0, _react.memo)(function (_ref) {\n  var name = _ref.name;\n  var emoji = _nodeEmoji.default.get(name);\n  return _react.default.createElement(_reactNative.Text, {\n    allowFontScaling: false\n  }, emoji);\n});\nexports.Emoji = Emoji;","map":{"version":3,"mappings":";;;;;AAAA;AACA;AACA;AAAkC;AAAA;AAElC,IAAMA,KAAK,GAAG,eAAI,EAAC,gBAA+B;EAAA,IAA5BC,IAAI,QAAJA,IAAI;EACxB,IAAMC,KAAK,GAAGC,kBAAS,CAACC,GAAG,CAACH,IAAI,CAAC;EACjC,OAAOI,6BAACC,iBAAI;IAACC,gBAAgB,EAAE;EAAK,GAAGL,KAAK,CAAQ;AACtD,CAAC,CAAC;AAAA","names":["Emoji","name","emoji","nodeEmoji","get","React","Text","allowFontScaling"],"sourceRoot":"","sources":["../src/Emoji.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}