{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _InteractionManager = _interopRequireDefault(require(\"../../../exports/InteractionManager\"));\nvar _TouchHistoryMath = _interopRequireDefault(require(\"../TouchHistoryMath\"));\n\nvar currentCentroidXOfTouchesChangedAfter = _TouchHistoryMath.default.currentCentroidXOfTouchesChangedAfter;\nvar currentCentroidYOfTouchesChangedAfter = _TouchHistoryMath.default.currentCentroidYOfTouchesChangedAfter;\nvar previousCentroidXOfTouchesChangedAfter = _TouchHistoryMath.default.previousCentroidXOfTouchesChangedAfter;\nvar previousCentroidYOfTouchesChangedAfter = _TouchHistoryMath.default.previousCentroidYOfTouchesChangedAfter;\nvar currentCentroidX = _TouchHistoryMath.default.currentCentroidX;\nvar currentCentroidY = _TouchHistoryMath.default.currentCentroidY;\n\nvar PanResponder = {\n\n  _initializeGestureState: function _initializeGestureState(gestureState) {\n    gestureState.moveX = 0;\n    gestureState.moveY = 0;\n    gestureState.x0 = 0;\n    gestureState.y0 = 0;\n    gestureState.dx = 0;\n    gestureState.dy = 0;\n    gestureState.vx = 0;\n    gestureState.vy = 0;\n    gestureState.numberActiveTouches = 0;\n    gestureState._accountsForMovesUpTo = 0;\n  },\n  _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {\n    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n    gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    var movedAfter = gestureState._accountsForMovesUpTo;\n    var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var nextDX = gestureState.dx + (x - prevX);\n    var nextDY = gestureState.dy + (y - prevY);\n\n    var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;\n    gestureState.vx = (nextDX - gestureState.dx) / dt;\n    gestureState.vy = (nextDY - gestureState.dy) / dt;\n    gestureState.dx = nextDX;\n    gestureState.dy = nextDY;\n    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n  },\n  create: function create(config) {\n    var interactionState = {\n      handle: null\n    };\n    var gestureState = {\n      stateID: Math.random()\n    };\n    PanResponder._initializeGestureState(gestureState);\n    var panHandlers = {\n      onStartShouldSetResponder: function onStartShouldSetResponder(e) {\n        return config.onStartShouldSetPanResponder === undefined ? false : config.onStartShouldSetPanResponder(e, gestureState);\n      },\n      onMoveShouldSetResponder: function onMoveShouldSetResponder(e) {\n        return config.onMoveShouldSetPanResponder === undefined ? false : config.onMoveShouldSetPanResponder(e, gestureState);\n      },\n      onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(e) {\n        if (e.nativeEvent.touches.length === 1) {\n          PanResponder._initializeGestureState(gestureState);\n        }\n        gestureState.numberActiveTouches = e.touchHistory.numberActiveTouches;\n        return config.onStartShouldSetPanResponderCapture !== undefined ? config.onStartShouldSetPanResponderCapture(e, gestureState) : false;\n      },\n      onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(e) {\n        var touchHistory = e.touchHistory;\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return false;\n        }\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n        return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(e, gestureState) : false;\n      },\n      onResponderGrant: function onResponderGrant(e) {\n        if (!interactionState.handle) {\n          interactionState.handle = _InteractionManager.default.createInteractionHandle();\n        }\n        gestureState.x0 = currentCentroidX(e.touchHistory);\n        gestureState.y0 = currentCentroidY(e.touchHistory);\n        gestureState.dx = 0;\n        gestureState.dy = 0;\n        if (config.onPanResponderGrant) {\n          config.onPanResponderGrant(e, gestureState);\n        }\n        return config.onShouldBlockNativeResponder === undefined ? true : config.onShouldBlockNativeResponder();\n      },\n      onResponderReject: function onResponderReject(e) {\n        clearInteractionHandle(interactionState, config.onPanResponderReject, e, gestureState);\n      },\n      onResponderRelease: function onResponderRelease(e) {\n        clearInteractionHandle(interactionState, config.onPanResponderRelease, e, gestureState);\n        PanResponder._initializeGestureState(gestureState);\n      },\n      onResponderStart: function onResponderStart(e) {\n        var touchHistory = e.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        if (config.onPanResponderStart) {\n          config.onPanResponderStart(e, gestureState);\n        }\n      },\n      onResponderMove: function onResponderMove(e) {\n        var touchHistory = e.touchHistory;\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return;\n        }\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n        if (config.onPanResponderMove) {\n          config.onPanResponderMove(e, gestureState);\n        }\n      },\n      onResponderEnd: function onResponderEnd(e) {\n        var touchHistory = e.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        clearInteractionHandle(interactionState, config.onPanResponderEnd, e, gestureState);\n      },\n      onResponderTerminate: function onResponderTerminate(e) {\n        clearInteractionHandle(interactionState, config.onPanResponderTerminate, e, gestureState);\n        PanResponder._initializeGestureState(gestureState);\n      },\n      onResponderTerminationRequest: function onResponderTerminationRequest(e) {\n        return config.onPanResponderTerminationRequest === undefined ? true : config.onPanResponderTerminationRequest(e, gestureState);\n      }\n    };\n    return {\n      panHandlers: panHandlers,\n      getInteractionHandle: function getInteractionHandle() {\n        return interactionState.handle;\n      }\n    };\n  }\n};\nfunction clearInteractionHandle(interactionState, callback, event, gestureState) {\n  if (interactionState.handle) {\n    _InteractionManager.default.clearInteractionHandle(interactionState.handle);\n    interactionState.handle = null;\n  }\n  if (callback) {\n    callback(event, gestureState);\n  }\n}\nvar _default = PanResponder;\nexports.default = _default;","map":{"version":3,"names":["currentCentroidXOfTouchesChangedAfter","TouchHistoryMath","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY","PanResponder","_initializeGestureState","gestureState","moveX","moveY","x0","y0","dx","dy","vx","vy","numberActiveTouches","_accountsForMovesUpTo","_updateGestureStateOnMove","touchHistory","movedAfter","prevX","x","prevY","y","nextDX","nextDY","dt","mostRecentTimeStamp","create","config","interactionState","handle","stateID","Math","random","panHandlers","onStartShouldSetResponder","e","onStartShouldSetPanResponder","undefined","onMoveShouldSetResponder","onMoveShouldSetPanResponder","onStartShouldSetResponderCapture","nativeEvent","touches","length","onStartShouldSetPanResponderCapture","onMoveShouldSetResponderCapture","onMoveShouldSetPanResponderCapture","onResponderGrant","InteractionManager","createInteractionHandle","onPanResponderGrant","onShouldBlockNativeResponder","onResponderReject","clearInteractionHandle","onPanResponderReject","onResponderRelease","onPanResponderRelease","onResponderStart","onPanResponderStart","onResponderMove","onPanResponderMove","onResponderEnd","onPanResponderEnd","onResponderTerminate","onPanResponderTerminate","onResponderTerminationRequest","onPanResponderTerminationRequest","getInteractionHandle","callback","event"],"sources":["C:/Users/prariya/Desktop/Modhiw/client/node_modules/react-native-phone-number-input/node_modules/react-native-web/dist/vendor/react-native/PanResponder/index.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport InteractionManager from '../../../exports/InteractionManager';\nimport TouchHistoryMath from '../TouchHistoryMath';\n\nvar currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;\nvar currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;\nvar previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;\nvar previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;\nvar currentCentroidX = TouchHistoryMath.currentCentroidX;\nvar currentCentroidY = TouchHistoryMath.currentCentroidY;\n\n/**\n * `PanResponder` reconciles several touches into a single gesture. It makes\n * single-touch gestures resilient to extra touches, and can be used to\n * recognize simple multi-touch gestures.\n *\n * By default, `PanResponder` holds an `InteractionManager` handle to block\n * long-running JS events from interrupting active gestures.\n *\n * It provides a predictable wrapper of the responder handlers provided by the\n * [gesture responder system](docs/gesture-responder-system.html).\n * For each handler, it provides a new `gestureState` object alongside the\n * native event object:\n *\n * ```\n * onPanResponderMove: (event, gestureState) => {}\n * ```\n *\n * A native event is a synthetic touch event with the following form:\n *\n *  - `nativeEvent`\n *      + `changedTouches` - Array of all touch events that have changed since the last event\n *      + `identifier` - The ID of the touch\n *      + `locationX` - The X position of the touch, relative to the element\n *      + `locationY` - The Y position of the touch, relative to the element\n *      + `pageX` - The X position of the touch, relative to the root element\n *      + `pageY` - The Y position of the touch, relative to the root element\n *      + `target` - The node id of the element receiving the touch event\n *      + `timestamp` - A time identifier for the touch, useful for velocity calculation\n *      + `touches` - Array of all current touches on the screen\n *\n * A `gestureState` object has the following:\n *\n *  - `stateID` - ID of the gestureState- persisted as long as there at least\n *     one touch on screen\n *  - `moveX` - the latest screen coordinates of the recently-moved touch\n *  - `moveY` - the latest screen coordinates of the recently-moved touch\n *  - `x0` - the screen coordinates of the responder grant\n *  - `y0` - the screen coordinates of the responder grant\n *  - `dx` - accumulated distance of the gesture since the touch started\n *  - `dy` - accumulated distance of the gesture since the touch started\n *  - `vx` - current velocity of the gesture\n *  - `vy` - current velocity of the gesture\n *  - `numberActiveTouches` - Number of touches currently on screen\n *\n * ### Basic Usage\n *\n * ```\n *   componentWillMount: function() {\n *     this._panResponder = PanResponder.create({\n *       // Ask to be the responder:\n *       onStartShouldSetPanResponder: (evt, gestureState) => true,\n *       onStartShouldSetPanResponderCapture: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponder: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,\n *\n *       onPanResponderGrant: (evt, gestureState) => {\n *         // The gesture has started. Show visual feedback so the user knows\n *         // what is happening!\n *\n *         // gestureState.d{x,y} will be set to zero now\n *       },\n *       onPanResponderMove: (evt, gestureState) => {\n *         // The most recent move distance is gestureState.move{X,Y}\n *\n *         // The accumulated gesture distance since becoming responder is\n *         // gestureState.d{x,y}\n *       },\n *       onPanResponderTerminationRequest: (evt, gestureState) => true,\n *       onPanResponderRelease: (evt, gestureState) => {\n *         // The user has released all touches while this view is the\n *         // responder. This typically means a gesture has succeeded\n *       },\n *       onPanResponderTerminate: (evt, gestureState) => {\n *         // Another component has become the responder, so this gesture\n *         // should be cancelled\n *       },\n *       onShouldBlockNativeResponder: (evt, gestureState) => {\n *         // Returns whether this component should block native components from becoming the JS\n *         // responder. Returns true by default. Is currently only supported on android.\n *         return true;\n *       },\n *     });\n *   },\n *\n *   render: function() {\n *     return (\n *       <View {...this._panResponder.panHandlers} />\n *     );\n *   },\n *\n * ```\n *\n * ### Working Example\n *\n * To see it in action, try the\n * [PanResponder example in RNTester](https://github.com/facebook/react-native/blob/master/RNTester/js/PanResponderExample.js)\n */\n\nvar PanResponder = {\n\n  /**\n   *\n   * A graphical explanation of the touch data flow:\n   *\n   * +----------------------------+             +--------------------------------+\n   * | ResponderTouchHistoryStore |             |TouchHistoryMath                |\n   * +----------------------------+             +----------+---------------------+\n   * |Global store of touchHistory|             |Allocation-less math util       |\n   * |including activeness, start |             |on touch history (centroids     |\n   * |position, prev/cur position.|             |and multitouch movement etc)    |\n   * |                            |             |                                |\n   * +----^-----------------------+             +----^---------------------------+\n   *      |                                          |\n   *      | (records relevant history                |\n   *      |  of touches relevant for                 |\n   *      |  implementing higher level               |\n   *      |  gestures)                               |\n   *      |                                          |\n   * +----+-----------------------+             +----|---------------------------+\n   * | ResponderEventPlugin       |             |    |   Your App/Component      |\n   * +----------------------------+             +----|---------------------------+\n   * |Negotiates which view gets  | Low level   |    |             High level    |\n   * |onResponderMove events.     | events w/   |  +-+-------+     events w/     |\n   * |Also records history into   | touchHistory|  |   Pan   |     multitouch +  |\n   * |ResponderTouchHistoryStore. +---------------->Responder+-----> accumulative|\n   * +----------------------------+ attached to |  |         |     distance and  |\n   *                                 each event |  +---------+     velocity.     |\n   *                                            |                                |\n   *                                            |                                |\n   *                                            +--------------------------------+\n   *\n   *\n   *\n   * Gesture that calculates cumulative movement over time in a way that just\n   * \"does the right thing\" for multiple touches. The \"right thing\" is very\n   * nuanced. When moving two touches in opposite directions, the cumulative\n   * distance is zero in each dimension. When two touches move in parallel five\n   * pixels in the same direction, the cumulative distance is five, not ten. If\n   * two touches start, one moves five in a direction, then stops and the other\n   * touch moves fives in the same direction, the cumulative distance is ten.\n   *\n   * This logic requires a kind of processing of time \"clusters\" of touch events\n   * so that two touch moves that essentially occur in parallel but move every\n   * other frame respectively, are considered part of the same movement.\n   *\n   * Explanation of some of the non-obvious fields:\n   *\n   * - moveX/moveY: If no move event has been observed, then `(moveX, moveY)` is\n   *   invalid. If a move event has been observed, `(moveX, moveY)` is the\n   *   centroid of the most recently moved \"cluster\" of active touches.\n   *   (Currently all move have the same timeStamp, but later we should add some\n   *   threshold for what is considered to be \"moving\"). If a palm is\n   *   accidentally counted as a touch, but a finger is moving greatly, the palm\n   *   will move slightly, but we only want to count the single moving touch.\n   * - x0/y0: Centroid location (non-cumulative) at the time of becoming\n   *   responder.\n   * - dx/dy: Cumulative touch distance - not the same thing as sum of each touch\n   *   distance. Accounts for touch moves that are clustered together in time,\n   *   moving the same direction. Only valid when currently responder (otherwise,\n   *   it only represents the drag distance below the threshold).\n   * - vx/vy: Velocity.\n   */\n\n  _initializeGestureState: function _initializeGestureState(gestureState) {\n    gestureState.moveX = 0;\n    gestureState.moveY = 0;\n    gestureState.x0 = 0;\n    gestureState.y0 = 0;\n    gestureState.dx = 0;\n    gestureState.dy = 0;\n    gestureState.vx = 0;\n    gestureState.vy = 0;\n    gestureState.numberActiveTouches = 0;\n    // All `gestureState` accounts for timeStamps up until:\n    gestureState._accountsForMovesUpTo = 0;\n  },\n\n  /**\n   * This is nuanced and is necessary. It is incorrect to continuously take all\n   * active *and* recently moved touches, find the centroid, and track how that\n   * result changes over time. Instead, we must take all recently moved\n   * touches, and calculate how the centroid has changed just for those\n   * recently moved touches, and append that change to an accumulator. This is\n   * to (at least) handle the case where the user is moving three fingers, and\n   * then one of the fingers stops but the other two continue.\n   *\n   * This is very different than taking all of the recently moved touches and\n   * storing their centroid as `dx/dy`. For correctness, we must *accumulate\n   * changes* in the centroid of recently moved touches.\n   *\n   * There is also some nuance with how we handle multiple moved touches in a\n   * single event. With the way `ReactNativeEventEmitter` dispatches touches as\n   * individual events, multiple touches generate two 'move' events, each of\n   * them triggering `onResponderMove`. But with the way `PanResponder` works,\n   * all of the gesture inference is performed on the first dispatch, since it\n   * looks at all of the touches (even the ones for which there hasn't been a\n   * native dispatch yet). Therefore, `PanResponder` does not call\n   * `onResponderMove` passed the first dispatch. This diverges from the\n   * typical responder callback pattern (without using `PanResponder`), but\n   * avoids more dispatches than necessary.\n   */\n  _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {\n    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n    gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    var movedAfter = gestureState._accountsForMovesUpTo;\n    var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var nextDX = gestureState.dx + (x - prevX);\n    var nextDY = gestureState.dy + (y - prevY);\n\n    // TODO: This must be filtered intelligently.\n    var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;\n    gestureState.vx = (nextDX - gestureState.dx) / dt;\n    gestureState.vy = (nextDY - gestureState.dy) / dt;\n\n    gestureState.dx = nextDX;\n    gestureState.dy = nextDY;\n    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n  },\n\n  /**\n   * @param {object} config Enhanced versions of all of the responder callbacks\n   * that provide not only the typical `ResponderSyntheticEvent`, but also the\n   * `PanResponder` gesture state.  Simply replace the word `Responder` with\n   * `PanResponder` in each of the typical `onResponder*` callbacks. For\n   * example, the `config` object would look like:\n   *\n   *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onPanResponderReject: (e, gestureState) => {...}`\n   *  - `onPanResponderGrant: (e, gestureState) => {...}`\n   *  - `onPanResponderStart: (e, gestureState) => {...}`\n   *  - `onPanResponderEnd: (e, gestureState) => {...}`\n   *  - `onPanResponderRelease: (e, gestureState) => {...}`\n   *  - `onPanResponderMove: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminate: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`\n   *  - `onShouldBlockNativeResponder: (e, gestureState) => {...}`\n   *\n   *  In general, for events that have capture equivalents, we update the\n   *  gestureState once in the capture phase and can use it in the bubble phase\n   *  as well.\n   *\n   *  Be careful with onStartShould* callbacks. They only reflect updated\n   *  `gestureState` for start/end events that bubble/capture to the Node.\n   *  Once the node is the responder, you can rely on every start/end event\n   *  being processed by the gesture and `gestureState` being updated\n   *  accordingly. (numberActiveTouches) may not be totally accurate unless you\n   *  are the responder.\n   */\n  create: function create(config) {\n    var interactionState = {\n      handle: null\n    };\n    var gestureState = {\n      // Useful for debugging\n      stateID: Math.random()\n    };\n    PanResponder._initializeGestureState(gestureState);\n    var panHandlers = {\n      onStartShouldSetResponder: function onStartShouldSetResponder(e) {\n        return config.onStartShouldSetPanResponder === undefined ? false : config.onStartShouldSetPanResponder(e, gestureState);\n      },\n      onMoveShouldSetResponder: function onMoveShouldSetResponder(e) {\n        return config.onMoveShouldSetPanResponder === undefined ? false : config.onMoveShouldSetPanResponder(e, gestureState);\n      },\n      onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(e) {\n        // TODO: Actually, we should reinitialize the state any time\n        // touches.length increases from 0 active to > 0 active.\n        if (e.nativeEvent.touches.length === 1) {\n          PanResponder._initializeGestureState(gestureState);\n        }\n        gestureState.numberActiveTouches = e.touchHistory.numberActiveTouches;\n        return config.onStartShouldSetPanResponderCapture !== undefined ? config.onStartShouldSetPanResponderCapture(e, gestureState) : false;\n      },\n\n      onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(e) {\n        var touchHistory = e.touchHistory;\n        // Responder system incorrectly dispatches should* to current responder\n        // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return false;\n        }\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n        return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(e, gestureState) : false;\n      },\n\n      onResponderGrant: function onResponderGrant(e) {\n        if (!interactionState.handle) {\n          interactionState.handle = InteractionManager.createInteractionHandle();\n        }\n        gestureState.x0 = currentCentroidX(e.touchHistory);\n        gestureState.y0 = currentCentroidY(e.touchHistory);\n        gestureState.dx = 0;\n        gestureState.dy = 0;\n        if (config.onPanResponderGrant) {\n          config.onPanResponderGrant(e, gestureState);\n        }\n        // TODO: t7467124 investigate if this can be removed\n        return config.onShouldBlockNativeResponder === undefined ? true : config.onShouldBlockNativeResponder();\n      },\n\n      onResponderReject: function onResponderReject(e) {\n        clearInteractionHandle(interactionState, config.onPanResponderReject, e, gestureState);\n      },\n\n      onResponderRelease: function onResponderRelease(e) {\n        clearInteractionHandle(interactionState, config.onPanResponderRelease, e, gestureState);\n        PanResponder._initializeGestureState(gestureState);\n      },\n\n      onResponderStart: function onResponderStart(e) {\n        var touchHistory = e.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        if (config.onPanResponderStart) {\n          config.onPanResponderStart(e, gestureState);\n        }\n      },\n\n      onResponderMove: function onResponderMove(e) {\n        var touchHistory = e.touchHistory;\n        // Guard against the dispatch of two touch moves when there are two\n        // simultaneously changed touches.\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return;\n        }\n        // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n        if (config.onPanResponderMove) {\n          config.onPanResponderMove(e, gestureState);\n        }\n      },\n\n      onResponderEnd: function onResponderEnd(e) {\n        var touchHistory = e.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        clearInteractionHandle(interactionState, config.onPanResponderEnd, e, gestureState);\n      },\n\n      onResponderTerminate: function onResponderTerminate(e) {\n        clearInteractionHandle(interactionState, config.onPanResponderTerminate, e, gestureState);\n        PanResponder._initializeGestureState(gestureState);\n      },\n\n      onResponderTerminationRequest: function onResponderTerminationRequest(e) {\n        return config.onPanResponderTerminationRequest === undefined ? true : config.onPanResponderTerminationRequest(e, gestureState);\n      }\n    };\n    return {\n      panHandlers: panHandlers,\n      getInteractionHandle: function getInteractionHandle() {\n        return interactionState.handle;\n      }\n    };\n  }\n};\n\nfunction clearInteractionHandle(interactionState, callback, event, gestureState) {\n  if (interactionState.handle) {\n    InteractionManager.clearInteractionHandle(interactionState.handle);\n    interactionState.handle = null;\n  }\n  if (callback) {\n    callback(event, gestureState);\n  }\n}\n\nexport default PanResponder;"],"mappings":"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"},"metadata":{},"sourceType":"script"}