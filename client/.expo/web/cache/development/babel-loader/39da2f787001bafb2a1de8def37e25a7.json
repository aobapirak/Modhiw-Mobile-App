{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _color = _interopRequireDefault(require(\"color\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\nvar _Icon = _interopRequireDefault(require(\"../Icon\"));\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));\nvar _theming = require(\"../../core/theming\");\nvar _excluded = [\"icon\", \"label\", \"active\", \"theme\", \"style\", \"onPress\", \"accessibilityLabel\", \"right\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar DrawerItem = function DrawerItem(_ref) {\n  var icon = _ref.icon,\n    label = _ref.label,\n    active = _ref.active,\n    theme = _ref.theme,\n    style = _ref.style,\n    onPress = _ref.onPress,\n    accessibilityLabel = _ref.accessibilityLabel,\n    right = _ref.right,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var colors = theme.colors,\n    roundness = theme.roundness;\n  var backgroundColor = active ? (0, _color.default)(colors.primary).alpha(0.12).rgb().string() : 'transparent';\n  var contentColor = active ? colors.primary : (0, _color.default)(colors.text).alpha(0.68).rgb().string();\n  var font = theme.fonts.medium;\n  var labelMargin = icon ? 32 : 0;\n  return React.createElement(_reactNative.View, rest, React.createElement(_TouchableRipple.default, {\n    borderless: true,\n    delayPressIn: 0,\n    onPress: onPress,\n    style: [styles.container, {\n      backgroundColor: backgroundColor,\n      borderRadius: roundness\n    }, style],\n\n    accessibilityTraits: active ? ['button', 'selected'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: active\n    },\n    accessibilityLabel: accessibilityLabel\n  }, React.createElement(_reactNative.View, {\n    style: styles.wrapper\n  }, React.createElement(_reactNative.View, {\n    style: styles.content\n  }, icon ? React.createElement(_Icon.default, {\n    source: icon,\n    size: 24,\n    color: contentColor\n  }) : null, React.createElement(_Text.default, {\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.label, Object.assign({\n      color: contentColor\n    }, font, {\n      marginLeft: labelMargin\n    })]\n  }, label)), right === null || right === void 0 ? void 0 : right({\n    color: contentColor\n  }))));\n};\nDrawerItem.displayName = 'Drawer.Item';\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  label: {\n    marginRight: 32\n  }\n});\nvar _default = (0, _theming.withTheme)(DrawerItem);\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["DrawerItem","_ref","icon","label","active","theme","style","onPress","accessibilityLabel","right","rest","colors","roundness","backgroundColor","color","primary","alpha","rgb","string","contentColor","text","font","fonts","medium","labelMargin","React","View","TouchableRipple","borderless","delayPressIn","styles","container","borderRadius","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","selected","wrapper","content","Icon","source","size","Text","selectable","numberOfLines","marginLeft","displayName","StyleSheet","create","marginHorizontal","marginVertical","flexDirection","alignItems","padding","flex","marginRight","withTheme"],"sources":["DrawerItem.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Text from '../Typography/Text';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The label text of the item.\n   */\n  label: string;\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  active?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Callback which returns a React element to display on the right side. For instance a Badge.\n   */\n  right?: (props: { color: string }) => React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/drawer-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *    <Drawer.Item\n *      style={{ backgroundColor: '#64ffda' }}\n *      icon=\"star\"\n *      label=\"First Item\"\n *    />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst DrawerItem = ({\n  icon,\n  label,\n  active,\n  theme,\n  style,\n  onPress,\n  accessibilityLabel,\n  right,\n  ...rest\n}: Props) => {\n  const { colors, roundness } = theme;\n  const backgroundColor = active\n    ? color(colors.primary).alpha(0.12).rgb().string()\n    : 'transparent';\n  const contentColor = active\n    ? colors.primary\n    : color(colors.text).alpha(0.68).rgb().string();\n  const font = theme.fonts.medium;\n  const labelMargin = icon ? 32 : 0;\n\n  return (\n    <View {...rest}>\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        style={[\n          styles.container,\n          { backgroundColor, borderRadius: roundness },\n          style,\n        ]}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={active ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: active }}\n        accessibilityLabel={accessibilityLabel}\n      >\n        <View style={styles.wrapper}>\n          <View style={styles.content}>\n            {icon ? (\n              <Icon source={icon} size={24} color={contentColor} />\n            ) : null}\n            <Text\n              selectable={false}\n              numberOfLines={1}\n              style={[\n                styles.label,\n                {\n                  color: contentColor,\n                  ...font,\n                  marginLeft: labelMargin,\n                },\n              ]}\n            >\n              {label}\n            </Text>\n          </View>\n          {right?.({ color: contentColor })}\n        </View>\n      </TouchableRipple>\n    </View>\n  );\n};\n\nDrawerItem.displayName = 'Drawer.Item';\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  label: {\n    marginRight: 32,\n  },\n});\n\nexport default withTheme(DrawerItem);\n"]},"metadata":{},"sourceType":"script"}