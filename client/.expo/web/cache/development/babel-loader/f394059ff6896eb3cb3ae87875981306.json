{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _color = _interopRequireDefault(require(\"color\"));\nvar _InputLabel = _interopRequireDefault(require(\"./Label/InputLabel\"));\nvar _TextInputAdornment = _interopRequireWildcard(require(\"./Adornment/TextInputAdornment\"));\nvar _constants = require(\"./constants\");\nvar _helpers = require(\"./helpers\");\nvar _enums = require(\"./Adornment/enums\");\nvar _excluded = [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"activeUnderlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\"],\n  _excluded2 = [\"fontSize\", \"fontWeight\", \"fontVariant\", \"height\", \"paddingHorizontal\", \"textAlign\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar MINIMIZED_LABEL_Y_OFFSET = -18;\nvar LABEL_PADDING_TOP = 30;\nvar LABEL_PADDING_TOP_DENSE = 24;\nvar MIN_HEIGHT = 64;\nvar MIN_DENSE_HEIGHT_WL = 52;\nvar MIN_DENSE_HEIGHT = 40;\nvar TextInputFlat = function TextInputFlat(_ref) {\n  var _affixTopPosition, _onAffixChange, _topPosition;\n  var _ref$disabled = _ref.disabled,\n    disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n    _ref$editable = _ref.editable,\n    editable = _ref$editable === void 0 ? true : _ref$editable,\n    label = _ref.label,\n    _ref$error = _ref.error,\n    error = _ref$error === void 0 ? false : _ref$error,\n    selectionColor = _ref.selectionColor,\n    underlineColor = _ref.underlineColor,\n    activeUnderlineColor = _ref.activeUnderlineColor,\n    dense = _ref.dense,\n    style = _ref.style,\n    theme = _ref.theme,\n    _ref$render = _ref.render,\n    render = _ref$render === void 0 ? function (props) {\n      return React.createElement(_reactNative.TextInput, props);\n    } : _ref$render,\n    _ref$multiline = _ref.multiline,\n    multiline = _ref$multiline === void 0 ? false : _ref$multiline,\n    parentState = _ref.parentState,\n    innerRef = _ref.innerRef,\n    onFocus = _ref.onFocus,\n    forceFocus = _ref.forceFocus,\n    onBlur = _ref.onBlur,\n    onChangeText = _ref.onChangeText,\n    onLayoutAnimatedText = _ref.onLayoutAnimatedText,\n    onLeftAffixLayoutChange = _ref.onLeftAffixLayoutChange,\n    onRightAffixLayoutChange = _ref.onRightAffixLayoutChange,\n    left = _ref.left,\n    right = _ref.right,\n    placeholderTextColor = _ref.placeholderTextColor,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var isAndroid = _reactNative.Platform.OS === 'android';\n  var colors = theme.colors,\n    fonts = theme.fonts;\n  var font = fonts.regular;\n  var hasActiveOutline = parentState.focused || error;\n  var _ref3 = _reactNative.StyleSheet.flatten(style) || {},\n    fontSizeStyle = _ref3.fontSize,\n    fontWeight = _ref3.fontWeight,\n    fontVariant = _ref3.fontVariant,\n    height = _ref3.height,\n    paddingHorizontal = _ref3.paddingHorizontal,\n    textAlign = _ref3.textAlign,\n    viewStyle = (0, _objectWithoutProperties2.default)(_ref3, _excluded2);\n  var fontSize = fontSizeStyle || _constants.MAXIMIZED_LABEL_FONT_SIZE;\n  var isPaddingHorizontalPassed = paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n  var adornmentConfig = (0, _TextInputAdornment.getAdornmentConfig)({\n    left: left,\n    right: right\n  });\n  var _calculateFlatInputHo = (0, _helpers.calculateFlatInputHorizontalPadding)({\n      adornmentConfig: adornmentConfig\n    }),\n    paddingLeft = _calculateFlatInputHo.paddingLeft,\n    paddingRight = _calculateFlatInputHo.paddingRight;\n  if (isPaddingHorizontalPassed) {\n    paddingLeft = paddingHorizontal;\n    paddingRight = paddingHorizontal;\n  }\n  var leftLayout = parentState.leftLayout,\n    rightLayout = parentState.rightLayout;\n  var rightAffixWidth = right ? rightLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;\n  var leftAffixWidth = left ? leftLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;\n  var adornmentStyleAdjustmentForNativeInput = (0, _TextInputAdornment.getAdornmentStyleAdjustmentForNativeInput)({\n    adornmentConfig: adornmentConfig,\n    rightAffixWidth: rightAffixWidth,\n    leftAffixWidth: leftAffixWidth,\n    paddingHorizontal: paddingHorizontal,\n    inputOffset: _constants.FLAT_INPUT_OFFSET,\n    mode: _enums.InputMode.Flat\n  });\n  var inputTextColor, activeColor, underlineColorCustom, placeholderColor, errorColor;\n  if (disabled) {\n    inputTextColor = activeColor = (0, _color.default)(colors.text).alpha(0.54).rgb().string();\n    placeholderColor = colors.disabled;\n    underlineColorCustom = 'transparent';\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeUnderlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    errorColor = colors.error;\n    underlineColorCustom = underlineColor || colors.disabled;\n  }\n  var containerStyle = {\n    backgroundColor: theme.dark ? (0, _color.default)(colors.background).lighten(0.24).rgb().string() : (0, _color.default)(colors.background).darken(0.06).rgb().string(),\n    borderTopLeftRadius: theme.roundness,\n    borderTopRightRadius: theme.roundness\n  };\n  var labelScale = _constants.MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  var fontScale = _constants.MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  var labelWidth = parentState.labelLayout.width;\n  var labelHeight = parentState.labelLayout.height;\n  var labelHalfWidth = labelWidth / 2;\n  var labelHalfHeight = labelHeight / 2;\n  var baseLabelTranslateX = (_reactNative.I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2) + (1 - labelScale) * (_reactNative.I18nManager.isRTL ? -1 : 1) * paddingLeft;\n  var minInputHeight = dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE : MIN_HEIGHT - LABEL_PADDING_TOP;\n  var inputHeight = (0, _helpers.calculateInputHeight)(labelHeight, height, minInputHeight);\n  var topPosition = (0, _helpers.calculateLabelTopPosition)(labelHeight, inputHeight, multiline && height ? 0 : !height ? minInputHeight / 2 : 0);\n  if (height && typeof height !== 'number') {\n    console.warn('Currently we support only numbers in height prop');\n  }\n  var paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight: labelHalfHeight,\n    offset: _constants.FLAT_INPUT_OFFSET,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition: topPosition,\n    fontSize: fontSize,\n    label: label,\n    scale: fontScale,\n    isAndroid: isAndroid,\n    styles: _reactNative.StyleSheet.flatten(dense ? styles.inputFlatDense : styles.inputFlat)\n  };\n  var pad = (0, _helpers.calculatePadding)(paddingSettings);\n  var paddingFlat = (0, _helpers.adjustPaddingFlat)(Object.assign({}, paddingSettings, {\n    pad: pad\n  }));\n  var baseLabelTranslateY = -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n  var placeholderOpacity = hasActiveOutline ? (0, _helpers.interpolatePlaceholder)(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n  var minHeight = height || (dense ? label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT : MIN_HEIGHT);\n  var flatHeight = inputHeight + (!height ? dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP : 0);\n  var iconTopPosition = (flatHeight - _constants.ADORNMENT_SIZE) / 2;\n  var leftAffixTopPosition = leftLayout.height ? (0, _helpers.calculateFlatAffixTopPosition)(Object.assign({\n    height: flatHeight\n  }, paddingFlat, {\n    affixHeight: leftLayout.height\n  })) : null;\n  var rightAffixTopPosition = rightLayout.height ? (0, _helpers.calculateFlatAffixTopPosition)(Object.assign({\n    height: flatHeight\n  }, paddingFlat, {\n    affixHeight: rightLayout.height\n  })) : null;\n  var labelProps = {\n    label: label,\n    onLayoutAnimatedText: onLayoutAnimatedText,\n    placeholderOpacity: placeholderOpacity,\n    error: error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY: baseLabelTranslateY,\n    baseLabelTranslateX: baseLabelTranslateX,\n    font: font,\n    fontSize: fontSize,\n    fontWeight: fontWeight,\n    labelScale: labelScale,\n    wiggleOffsetX: _constants.LABEL_WIGGLE_X_OFFSET,\n    topPosition: topPosition,\n    paddingOffset: isAndroid ? {\n      paddingLeft: _reactNative.I18nManager.isRTL ? paddingRight : paddingLeft,\n      paddingRight: _reactNative.I18nManager.isRTL ? paddingLeft : paddingRight\n    } : {\n      paddingRight: paddingRight,\n      paddingLeft: paddingLeft\n    },\n    hasActiveOutline: hasActiveOutline,\n    activeColor: activeColor,\n    placeholderColor: placeholderColor,\n    errorColor: errorColor,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n  var affixTopPosition = (_affixTopPosition = {}, (0, _defineProperty2.default)(_affixTopPosition, _enums.AdornmentSide.Left, leftAffixTopPosition), (0, _defineProperty2.default)(_affixTopPosition, _enums.AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n  var onAffixChange = (_onAffixChange = {}, (0, _defineProperty2.default)(_onAffixChange, _enums.AdornmentSide.Left, onLeftAffixLayoutChange), (0, _defineProperty2.default)(_onAffixChange, _enums.AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n  var adornmentProps = {\n    paddingHorizontal: paddingHorizontal,\n    adornmentConfig: adornmentConfig,\n    forceFocus: forceFocus,\n    topPosition: (_topPosition = {}, (0, _defineProperty2.default)(_topPosition, _enums.AdornmentType.Affix, affixTopPosition), (0, _defineProperty2.default)(_topPosition, _enums.AdornmentType.Icon, iconTopPosition), _topPosition),\n    onAffixChange: onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = Object.assign({}, adornmentProps, {\n      left: left,\n      right: right,\n      textStyle: Object.assign({}, font, {\n        fontSize: fontSize,\n        fontWeight: fontWeight\n      }),\n      visible: parentState.labeled\n    });\n  }\n  return React.createElement(_reactNative.View, {\n    style: [containerStyle, viewStyle]\n  }, React.createElement(Underline, {\n    parentState: parentState,\n    underlineColorCustom: underlineColorCustom,\n    error: error,\n    colors: colors,\n    activeColor: activeColor\n  }), React.createElement(_reactNative.View, {\n    style: [styles.labelContainer, {\n      minHeight: minHeight\n    }]\n  }, !isAndroid && multiline && !!label &&\n  React.createElement(_reactNative.View, {\n    testID: \"patch-container\",\n    pointerEvents: \"none\",\n    style: [_reactNative.StyleSheet.absoluteFill, dense ? styles.densePatchContainer : styles.patchContainer, {\n      backgroundColor: viewStyle.backgroundColor || containerStyle.backgroundColor,\n      left: paddingLeft,\n      right: paddingRight\n    }]\n  }), React.createElement(_InputLabel.default, {\n    parentState: parentState,\n    labelProps: labelProps\n  }), render === null || render === void 0 ? void 0 : render(Object.assign({\n    testID: 'text-input-flat'\n  }, rest, {\n    ref: innerRef,\n    onChangeText: onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor !== null && placeholderTextColor !== void 0 ? placeholderTextColor : placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline: multiline,\n    style: [styles.input, {\n      paddingLeft: paddingLeft,\n      paddingRight: paddingRight\n    }, !multiline || multiline && height ? {\n      height: flatHeight\n    } : {}, paddingFlat, Object.assign({}, font, {\n      fontSize: fontSize,\n      fontWeight: fontWeight,\n      fontVariant: fontVariant,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : _reactNative.I18nManager.isRTL ? 'right' : 'left'\n    }), _reactNative.Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput]\n  }))), React.createElement(_TextInputAdornment.default, adornmentProps));\n};\nvar _default = TextInputFlat;\nexports.default = _default;\nvar Underline = function Underline(_ref2) {\n  var parentState = _ref2.parentState,\n    error = _ref2.error,\n    colors = _ref2.colors,\n    activeColor = _ref2.activeColor,\n    underlineColorCustom = _ref2.underlineColorCustom;\n  var backgroundColor = parentState.focused ? activeColor : underlineColorCustom;\n  if (error) backgroundColor = colors.error;\n  return React.createElement(_reactNative.Animated.View, {\n    style: [styles.underline, {\n      backgroundColor: backgroundColor,\n      transform: [{\n        scaleY: parentState.focused ? 1 : 0.5\n      }]\n    }]\n  });\n};\nvar styles = _reactNative.StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n    zIndex: 1\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2\n  }\n});","map":{"version":3,"mappings":"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","names":["MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","LABEL_PADDING_TOP_DENSE","MIN_HEIGHT","MIN_DENSE_HEIGHT_WL","MIN_DENSE_HEIGHT","TextInputFlat","_ref","disabled","editable","label","error","selectionColor","underlineColor","activeUnderlineColor","dense","style","theme","render","props","React","NativeTextInput","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","rest","isAndroid","Platform","OS","colors","fonts","font","regular","hasActiveOutline","focused","StyleSheet","flatten","fontSizeStyle","fontSize","fontWeight","fontVariant","height","paddingHorizontal","textAlign","viewStyle","MAXIMIZED_LABEL_FONT_SIZE","isPaddingHorizontalPassed","undefined","adornmentConfig","getAdornmentConfig","calculateFlatInputHorizontalPadding","paddingLeft","paddingRight","leftLayout","rightLayout","rightAffixWidth","width","ADORNMENT_SIZE","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","getAdornmentStyleAdjustmentForNativeInput","inputOffset","FLAT_INPUT_OFFSET","mode","InputMode","Flat","inputTextColor","activeColor","underlineColorCustom","placeholderColor","errorColor","color","text","alpha","rgb","string","primary","placeholder","containerStyle","backgroundColor","dark","background","lighten","darken","borderTopLeftRadius","roundness","borderTopRightRadius","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","labelWidth","labelLayout","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","isRTL","minInputHeight","inputHeight","calculateInputHeight","topPosition","calculateLabelTopPosition","console","warn","paddingSettings","offset","scale","styles","inputFlatDense","inputFlat","pad","calculatePadding","paddingFlat","adjustPaddingFlat","baseLabelTranslateY","placeholderOpacity","interpolatePlaceholder","labeled","measured","minHeight","flatHeight","iconTopPosition","leftAffixTopPosition","calculateFlatAffixTopPosition","affixHeight","rightAffixTopPosition","labelProps","placeholderStyle","wiggleOffsetX","LABEL_WIGGLE_X_OFFSET","paddingOffset","maxFontSizeMultiplier","affixTopPosition","AdornmentSide","Left","Right","onAffixChange","adornmentProps","AdornmentType","Affix","Icon","isTextInputFocused","length","textStyle","visible","View","Underline","labelContainer","testID","pointerEvents","absoluteFill","densePatchContainer","patchContainer","InputLabel","ref","underlineColorAndroid","input","textAlignVertical","outline","TextInputAdornment","_ref2","Animated","underline","transform","scaleY","create","position","bottom","zIndex","paddingTop","paddingBottom","flexGrow","margin"],"sources":["TextInputFlat.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\nimport InputLabel from './Label/InputLabel';\nimport TextInputAdornment, {\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  FLAT_INPUT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingFlat,\n  Padding,\n  interpolatePlaceholder,\n  calculateFlatAffixTopPosition,\n  calculateFlatInputHorizontalPadding,\n} from './helpers';\nimport {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n} from './Adornment/TextInputAdornment';\nimport { AdornmentSide, AdornmentType, InputMode } from './Adornment/enums';\n\nconst MINIMIZED_LABEL_Y_OFFSET = -18;\n\nconst LABEL_PADDING_TOP = 30;\nconst LABEL_PADDING_TOP_DENSE = 24;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT_WL = 52;\nconst MIN_DENSE_HEIGHT = 40;\n\nconst TextInputFlat = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor,\n  activeUnderlineColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  ...rest\n}: ChildTextInputProps) => {\n  const isAndroid = Platform.OS === 'android';\n  const { colors, fonts } = theme;\n  const font = fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    fontVariant,\n    height,\n    paddingHorizontal,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  const isPaddingHorizontalPassed =\n    paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n\n  const adornmentConfig = getAdornmentConfig({\n    left,\n    right,\n  });\n\n  let { paddingLeft, paddingRight } = calculateFlatInputHorizontalPadding({\n    adornmentConfig,\n  });\n\n  if (isPaddingHorizontalPassed) {\n    paddingLeft = paddingHorizontal as number;\n    paddingRight = paddingHorizontal as number;\n  }\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      paddingHorizontal,\n      inputOffset: FLAT_INPUT_OFFSET,\n      mode: InputMode.Flat,\n    });\n\n  let inputTextColor,\n    activeColor,\n    underlineColorCustom,\n    placeholderColor,\n    errorColor;\n\n  if (disabled) {\n    inputTextColor = activeColor = color(colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n    placeholderColor = colors.disabled;\n    underlineColorCustom = 'transparent';\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeUnderlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    errorColor = colors.error;\n    underlineColorCustom = underlineColor || colors.disabled;\n  }\n\n  const containerStyle = {\n    backgroundColor: theme.dark\n      ? color(colors.background).lighten(0.24).rgb().string()\n      : color(colors.background).darken(0.06).rgb().string(),\n    borderTopLeftRadius: theme.roundness,\n    borderTopRightRadius: theme.roundness,\n  };\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.isRTL ? 1 : -1) *\n      (labelHalfWidth - (labelScale * labelWidth) / 2) +\n    (1 - labelScale) * (I18nManager.isRTL ? -1 : 1) * paddingLeft;\n\n  const minInputHeight = dense\n    ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE\n    : MIN_HEIGHT - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    multiline && height ? 0 : !height ? minInputHeight / 2 : 0\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: FLAT_INPUT_OFFSET,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    label,\n    scale: fontScale,\n    isAndroid,\n    styles: StyleSheet.flatten(\n      dense ? styles.inputFlatDense : styles.inputFlat\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingFlat = adjustPaddingFlat({\n    ...paddingSettings,\n    pad,\n  });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const minHeight =\n    height ||\n    (dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) : MIN_HEIGHT);\n\n  const flatHeight =\n    inputHeight +\n    (!height ? (dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP) : 0);\n\n  const iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n\n  const leftAffixTopPosition = leftLayout.height\n    ? calculateFlatAffixTopPosition({\n        height: flatHeight,\n        ...paddingFlat,\n        affixHeight: leftLayout.height,\n      })\n    : null;\n\n  const rightAffixTopPosition = rightLayout.height\n    ? calculateFlatAffixTopPosition({\n        height: flatHeight,\n        ...paddingFlat,\n        affixHeight: rightLayout.height,\n      })\n    : null;\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    paddingOffset: isAndroid\n      ? {\n          paddingLeft: I18nManager.isRTL ? paddingRight : paddingLeft,\n          paddingRight: I18nManager.isRTL ? paddingLeft : paddingRight,\n        }\n      : { paddingRight, paddingLeft },\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    errorColor,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    paddingHorizontal,\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Affix]: affixTopPosition,\n      [AdornmentType.Icon]: iconTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={[containerStyle, viewStyle]}>\n      <Underline\n        parentState={parentState}\n        underlineColorCustom={underlineColorCustom}\n        error={error}\n        colors={colors}\n        activeColor={activeColor}\n      />\n      <View\n        style={[\n          styles.labelContainer,\n          {\n            minHeight,\n          },\n        ]}\n      >\n        {!isAndroid && multiline && !!label && (\n          // Workaround for: https://github.com/callstack/react-native-paper/issues/2799\n          // Patch for a multiline TextInput with fixed height, which allow to avoid covering input label with its value.\n          <View\n            testID=\"patch-container\"\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              dense ? styles.densePatchContainer : styles.patchContainer,\n              {\n                backgroundColor:\n                  viewStyle.backgroundColor || containerStyle.backgroundColor,\n                left: paddingLeft,\n                right: paddingRight,\n              },\n            ]}\n          />\n        )}\n        <InputLabel parentState={parentState} labelProps={labelProps} />\n        {render?.({\n          testID: 'text-input-flat',\n          ...rest,\n          ref: innerRef,\n          onChangeText,\n          placeholder: label ? parentState.placeholder : rest.placeholder,\n          placeholderTextColor: placeholderTextColor ?? placeholderColor,\n          editable: !disabled && editable,\n          selectionColor:\n            typeof selectionColor === 'undefined'\n              ? activeColor\n              : selectionColor,\n          onFocus,\n          onBlur,\n          underlineColorAndroid: 'transparent',\n          multiline,\n          style: [\n            styles.input,\n            { paddingLeft, paddingRight },\n            !multiline || (multiline && height) ? { height: flatHeight } : {},\n            paddingFlat,\n            {\n              ...font,\n              fontSize,\n              fontWeight,\n              fontVariant,\n              color: inputTextColor,\n              textAlignVertical: multiline ? 'top' : 'center',\n              textAlign: textAlign\n                ? textAlign\n                : I18nManager.isRTL\n                ? 'right'\n                : 'left',\n            },\n            Platform.OS === 'web' && { outline: 'none' },\n            adornmentStyleAdjustmentForNativeInput,\n          ],\n        })}\n      </View>\n      <TextInputAdornment {...adornmentProps} />\n    </View>\n  );\n};\n\nexport default TextInputFlat;\n\ntype UnderlineProps = {\n  parentState: {\n    focused: boolean;\n  };\n  error?: boolean;\n  colors: {\n    error: string;\n  };\n  activeColor: string;\n  underlineColorCustom?: string;\n};\n\nconst Underline = ({\n  parentState,\n  error,\n  colors,\n  activeColor,\n  underlineColorCustom,\n}: UnderlineProps) => {\n  let backgroundColor = parentState.focused\n    ? activeColor\n    : underlineColorCustom;\n  if (error) backgroundColor = colors.error;\n  return (\n    <Animated.View\n      style={[\n        styles.underline,\n        {\n          backgroundColor,\n          // Underlines is thinner when input is not focused\n          transform: [{ scaleY: parentState.focused ? 1 : 0.5 }],\n        },\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n    zIndex: 1,\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4,\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2,\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2,\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}