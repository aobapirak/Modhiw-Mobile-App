{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _colors = require(\"../styles/colors\");\nvar _reactNative = require(\"react-native\");\nvar _color = _interopRequireDefault(require(\"color\"));\nvar _theming = require(\"../core/theming\");\nvar _excluded = [\"value\", \"disabled\", \"onValueChange\", \"color\", \"theme\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar version = _reactNative.NativeModules.PlatformConstants ? _reactNative.NativeModules.PlatformConstants.reactNativeVersion : undefined;\n\nvar Switch = function Switch(_ref) {\n  var value = _ref.value,\n    disabled = _ref.disabled,\n    onValueChange = _ref.onValueChange,\n    color = _ref.color,\n    theme = _ref.theme,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var checkedColor = color || theme.colors.accent;\n  var onTintColor = _reactNative.Platform.OS === 'ios' ? checkedColor : disabled ? theme.dark ? (0, _color.default)(_colors.white).alpha(0.1).rgb().string() : (0, _color.default)(_colors.black).alpha(0.12).rgb().string() : (0, _color.default)(checkedColor).alpha(0.5).rgb().string();\n  var thumbTintColor = _reactNative.Platform.OS === 'ios' ? undefined : disabled ? theme.dark ? _colors.grey800 : _colors.grey400 : value ? checkedColor : theme.dark ? _colors.grey400 : _colors.grey50;\n  var props = version && version.major === 0 && version.minor <= 56 ? {\n    onTintColor: onTintColor,\n    thumbTintColor: thumbTintColor\n  } : _reactNative.Platform.OS === 'web' ? {\n    activeTrackColor: onTintColor,\n    thumbColor: thumbTintColor,\n    activeThumbColor: checkedColor\n  } : {\n    thumbColor: thumbTintColor,\n    trackColor: {\n      true: onTintColor,\n      false: ''\n    }\n  };\n  return React.createElement(_reactNative.Switch, _extends({\n    value: value,\n    disabled: disabled,\n    onValueChange: disabled ? undefined : onValueChange\n  }, props, rest));\n};\nvar _default = (0, _theming.withTheme)(Switch);\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AAOA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AAEA,IAAMA,OAAO,GAAGC,0BAAa,CAACC,iBAAd,GACZD,0BAAa,CAACC,iBAAd,CAAgCC,kBADpB,GAEZC,SAFJ;;AAkEA,IAAMC,MAAM,GAAG,SAATA,MAAM,CAAGC,MAOF;EAAA,IANXC,KADc,GAOHD,KANXC,KADc;IAEdC,QAFc,GAOHF,KALXE,QAFc;IAGdC,aAHc,GAOHH,KAJXG,aAHc;IAIdC,KAJc,GAOHJ,KAHXI,KAJc;IAKdC,KALc,GAOHL,KAFXK,KALc;IAMXC,8CACQN;EACX,IAAMO,YAAY,GAAGH,KAAK,IAAIC,KAAK,CAACG,MAAN,CAAaC,MAA3C;EAEA,IAAMC,WAAW,GACfC,qBAAQ,CAACC,EAAT,KAAgB,KAAhB,GACIL,YADJ,GAEIL,QAAQ,GACRG,KAAK,CAACQ,IAAN,GACEC,kBAAQ,EAACC,aAAD,CAAR,CAAgBC,KAAhB,CAAsB,GAAtB,EAA2BC,GAA3B,GAAiCC,MAAjC,EADF,GAEEJ,kBAAQ,EAACK,aAAD,CAAR,CAAgBH,KAAhB,CAAsB,IAAtB,EAA4BC,GAA5B,GAAkCC,MAAlC,EAHM,GAIRJ,kBAAQ,EAACP,YAAD,CAAR,CAAuBS,KAAvB,CAA6B,GAA7B,EAAkCC,GAAlC,GAAwCC,MAAxC,EAPN;EASA,IAAME,cAAc,GAClBT,qBAAQ,CAACC,EAAT,KAAgB,KAAhB,GACId,SADJ,GAEII,QAAQ,GACRG,KAAK,CAACQ,IAAN,GACEQ,eADF,GAEEC,eAHM,GAIRrB,KAAK,GACLM,YADK,GAELF,KAAK,CAACQ,IAAN,GACAS,eADA,GAEAC,cAXN;EAaA,IAAMC,KAAK,GACT9B,OAAO,IAAIA,OAAO,CAAC+B,KAAR,KAAkB,CAA7B,IAAkC/B,OAAO,CAACgC,KAAR,IAAiB,EAAnD,GACI;IACEhB,WADF,EACEA,WADF;IAEEU;EAFF,CADJ,GAKIT,qBAAQ,CAACC,EAAT,KAAgB,KAAhB,GACA;IACEe,gBAAgB,EAAEjB,WADpB;IAEEkB,UAAU,EAAER,cAFd;IAGES,gBAAgB,EAAEtB;EAHpB,CADA,GAMA;IACEqB,UAAU,EAAER,cADd;IAEEU,UAAU,EAAE;MACVC,IAAI,EAAErB,WADI;MAEVsB,KAAK,EAAE;IAFG;EAFd,CAZN;EAoBA,OACEC,oBAACC,mBAAD;IACEjC,KAAK,EAAEA,KADT;IAEEC,QAAQ,EAAEA,QAFZ;IAGEC,aAAa,EAAED,QAAQ,GAAGJ,SAAH,GAAeK;EAHxC,GAIMqB,KAJN,EAKMlB,IALN,EADF;AASD,CA7DD;AAAA,eA+De6B,sBAAS,EAACpC,MAAD,CAAxB;AAAA","names":["version","NativeModules","PlatformConstants","reactNativeVersion","undefined","Switch","_ref","value","disabled","onValueChange","color","theme","rest","checkedColor","colors","accent","onTintColor","Platform","OS","dark","setColor","white","alpha","rgb","string","black","thumbTintColor","grey800","grey400","grey50","props","major","minor","activeTrackColor","thumbColor","activeThumbColor","trackColor","true","false","React","NativeSwitch","withTheme"],"sources":["Switch.tsx"],"sourcesContent":["import * as React from 'react';\nimport { grey400, grey800, grey50, white, black } from '../styles/colors';\nimport {\n  NativeModules,\n  Platform,\n  StyleProp,\n  Switch as NativeSwitch,\n  ViewStyle,\n} from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\n\nconst version = NativeModules.PlatformConstants\n  ? NativeModules.PlatformConstants.reactNativeVersion\n  : undefined;\n\nexport type Props = React.ComponentPropsWithRef<typeof NativeSwitch> & {\n  /**\n   * Disable toggling the switch.\n   */\n  disabled?: boolean;\n  /**\n   * Value of the switch, true means 'on', false means 'off'.\n   */\n  value?: boolean;\n  /**\n   * Custom color for switch.\n   */\n  color?: string;\n  /**\n   * Callback called with the new value when it changes.\n   */\n  onValueChange?: Function;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Switch is a visual toggle between two mutually exclusive states â€” on and off.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Switch } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [isSwitchOn, setIsSwitchOn] = React.useState(false);\n *\n *   const onToggleSwitch = () => setIsSwitchOn(!isSwitchOn);\n *\n *   return <Switch value={isSwitchOn} onValueChange={onToggleSwitch} />;\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Switch = ({\n  value,\n  disabled,\n  onValueChange,\n  color,\n  theme,\n  ...rest\n}: Props) => {\n  const checkedColor = color || theme.colors.accent;\n\n  const onTintColor =\n    Platform.OS === 'ios'\n      ? checkedColor\n      : disabled\n      ? theme.dark\n        ? setColor(white).alpha(0.1).rgb().string()\n        : setColor(black).alpha(0.12).rgb().string()\n      : setColor(checkedColor).alpha(0.5).rgb().string();\n\n  const thumbTintColor =\n    Platform.OS === 'ios'\n      ? undefined\n      : disabled\n      ? theme.dark\n        ? grey800\n        : grey400\n      : value\n      ? checkedColor\n      : theme.dark\n      ? grey400\n      : grey50;\n\n  const props =\n    version && version.major === 0 && version.minor <= 56\n      ? {\n          onTintColor,\n          thumbTintColor,\n        }\n      : Platform.OS === 'web'\n      ? {\n          activeTrackColor: onTintColor,\n          thumbColor: thumbTintColor,\n          activeThumbColor: checkedColor,\n        }\n      : {\n          thumbColor: thumbTintColor,\n          trackColor: {\n            true: onTintColor,\n            false: '',\n          },\n        };\n\n  return (\n    <NativeSwitch\n      value={value}\n      disabled={disabled}\n      onValueChange={disabled ? undefined : onValueChange}\n      {...props}\n      {...rest}\n    />\n  );\n};\n\nexport default withTheme(Switch);\n"]},"metadata":{},"sourceType":"script"}