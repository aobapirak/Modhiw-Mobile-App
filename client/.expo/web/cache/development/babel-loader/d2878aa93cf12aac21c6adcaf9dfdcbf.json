{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.AppbarContent = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _color = _interopRequireDefault(require(\"color\"));\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\nvar _theming = require(\"../../core/theming\");\nvar _colors = require(\"../../styles/colors\");\nvar _excluded = [\"color\", \"subtitle\", \"subtitleStyle\", \"onPress\", \"style\", \"titleRef\", \"titleStyle\", \"theme\", \"title\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar AppbarContent = function AppbarContent(_ref) {\n  var _ref$color = _ref.color,\n    titleColor = _ref$color === void 0 ? _colors.white : _ref$color,\n    subtitle = _ref.subtitle,\n    subtitleStyle = _ref.subtitleStyle,\n    onPress = _ref.onPress,\n    style = _ref.style,\n    titleRef = _ref.titleRef,\n    titleStyle = _ref.titleStyle,\n    theme = _ref.theme,\n    title = _ref.title,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var fonts = theme.fonts;\n  var subtitleColor = (0, _color.default)(titleColor).alpha(0.7).rgb().string();\n  return React.createElement(_reactNative.TouchableWithoutFeedback, {\n    onPress: onPress,\n    disabled: !onPress\n  }, React.createElement(_reactNative.View, _extends({\n    style: [styles.container, style]\n  }, rest), React.createElement(_Text.default, {\n    ref: titleRef,\n    style: [Object.assign({\n      color: titleColor\n    }, _reactNative.Platform.OS === 'ios' ? fonts.regular : fonts.medium), styles.title, titleStyle],\n    numberOfLines: 1,\n    accessible: true,\n    accessibilityTraits: \"header\",\n\n    accessibilityRole: _reactNative.Platform.OS === 'web' ? 'heading' : 'header'\n  }, title), subtitle ? React.createElement(_Text.default, {\n    style: [styles.subtitle, {\n      color: subtitleColor\n    }, subtitleStyle],\n    numberOfLines: 1\n  }, subtitle) : null));\n};\nAppbarContent.displayName = 'Appbar.Content';\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 12\n  },\n  title: {\n    fontSize: _reactNative.Platform.OS === 'ios' ? 17 : 20\n  },\n  subtitle: {\n    fontSize: _reactNative.Platform.OS === 'ios' ? 11 : 14\n  }\n});\nvar _default = (0, _theming.withTheme)(AppbarContent);\nexports.default = _default;\n\nvar AppbarContentWithTheme = (0, _theming.withTheme)(AppbarContent);\nexports.AppbarContent = AppbarContentWithTheme;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AASA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AA+DA,IAAMA,aAAa,GAAG,SAAhBA,aAAa,CAAGC,MAWT;EAAA,sBAVXC,KAAK;IAAEC,UAAU,2BAAGC,aADC;IAErBC,QAFqB,GAWVJ,KATXI,QAFqB;IAGrBC,aAHqB,GAWVL,KARXK,aAHqB;IAIrBC,OAJqB,GAWVN,KAPXM,OAJqB;IAKrBC,KALqB,GAWVP,KANXO,KALqB;IAMrBC,QANqB,GAWVR,KALXQ,QANqB;IAOrBC,UAPqB,GAWVT,KAJXS,UAPqB;IAQrBC,KARqB,GAWVV,KAHXU,KARqB;IASrBC,KATqB,GAWVX,KAFXW,KATqB;IAUlBC,8CACQZ;EACX,IAAQa,QAAUH,KAAlB,CAAQG;EAER,IAAMC,aAAa,GAAGb,kBAAK,EAACC,UAAD,CAAL,CAAkBa,KAAlB,CAAwB,GAAxB,EAA6BC,GAA7B,GAAmCC,MAAnC,EAAtB;EAEA,OACEC,oBAACC,qCAAD;IAA0Bb,OAAO,EAAEA,OAAnC;IAA4Cc,QAAQ,EAAE,CAACd;EAAvD,GACEY,oBAACG,iBAAD;IAAMd,KAAK,EAAE,CAACe,MAAM,CAACC,SAAR,EAAmBhB,KAAnB;EAAb,GAA4CK,IAA5C,GACEM,oBAACM,aAAD;IACEC,GAAG,EAAEjB,QADP;IAEED,KAAK,EAAE;MAEHN,KAAK,EAAEC;IADT,GAEMwB,qBAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwBd,KAAK,CAACe,OAA9B,GAAwCf,KAAK,CAACgB,MAAlD,GAEFP,MAAM,CAACX,KALF,EAMLF,UANK,CAFT;IAUEqB,aAAa,EAAE,CAVjB;IAWEC,UAAU,MAXZ;IAYEC,mBAAmB,EAAC,QAZtB;;IAcEC,iBAAiB,EAAEP,qBAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwB,SAAxB,GAAoC;EAdzD,GAgBGhB,KAhBH,CADF,EAmBGP,QAAQ,GACPc,oBAACM,aAAD;IACEjB,KAAK,EAAE,CAACe,MAAM,CAAClB,QAAR,EAAkB;MAAEH,KAAK,EAAEa;IAAT,CAAlB,EAA4CT,aAA5C,CADT;IAEEyB,aAAa,EAAE;EAFjB,GAIG1B,QAJH,CADO,GAOL,IA1BN,CADF,CADF;AAgCD,CAhDD;AAkDAL,aAAa,CAACmC,WAAd,GAA4B,gBAA5B;AAEA,IAAMZ,MAAM,GAAGa,uBAAU,CAACC,MAAX,CAAkB;EAC/Bb,SAAS,EAAE;IACTc,IAAI,EAAE,CADG;IAETC,iBAAiB,EAAE;EAFV,CADoB;EAK/B3B,KAAK,EAAE;IACL4B,QAAQ,EAAEb,qBAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwB,EAAxB,GAA6B;EADlC,CALwB;EAQ/BvB,QAAQ,EAAE;IACRmC,QAAQ,EAAEb,qBAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwB,EAAxB,GAA6B;EAD/B;AARqB,CAAlB,CAAf;AAAA,eAaea,sBAAS,EAACzC,aAAD,CAAxB;AAAA;;AAGA,IAAM0C,sBAAsB,GAAGD,sBAAS,EAACzC,aAAD,CAAxC","names":["AppbarContent","_ref","color","titleColor","white","subtitle","subtitleStyle","onPress","style","titleRef","titleStyle","theme","title","rest","fonts","subtitleColor","alpha","rgb","string","React","TouchableWithoutFeedback","disabled","View","styles","container","Text","ref","Platform","OS","regular","medium","numberOfLines","accessible","accessibilityTraits","accessibilityRole","displayName","StyleSheet","create","flex","paddingHorizontal","fontSize","withTheme","AppbarContentWithTheme"],"sources":["AppbarContent.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport Text from '../Typography/Text';\n\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\n\nimport type { $RemoveChildren } from '../../types';\n\nexport type Props = $RemoveChildren<typeof View> & {\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * Text for the title.\n   */\n  title: React.ReactNode;\n  /**\n   * Style for the title.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Reference for the title.\n   */\n  titleRef?: React.RefObject<Text>;\n  /**\n   * Text for the subtitle.\n   */\n  subtitle?: React.ReactNode;\n  /**\n   * Style for the subtitle.\n   */\n  subtitleStyle?: StyleProp<TextStyle>;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component used to display a title and optional subtitle in an appbar.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-content.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *     <Appbar.Header>\n *        <Appbar.Content title=\"Title\" subtitle={'Subtitle'} />\n *     </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst AppbarContent = ({\n  color: titleColor = white,\n  subtitle,\n  subtitleStyle,\n  onPress,\n  style,\n  titleRef,\n  titleStyle,\n  theme,\n  title,\n  ...rest\n}: Props) => {\n  const { fonts } = theme;\n\n  const subtitleColor = color(titleColor).alpha(0.7).rgb().string();\n\n  return (\n    <TouchableWithoutFeedback onPress={onPress} disabled={!onPress}>\n      <View style={[styles.container, style]} {...rest}>\n        <Text\n          ref={titleRef}\n          style={[\n            {\n              color: titleColor,\n              ...(Platform.OS === 'ios' ? fonts.regular : fonts.medium),\n            },\n            styles.title,\n            titleStyle,\n          ]}\n          numberOfLines={1}\n          accessible\n          accessibilityTraits=\"header\"\n          // @ts-expect-error React Native doesn't accept 'heading' as it's web-only\n          accessibilityRole={Platform.OS === 'web' ? 'heading' : 'header'}\n        >\n          {title}\n        </Text>\n        {subtitle ? (\n          <Text\n            style={[styles.subtitle, { color: subtitleColor }, subtitleStyle]}\n            numberOfLines={1}\n          >\n            {subtitle}\n          </Text>\n        ) : null}\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nAppbarContent.displayName = 'Appbar.Content';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 12,\n  },\n  title: {\n    fontSize: Platform.OS === 'ios' ? 17 : 20,\n  },\n  subtitle: {\n    fontSize: Platform.OS === 'ios' ? 11 : 14,\n  },\n});\n\nexport default withTheme(AppbarContent);\n\n// @component-docs ignore-next-line\nconst AppbarContentWithTheme = withTheme(AppbarContent);\n// @component-docs ignore-next-line\nexport { AppbarContentWithTheme as AppbarContent };\n"]},"metadata":{},"sourceType":"script"}