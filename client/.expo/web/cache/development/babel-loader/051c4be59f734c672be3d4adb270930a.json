{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\nvar _requestIdleCallback = _interopRequireWildcard(require(\"../../modules/requestIdleCallback\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar InteractionManager = {\n  Events: {\n    interactionStart: 'interactionStart',\n    interactionComplete: 'interactionComplete'\n  },\n  runAfterInteractions: function runAfterInteractions(task) {\n    var handle;\n    var promise = new Promise(function (resolve) {\n      handle = (0, _requestIdleCallback.default)(function () {\n        if (task) {\n          resolve(task());\n        } else {\n          resolve();\n        }\n      });\n    });\n    return {\n      then: promise.then.bind(promise),\n      done: promise.then.bind(promise),\n      cancel: function cancel() {\n        (0, _requestIdleCallback.cancelIdleCallback)(handle);\n      }\n    };\n  },\n  createInteractionHandle: function createInteractionHandle() {\n    return 1;\n  },\n  clearInteractionHandle: function clearInteractionHandle(handle) {\n    (0, _invariant.default)(!!handle, 'Must provide a handle to clear.');\n  },\n  addListener: function addListener() {}\n};\nvar _default = InteractionManager;\nexports.default = _default;","map":{"version":3,"names":["InteractionManager","Events","interactionStart","interactionComplete","runAfterInteractions","task","handle","promise","Promise","resolve","requestIdleCallback","then","bind","done","cancel","cancelIdleCallback","createInteractionHandle","clearInteractionHandle","invariant","addListener"],"sources":["C:/Users/prariya/Desktop/Modhiw/client/node_modules/react-native-web/dist/exports/InteractionManager/index.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from 'fbjs/lib/invariant';\nimport requestIdleCallback, { cancelIdleCallback } from '../../modules/requestIdleCallback';\nvar InteractionManager = {\n  Events: {\n    interactionStart: 'interactionStart',\n    interactionComplete: 'interactionComplete'\n  },\n\n  /**\n   * Schedule a function to run after all interactions have completed.\n   */\n  runAfterInteractions(task) {\n    var handle;\n    var promise = new Promise(resolve => {\n      handle = requestIdleCallback(() => {\n        if (task) {\n          resolve(task());\n        } else {\n          resolve();\n        }\n      });\n    });\n    return {\n      then: promise.then.bind(promise),\n      done: promise.then.bind(promise),\n      cancel: () => {\n        cancelIdleCallback(handle);\n      }\n    };\n  },\n\n  /**\n   * Notify manager that an interaction has started.\n   */\n  createInteractionHandle() {\n    return 1;\n  },\n\n  /**\n   * Notify manager that an interaction has completed.\n   */\n  clearInteractionHandle(handle) {\n    invariant(!!handle, 'Must provide a handle to clear.');\n  },\n\n  addListener: () => {}\n};\nexport default InteractionManager;"],"mappings":";;;;;AASA;AACA;AAA4F;AAAA;;AAC5F,IAAIA,kBAAkB,GAAG;EACvBC,MAAM,EAAE;IACNC,gBAAgB,EAAE,kBAAkB;IACpCC,mBAAmB,EAAE;EACvB,CAAC;EAKDC,oBAAoB,gCAACC,IAAI,EAAE;IACzB,IAAIC,MAAM;IACV,IAAIC,OAAO,GAAG,IAAIC,OAAO,CAAC,UAAAC,OAAO,EAAI;MACnCH,MAAM,GAAG,IAAAI,4BAAmB,EAAC,YAAM;QACjC,IAAIL,IAAI,EAAE;UACRI,OAAO,CAACJ,IAAI,EAAE,CAAC;QACjB,CAAC,MAAM;UACLI,OAAO,EAAE;QACX;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,OAAO;MACLE,IAAI,EAAEJ,OAAO,CAACI,IAAI,CAACC,IAAI,CAACL,OAAO,CAAC;MAChCM,IAAI,EAAEN,OAAO,CAACI,IAAI,CAACC,IAAI,CAACL,OAAO,CAAC;MAChCO,MAAM,EAAE,kBAAM;QACZ,IAAAC,uCAAkB,EAACT,MAAM,CAAC;MAC5B;IACF,CAAC;EACH,CAAC;EAKDU,uBAAuB,qCAAG;IACxB,OAAO,CAAC;EACV,CAAC;EAKDC,sBAAsB,kCAACX,MAAM,EAAE;IAC7B,IAAAY,kBAAS,EAAC,CAAC,CAACZ,MAAM,EAAE,iCAAiC,CAAC;EACxD,CAAC;EAEDa,WAAW,EAAE,uBAAM,CAAC;AACtB,CAAC;AAAC,eACanB,kBAAkB;AAAA"},"metadata":{},"sourceType":"script"}