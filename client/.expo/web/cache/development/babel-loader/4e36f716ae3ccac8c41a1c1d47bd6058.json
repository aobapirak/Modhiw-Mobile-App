{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _color = _interopRequireDefault(require(\"color\"));\nvar _theming = require(\"../core/theming\");\nvar _excluded = [\"color\", \"indeterminate\", \"style\", \"progress\", \"visible\", \"theme\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar INDETERMINATE_DURATION = 2000;\nvar INDETERMINATE_MAX_WIDTH = 0.6;\nvar isRTL = _reactNative.I18nManager.isRTL;\n\nvar ProgressBar = function ProgressBar(_ref) {\n  var color = _ref.color,\n    indeterminate = _ref.indeterminate,\n    style = _ref.style,\n    _ref$progress = _ref.progress,\n    progress = _ref$progress === void 0 ? 0 : _ref$progress,\n    _ref$visible = _ref.visible,\n    visible = _ref$visible === void 0 ? true : _ref$visible,\n    theme = _ref.theme,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var _React$useRef = React.useRef(new _reactNative.Animated.Value(0)),\n    timer = _React$useRef.current;\n  var _React$useRef2 = React.useRef(new _reactNative.Animated.Value(0)),\n    fade = _React$useRef2.current;\n  var _React$useState = React.useState(0),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n    width = _React$useState2[0],\n    setWidth = _React$useState2[1];\n  var _React$useState3 = React.useState(0),\n    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),\n    prevWidth = _React$useState4[0],\n    setPrevWidth = _React$useState4[1];\n  var indeterminateAnimation = React.useRef(null);\n  var scale = theme.animation.scale;\n  var startAnimation = React.useCallback(function () {\n    _reactNative.Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 1,\n      useNativeDriver: true,\n      isInteraction: false\n    }).start();\n\n    if (indeterminate) {\n      if (!indeterminateAnimation.current) {\n        indeterminateAnimation.current = _reactNative.Animated.timing(timer, {\n          duration: INDETERMINATE_DURATION,\n          toValue: 1,\n          useNativeDriver: _reactNative.Platform.OS !== 'web',\n          isInteraction: false\n        });\n      }\n\n      timer.setValue(0);\n      _reactNative.Animated.loop(indeterminateAnimation.current).start();\n    } else {\n      _reactNative.Animated.timing(timer, {\n        duration: 200 * scale,\n        toValue: progress ? progress : 0,\n        useNativeDriver: true,\n        isInteraction: false\n      }).start();\n    }\n  }, [scale, timer, progress, indeterminate, fade]);\n  var stopAnimation = React.useCallback(function () {\n    if (indeterminateAnimation.current) {\n      indeterminateAnimation.current.stop();\n    }\n    _reactNative.Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 0,\n      useNativeDriver: true,\n      isInteraction: false\n    }).start();\n  }, [fade, scale]);\n  React.useEffect(function () {\n    if (visible) startAnimation();else stopAnimation();\n  }, [visible, startAnimation, stopAnimation]);\n  React.useEffect(function () {\n    if (visible && prevWidth === 0) {\n      startAnimation();\n    }\n  }, [prevWidth, startAnimation, visible]);\n  var onLayout = function onLayout(event) {\n    setPrevWidth(width);\n    setWidth(event.nativeEvent.layout.width);\n  };\n  var tintColor = color || theme.colors.primary;\n  var trackTintColor = (0, _color.default)(tintColor).alpha(0.38).rgb().string();\n  return React.createElement(_reactNative.View, _extends({\n    onLayout: onLayout\n  }, rest, {\n    accessible: true,\n    accessibilityRole: \"progressbar\",\n    accessibilityState: {\n      busy: visible\n    },\n    accessibilityValue: indeterminate ? {} : {\n      min: 0,\n      max: 100,\n      now: progress * 100\n    }\n  }), React.createElement(_reactNative.Animated.View, {\n    style: [styles.container, {\n      backgroundColor: trackTintColor,\n      opacity: fade\n    }, style]\n  }, width ? React.createElement(_reactNative.Animated.View, {\n    style: [styles.progressBar, {\n      width: width,\n      backgroundColor: tintColor,\n      transform: [{\n        translateX: timer.interpolate(indeterminate ? {\n          inputRange: [0, 0.5, 1],\n          outputRange: [(isRTL ? 1 : -1) * 0.5 * width, (isRTL ? 1 : -1) * 0.5 * INDETERMINATE_MAX_WIDTH * width, (isRTL ? -1 : 1) * 0.7 * width]\n        } : {\n          inputRange: [0, 1],\n          outputRange: [(isRTL ? 1 : -1) * 0.5 * width, 0]\n        })\n      }, {\n        scaleX: timer.interpolate(indeterminate ? {\n          inputRange: [0, 0.5, 1],\n          outputRange: [0.0001, INDETERMINATE_MAX_WIDTH, 0.0001]\n        } : {\n          inputRange: [0, 1],\n          outputRange: [0.0001, 1]\n        })\n      }]\n    }]\n  }) : null));\n};\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    height: 4,\n    overflow: 'hidden'\n  },\n  progressBar: {\n    flex: 1\n  }\n});\nvar _default = (0, _theming.withTheme)(ProgressBar);\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["INDETERMINATE_DURATION","INDETERMINATE_MAX_WIDTH","isRTL","I18nManager","ProgressBar","_ref","color","indeterminate","style","progress","visible","theme","rest","React","useRef","Animated","Value","timer","current","fade","useState","width","setWidth","prevWidth","setPrevWidth","indeterminateAnimation","scale","animation","startAnimation","useCallback","timing","duration","toValue","useNativeDriver","isInteraction","start","Platform","OS","setValue","loop","stopAnimation","stop","useEffect","onLayout","event","nativeEvent","layout","tintColor","colors","primary","trackTintColor","setColor","alpha","rgb","string","View","accessible","accessibilityRole","accessibilityState","busy","accessibilityValue","min","max","now","styles","container","backgroundColor","opacity","progressBar","transform","translateX","interpolate","inputRange","outputRange","scaleX","StyleSheet","create","height","overflow","flex","withTheme"],"sources":["ProgressBar.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Platform,\n  StyleSheet,\n  View,\n  ViewStyle,\n  StyleProp,\n  LayoutChangeEvent,\n  I18nManager,\n} from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Progress value (between 0 and 1).\n   */\n  progress?: number;\n  /**\n   * Color of the progress bar. The background color will be calculated based on this but you can change it by passing `backgroundColor` to `style` prop.\n   */\n  color?: string;\n  /**\n   * If the progress bar will show indeterminate progress.\n   */\n  indeterminate?: boolean;\n  /**\n   * Whether to show the ProgressBar (true, the default) or hide it (false).\n   */\n  visible?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst INDETERMINATE_DURATION = 2000;\nconst INDETERMINATE_MAX_WIDTH = 0.6;\nconst { isRTL } = I18nManager;\n\n/**\n * Progress bar is an indicator used to present progress of some activity in the app.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/progress-bar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ProgressBar, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <ProgressBar progress={0.5} color={Colors.red800} />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst ProgressBar = ({\n  color,\n  indeterminate,\n  style,\n  progress = 0,\n  visible = true,\n  theme,\n  ...rest\n}: Props) => {\n  const { current: timer } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n  const { current: fade } = React.useRef<Animated.Value>(new Animated.Value(0));\n  const [width, setWidth] = React.useState<number>(0);\n  const [prevWidth, setPrevWidth] = React.useState<number>(0);\n\n  const indeterminateAnimation =\n    React.useRef<Animated.CompositeAnimation | null>(null);\n\n  const { scale } = theme.animation;\n\n  const startAnimation = React.useCallback(() => {\n    // Show progress bar\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 1,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start();\n\n    // Animate progress bar\n    if (indeterminate) {\n      if (!indeterminateAnimation.current) {\n        indeterminateAnimation.current = Animated.timing(timer, {\n          duration: INDETERMINATE_DURATION,\n          toValue: 1,\n          // Animated.loop does not work if useNativeDriver is true on web\n          useNativeDriver: Platform.OS !== 'web',\n          isInteraction: false,\n        });\n      }\n\n      // Reset timer to the beginning\n      timer.setValue(0);\n\n      Animated.loop(indeterminateAnimation.current).start();\n    } else {\n      Animated.timing(timer, {\n        duration: 200 * scale,\n        toValue: progress ? progress : 0,\n        useNativeDriver: true,\n        isInteraction: false,\n      }).start();\n    }\n  }, [scale, timer, progress, indeterminate, fade]);\n\n  const stopAnimation = React.useCallback(() => {\n    // Stop indeterminate animation\n    if (indeterminateAnimation.current) {\n      indeterminateAnimation.current.stop();\n    }\n\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 0,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start();\n  }, [fade, scale]);\n\n  React.useEffect(() => {\n    if (visible) startAnimation();\n    else stopAnimation();\n  }, [visible, startAnimation, stopAnimation]);\n\n  React.useEffect(() => {\n    // Start animation the very first time when previously the width was unclear\n    if (visible && prevWidth === 0) {\n      startAnimation();\n    }\n  }, [prevWidth, startAnimation, visible]);\n\n  const onLayout = (event: LayoutChangeEvent) => {\n    setPrevWidth(width);\n    setWidth(event.nativeEvent.layout.width);\n  };\n\n  const tintColor = color || theme.colors.primary;\n  const trackTintColor = setColor(tintColor).alpha(0.38).rgb().string();\n\n  return (\n    <View\n      onLayout={onLayout}\n      {...rest}\n      accessible\n      accessibilityRole=\"progressbar\"\n      accessibilityState={{ busy: visible }}\n      accessibilityValue={\n        indeterminate ? {} : { min: 0, max: 100, now: progress * 100 }\n      }\n    >\n      <Animated.View\n        style={[\n          styles.container,\n          { backgroundColor: trackTintColor, opacity: fade },\n          style,\n        ]}\n      >\n        {width ? (\n          <Animated.View\n            style={[\n              styles.progressBar,\n              {\n                width,\n                backgroundColor: tintColor,\n                transform: [\n                  {\n                    translateX: timer.interpolate(\n                      indeterminate\n                        ? {\n                            inputRange: [0, 0.5, 1],\n                            outputRange: [\n                              (isRTL ? 1 : -1) * 0.5 * width,\n                              (isRTL ? 1 : -1) *\n                                0.5 *\n                                INDETERMINATE_MAX_WIDTH *\n                                width,\n                              (isRTL ? -1 : 1) * 0.7 * width,\n                            ],\n                          }\n                        : {\n                            inputRange: [0, 1],\n                            outputRange: [(isRTL ? 1 : -1) * 0.5 * width, 0],\n                          }\n                    ),\n                  },\n                  {\n                    // Workaround for workaround for https://github.com/facebook/react-native/issues/6278\n                    scaleX: timer.interpolate(\n                      indeterminate\n                        ? {\n                            inputRange: [0, 0.5, 1],\n                            outputRange: [\n                              0.0001,\n                              INDETERMINATE_MAX_WIDTH,\n                              0.0001,\n                            ],\n                          }\n                        : {\n                            inputRange: [0, 1],\n                            outputRange: [0.0001, 1],\n                          }\n                    ),\n                  },\n                ],\n              },\n            ]}\n          />\n        ) : null}\n      </Animated.View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 4,\n    overflow: 'hidden',\n  },\n\n  progressBar: {\n    flex: 1,\n  },\n});\n\nexport default withTheme(ProgressBar);\n"]},"metadata":{},"sourceType":"script"}