{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _Icon = _interopRequireDefault(require(\"../Icon\"));\nvar _theming = require(\"../../core/theming\");\nvar _colors = require(\"../../styles/colors\");\nvar _getContrastingColor = _interopRequireDefault(require(\"../../utils/getContrastingColor\"));\nvar _excluded = [\"icon\", \"size\", \"style\", \"theme\"],\n  _excluded2 = [\"backgroundColor\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar defaultSize = 64;\n\nvar Avatar = function Avatar(_ref) {\n  var _rest$color;\n  var icon = _ref.icon,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? defaultSize : _ref$size,\n    style = _ref.style,\n    theme = _ref.theme,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var _ref2 = _reactNative.StyleSheet.flatten(style) || {},\n    _ref2$backgroundColor = _ref2.backgroundColor,\n    backgroundColor = _ref2$backgroundColor === void 0 ? theme.colors.primary : _ref2$backgroundColor,\n    restStyle = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);\n  var textColor = (_rest$color = rest.color) !== null && _rest$color !== void 0 ? _rest$color : (0, _getContrastingColor.default)(backgroundColor, _colors.white, 'rgba(0, 0, 0, .54)');\n  return React.createElement(_reactNative.View, _extends({\n    style: [{\n      width: size,\n      height: size,\n      borderRadius: size / 2,\n      backgroundColor: backgroundColor\n    }, styles.container, restStyle]\n  }, rest), React.createElement(_Icon.default, {\n    source: icon,\n    color: textColor,\n    size: size * 0.6\n  }));\n};\nAvatar.displayName = 'Avatar.Icon';\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nvar _default = (0, _theming.withTheme)(Avatar);\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;EAAA;AAAA;AAAA;;;;;;;;;;;;;;;AAEA,IAAMA,WAAW,GAAG,EAApB;;AAyCA,IAAMC,MAAM,GAAG,SAATA,MAAM,CAAGC,MAAgE;EAAA;EAAA,IAA7DC,IAAF,GAA+DD,KAA7DC,IAAF;IAAA,YAA+DD,KAAvDE,IAAI;IAAJA,IAAI,0BAAGJ,WAAf;IAA4BK,KAA5B,GAA+DH,KAAnCG,KAA5B;IAAmCC,KAAnC,GAA+DJ,KAA5BI,KAAnC;IAA6CC,8CAAkBL;EAC7E,YACEM,uBAAU,CAACC,OAAX,CAAmBJ,KAAnB,KAA6B,EAD/B;IAAA,8BAAQK,eAAe;IAAfA,eAAe,sCAAGJ,KAAK,CAACK,MAAN,CAAaC,OAAjC;IAA6CC;EAEnD,IAAMC,SAAS,kBACbP,IAAI,CAACQ,KADQ,qDAEbC,gCAAmB,EAACN,eAAD,EAAkBO,aAAlB,EAAyB,oBAAzB,CAFrB;EAIA,OACEC,oBAACC,iBAAD;IACEd,KAAK,EAAE,CACL;MACEe,KAAK,EAAEhB,IADT;MAEEiB,MAAM,EAAEjB,IAFV;MAGEkB,YAAY,EAAElB,IAAI,GAAG,CAHvB;MAIEM;IAJF,CADK,EAOLa,MAAM,CAACC,SAPF,EAQLX,SARK;EADT,GAWMN,IAXN,GAaEW,oBAACO,aAAD;IAAMC,MAAM,EAAEvB,IAAd;IAAoBY,KAAK,EAAED,SAA3B;IAAsCV,IAAI,EAAEA,IAAI,GAAG;EAAnD,EAbF,CADF;AAiBD,CAxBD;AA0BAH,MAAM,CAAC0B,WAAP,GAAqB,aAArB;AAEA,IAAMJ,MAAM,GAAGf,uBAAU,CAACoB,MAAX,CAAkB;EAC/BJ,SAAS,EAAE;IACTK,cAAc,EAAE,QADP;IAETC,UAAU,EAAE;EAFH;AADoB,CAAlB,CAAf;AAAA,eAOeC,sBAAS,EAAC9B,MAAD,CAAxB;AAAA","names":["defaultSize","Avatar","_ref","icon","size","style","theme","rest","StyleSheet","flatten","backgroundColor","colors","primary","restStyle","textColor","color","getContrastingColor","white","React","View","width","height","borderRadius","styles","container","Icon","source","displayName","create","justifyContent","alignItems","withTheme"],"sources":["AvatarIcon.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, StyleSheet, StyleProp } from 'react-native';\nimport Icon, { IconSource } from '../Icon';\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\nimport getContrastingColor from '../../utils/getContrastingColor';\n\nconst defaultSize = 64;\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Icon to display for the `Avatar`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  /**\n   * Custom color for the icon.\n   */\n  color?: string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Icon size={24} icon=\"folder\" />\n * );\n * ```\n */\nconst Avatar = ({ icon, size = defaultSize, style, theme, ...rest }: Props) => {\n  const { backgroundColor = theme.colors.primary, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor =\n    rest.color ??\n    getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n\n  return (\n    <View\n      style={[\n        {\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          backgroundColor,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      <Icon source={icon} color={textColor} size={size * 0.6} />\n    </View>\n  );\n};\n\nAvatar.displayName = 'Avatar.Icon';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(Avatar);\n"]},"metadata":{},"sourceType":"script"}