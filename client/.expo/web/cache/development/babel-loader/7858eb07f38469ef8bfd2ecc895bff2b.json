{"ast":null,"code":"\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _EmitterSubscription = _interopRequireDefault(require(\"./EmitterSubscription\"));\nvar _EventSubscriptionVendor = _interopRequireDefault(require(\"./EventSubscriptionVendor\"));\nvar _emptyFunction = _interopRequireDefault(require(\"fbjs/lib/emptyFunction\"));\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar EventEmitter = function () {\n  function EventEmitter(subscriber) {\n    _classCallCheck(this, EventEmitter);\n    this._subscriber = subscriber || new _EventSubscriptionVendor.default();\n  }\n\n  EventEmitter.prototype.addListener = function addListener(eventType, listener, context) {\n    return this._subscriber.addSubscription(eventType, new _EmitterSubscription.default(this, this._subscriber, listener, context));\n  };\n\n  EventEmitter.prototype.once = function once(eventType, listener, context) {\n    var _this = this;\n    return this.addListener(eventType, function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this.removeCurrentListener();\n      listener.apply(context, args);\n    });\n  };\n\n  EventEmitter.prototype.removeAllListeners = function removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  };\n\n  EventEmitter.prototype.removeCurrentListener = function removeCurrentListener() {\n    (0, _invariant.default)(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');\n    this.removeSubscription(this._currentSubscription);\n  };\n\n  EventEmitter.prototype.removeSubscription = function removeSubscription(subscription) {\n    (0, _invariant.default)(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n    this._subscriber.removeSubscription(subscription);\n  };\n\n  EventEmitter.prototype.listeners = function listeners(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    return subscriptions ? subscriptions.filter(_emptyFunction.default.thatReturnsTrue).map(function (subscription) {\n      return subscription.listener;\n    }) : [];\n  };\n\n  EventEmitter.prototype.emit = function emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i];\n\n        if (subscription) {\n          this._currentSubscription = subscription;\n          subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));\n        }\n      }\n      this._currentSubscription = null;\n    }\n  };\n\n  EventEmitter.prototype.removeListener = function removeListener(eventType, listener) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i];\n\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  };\n  return EventEmitter;\n}();\nvar _default = EventEmitter;\nexports.default = _default;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","EventEmitter","subscriber","_subscriber","EventSubscriptionVendor","prototype","addListener","eventType","listener","context","addSubscription","EmitterSubscription","once","_this","_len","arguments","length","args","Array","_key","removeCurrentListener","apply","removeAllListeners","removeAllSubscriptions","invariant","_currentSubscription","removeSubscription","subscription","emitter","listeners","subscriptions","getSubscriptionsForType","filter","emptyFunction","thatReturnsTrue","map","emit","i","l","slice","call","removeListener","remove"],"sources":["C:/Users/prariya/Desktop/Modhiw/client/node_modules/react-native-phone-number-input/node_modules/react-native-web/dist/vendor/react-native/emitter/EventEmitter.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule EventEmitter\n * @noflow\n * @typecheck\n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport EmitterSubscription from './EmitterSubscription';\nimport EventSubscriptionVendor from './EventSubscriptionVendor';\n\nimport emptyFunction from 'fbjs/lib/emptyFunction';\nimport invariant from 'fbjs/lib/invariant';\n\n/**\n * @class EventEmitter\n * @description\n * An EventEmitter is responsible for managing a set of listeners and publishing\n * events to them when it is told that such events happened. In addition to the\n * data for the given event it also sends a event control object which allows\n * the listeners/handlers to prevent the default behavior of the given event.\n *\n * The emitter is designed to be generic enough to support all the different\n * contexts in which one might want to emit events. It is a simple multicast\n * mechanism on top of which extra functionality can be composed. For example, a\n * more advanced emitter may use an EventHolder and EventFactory.\n */\n\nvar EventEmitter = function () {\n\n  /**\n   * @constructor\n   *\n   * @param {EventSubscriptionVendor} subscriber - Optional subscriber instance\n   *   to use. If omitted, a new subscriber will be created for the emitter.\n   */\n  function EventEmitter(subscriber) {\n    _classCallCheck(this, EventEmitter);\n\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n\n  /**\n   * Adds a listener to be invoked when events of the specified type are\n   * emitted. An optional calling context may be provided. The data arguments\n   * emitted will be passed to the listener function.\n   *\n   * TODO: Annotate the listener arg's type. This is tricky because listeners\n   *       can be invoked with varargs.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n\n\n  EventEmitter.prototype.addListener = function addListener(eventType, listener, context) {\n\n    return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));\n  };\n\n  /**\n   * Similar to addListener, except that the listener is removed after it is\n   * invoked once.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke only once when the\n   *   specified event is emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n\n\n  EventEmitter.prototype.once = function once(eventType, listener, context) {\n    var _this = this;\n\n    return this.addListener(eventType, function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this.removeCurrentListener();\n      listener.apply(context, args);\n    });\n  };\n\n  /**\n   * Removes all of the registered listeners, including those registered as\n   * listener maps.\n   *\n   * @param {?string} eventType - Optional name of the event whose registered\n   *   listeners to remove\n   */\n\n\n  EventEmitter.prototype.removeAllListeners = function removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  };\n\n  /**\n   * Provides an API that can be called during an eventing cycle to remove the\n   * last listener that was invoked. This allows a developer to provide an event\n   * object that can remove the listener (or listener map) during the\n   * invocation.\n   *\n   * If it is called when not inside of an emitting cycle it will throw.\n   *\n   * @throws {Error} When called not during an eventing cycle\n   *\n   * @example\n   *   var subscription = emitter.addListenerMap({\n   *     someEvent: function(data, event) {\n   *       console.log(data);\n   *       emitter.removeCurrentListener();\n   *     }\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   *   emitter.emit('someEvent', 'def'); // does not log anything\n   */\n\n\n  EventEmitter.prototype.removeCurrentListener = function removeCurrentListener() {\n    invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');\n    this.removeSubscription(this._currentSubscription);\n  };\n\n  /**\n   * Removes a specific subscription. Called by the `remove()` method of the\n   * subscription itself to ensure any necessary cleanup is performed.\n   */\n\n\n  EventEmitter.prototype.removeSubscription = function removeSubscription(subscription) {\n    invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n    this._subscriber.removeSubscription(subscription);\n  };\n\n  /**\n   * Returns an array of listeners that are currently registered for the given\n   * event.\n   *\n   * @param {string} eventType - Name of the event to query\n   * @returns {array}\n   */\n\n\n  EventEmitter.prototype.listeners = function listeners(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {\n      return subscription.listener;\n    }) : [];\n  };\n\n  /**\n   * Emits an event of the given type with the given data. All handlers of that\n   * particular type will be notified.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\n   *\n   * @example\n   *   emitter.addListener('someEvent', function(message) {\n   *     console.log(message);\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   */\n\n\n  EventEmitter.prototype.emit = function emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i];\n\n        // The subscription may have been removed during this event loop.\n        if (subscription) {\n          this._currentSubscription = subscription;\n          subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));\n        }\n      }\n      this._currentSubscription = null;\n    }\n  };\n\n  /**\n   * Removes the given listener for event of specific type.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   *\n   * @example\n   *   emitter.removeListener('someEvent', function(message) {\n   *     console.log(message);\n   *   }); // removes the listener if already registered\n   *\n   */\n\n\n  EventEmitter.prototype.removeListener = function removeListener(eventType, listener) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i];\n\n        // The subscription may have been removed during this event loop.\n        // its listener matches the listener in method parameters\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  };\n\n  return EventEmitter;\n}();\n\nexport default EventEmitter;"],"mappings":"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"},"metadata":{},"sourceType":"script"}