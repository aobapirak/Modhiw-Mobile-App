{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _color = _interopRequireDefault(require(\"color\"));\nvar _Icon = _interopRequireDefault(require(\"./Icon\"));\nvar _MaterialCommunityIcon = _interopRequireDefault(require(\"./MaterialCommunityIcon\"));\nvar _Surface = _interopRequireDefault(require(\"./Surface\"));\nvar _Text = _interopRequireDefault(require(\"./Typography/Text\"));\nvar _TouchableRipple = _interopRequireDefault(require(\"./TouchableRipple/TouchableRipple\"));\nvar _theming = require(\"../core/theming\");\nvar _colors = require(\"../styles/colors\");\nvar _excluded = [\"mode\", \"children\", \"icon\", \"avatar\", \"selected\", \"disabled\", \"accessibilityLabel\", \"closeIconAccessibilityLabel\", \"onPress\", \"onLongPress\", \"onClose\", \"closeIcon\", \"textStyle\", \"style\", \"theme\", \"testID\", \"selectedColor\", \"ellipsizeMode\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar Chip = function Chip(_ref) {\n  var _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? 'flat' : _ref$mode,\n    children = _ref.children,\n    icon = _ref.icon,\n    avatar = _ref.avatar,\n    _ref$selected = _ref.selected,\n    selected = _ref$selected === void 0 ? false : _ref$selected,\n    _ref$disabled = _ref.disabled,\n    disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n    accessibilityLabel = _ref.accessibilityLabel,\n    _ref$closeIconAccessi = _ref.closeIconAccessibilityLabel,\n    closeIconAccessibilityLabel = _ref$closeIconAccessi === void 0 ? 'Close' : _ref$closeIconAccessi,\n    onPress = _ref.onPress,\n    onLongPress = _ref.onLongPress,\n    onClose = _ref.onClose,\n    closeIcon = _ref.closeIcon,\n    textStyle = _ref.textStyle,\n    style = _ref.style,\n    theme = _ref.theme,\n    testID = _ref.testID,\n    selectedColor = _ref.selectedColor,\n    ellipsizeMode = _ref.ellipsizeMode,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var _React$useRef = React.useRef(new _reactNative.Animated.Value(0)),\n    elevation = _React$useRef.current;\n  var handlePressIn = function handlePressIn() {\n    var scale = theme.animation.scale;\n    _reactNative.Animated.timing(elevation, {\n      toValue: 4,\n      duration: 200 * scale,\n      useNativeDriver: true\n    }).start();\n  };\n  var handlePressOut = function handlePressOut() {\n    var scale = theme.animation.scale;\n    _reactNative.Animated.timing(elevation, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  };\n  var dark = theme.dark,\n    colors = theme.colors;\n  var defaultBackgroundColor = mode === 'outlined' ? colors.surface : dark ? '#383838' : '#ebebeb';\n  var _ref2 = _reactNative.StyleSheet.flatten(style) || {},\n    _ref2$backgroundColor = _ref2.backgroundColor,\n    backgroundColor = _ref2$backgroundColor === void 0 ? defaultBackgroundColor : _ref2$backgroundColor,\n    _ref2$borderRadius = _ref2.borderRadius,\n    borderRadius = _ref2$borderRadius === void 0 ? 16 : _ref2$borderRadius;\n  var borderColor = mode === 'outlined' ? (0, _color.default)(selectedColor !== undefined ? selectedColor : (0, _color.default)(dark ? _colors.white : _colors.black)).alpha(0.29).rgb().string() : backgroundColor;\n  var textColor = disabled ? colors.disabled : (0, _color.default)(selectedColor !== undefined ? selectedColor : colors.text).alpha(0.87).rgb().string();\n  var iconColor = disabled ? colors.disabled : (0, _color.default)(selectedColor !== undefined ? selectedColor : colors.text).alpha(0.54).rgb().string();\n  var backgroundColorString = typeof backgroundColor === 'string' ? backgroundColor : defaultBackgroundColor;\n  var selectedBackgroundColor = (dark ? (0, _color.default)(backgroundColorString).lighten(mode === 'outlined' ? 0.2 : 0.4) : (0, _color.default)(backgroundColorString).darken(mode === 'outlined' ? 0.08 : 0.2)).rgb().string();\n  var underlayColor = selectedColor ? (0, _color.default)(selectedColor).fade(0.5).rgb().string() : selectedBackgroundColor;\n  var accessibilityTraits = ['button'];\n  var accessibilityState = {\n    selected: selected,\n    disabled: disabled\n  };\n  if (selected) {\n    accessibilityTraits.push('selected');\n  }\n  if (disabled) {\n    accessibilityTraits.push('disabled');\n  }\n  return React.createElement(_Surface.default, _extends({\n    style: [styles.container, {\n      elevation: _reactNative.Platform.OS === 'android' ? elevation : 0,\n      backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n      borderColor: borderColor,\n      borderRadius: borderRadius\n    }, style]\n  }, rest), React.createElement(_TouchableRipple.default, {\n    borderless: true,\n    delayPressIn: 0,\n    style: [{\n      borderRadius: borderRadius\n    }, styles.touchable],\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    underlayColor: underlayColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n\n    accessibilityTraits: accessibilityTraits,\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: accessibilityState,\n    testID: testID\n  }, React.createElement(_reactNative.View, {\n    style: [styles.content, {\n      paddingRight: onClose ? 32 : 4\n    }]\n  }, avatar && !icon ? React.createElement(_reactNative.View, {\n    style: [styles.avatarWrapper, disabled && {\n      opacity: 0.26\n    }]\n  }, React.isValidElement(avatar) ? React.cloneElement(avatar, {\n    style: [styles.avatar, avatar.props.style]\n  }) : avatar) : null, icon || selected ? React.createElement(_reactNative.View, {\n    style: [styles.icon, avatar ? [styles.avatar, styles.avatarSelected] : null]\n  }, icon ? React.createElement(_Icon.default, {\n    source: icon,\n    color: avatar ? _colors.white : iconColor,\n    size: 18\n  }) : React.createElement(_MaterialCommunityIcon.default, {\n    name: \"check\",\n    color: avatar ? _colors.white : iconColor,\n    size: 18,\n    direction: \"ltr\"\n  })) : null, React.createElement(_Text.default, {\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.text, Object.assign({}, theme.fonts.regular, {\n      color: textColor,\n      marginRight: onClose ? 0 : 8,\n      marginLeft: avatar || icon || selected ? 4 : 8\n    }), textStyle],\n    ellipsizeMode: ellipsizeMode\n  }, children))), onClose ? React.createElement(_reactNative.View, {\n    style: styles.closeButtonStyle\n  }, React.createElement(_reactNative.TouchableWithoutFeedback, {\n    onPress: onClose,\n\n    accessibilityTraits: \"button\",\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityLabel: closeIconAccessibilityLabel\n  }, React.createElement(_reactNative.View, {\n    style: [styles.icon, styles.closeIcon]\n  }, closeIcon ? React.createElement(_Icon.default, {\n    source: closeIcon,\n    color: iconColor,\n    size: 16\n  }) : React.createElement(_MaterialCommunityIcon.default, {\n    name: \"close-circle\",\n    size: 16,\n    color: iconColor,\n    direction: \"ltr\"\n  })))) : null);\n};\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    borderWidth: _reactNative.StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: _reactNative.Platform.select({\n      default: 'column',\n      web: 'row'\n    })\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n    flexGrow: 1\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center'\n  },\n  closeIcon: {\n    marginRight: 4\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12\n  },\n  avatarWrapper: {\n    marginRight: 4\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)'\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  touchable: {\n    flexGrow: 1\n  }\n});\nvar _default = (0, _theming.withTheme)(Chip);\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AAwGA,IAAMA,IAAI,GAAG,SAAPA,IAAI,CAAGC,MAoBA;EAAA,qBAnBXC,IAAI;IAAJA,IAAI,0BAAG,MADK;IAEZC,QAFY,GAoBDF,KAlBXE,QAFY;IAGZC,IAHY,GAoBDH,KAjBXG,IAHY;IAIZC,MAJY,GAoBDJ,KAhBXI,MAJY;IAAA,gBAoBDJ,KAfXK,QAAQ;IAARA,QAAQ,8BAAG,KALC;IAAA,gBAoBDL,KAdXM,QAAQ;IAARA,QAAQ,8BAAG,KANC;IAOZC,kBAPY,GAoBDP,KAbXO,kBAPY;IAAA,wBAoBDP,KAZXQ,2BAA2B;IAA3BA,2BAA2B,sCAAG,OARlB;IASZC,OATY,GAoBDT,KAXXS,OATY;IAUZC,WAVY,GAoBDV,KAVXU,WAVY;IAWZC,OAXY,GAoBDX,KATXW,OAXY;IAYZC,SAZY,GAoBDZ,KARXY,SAZY;IAaZC,SAbY,GAoBDb,KAPXa,SAbY;IAcZC,KAdY,GAoBDd,KANXc,KAdY;IAeZC,KAfY,GAoBDf,KALXe,KAfY;IAgBZC,MAhBY,GAoBDhB,KAJXgB,MAhBY;IAiBZC,aAjBY,GAoBDjB,KAHXiB,aAjBY;IAkBZC,aAlBY,GAoBDlB,KAFXkB,aAlBY;IAmBTC,8CACQnB;EACX,oBAA+BoB,KAAK,CAACC,MAAN,CAC7B,IAAIC,qBAAQ,CAACC,KAAb,CAAmB,CAAnB,CAD6B,CAA/B;IAAiBC,0BAATC,OAAO;EAIf,IAAMC,aAAa,GAAG,SAAhBA,aAAa,GAAS;IAC1B,IAAQC,QAAUZ,KAAK,CAACa,SAAxB,CAAQD;IACRL,qBAAQ,CAACO,MAAT,CAAgBL,SAAhB,EAA2B;MACzBM,OAAO,EAAE,CADgB;MAEzBC,QAAQ,EAAE,MAAMJ,KAFS;MAGzBK,eAAe,EAAE;IAHQ,CAA3B,EAIGC,KAJH;EAKD,CAPD;EASA,IAAMC,cAAc,GAAG,SAAjBA,cAAc,GAAS;IAC3B,IAAQP,QAAUZ,KAAK,CAACa,SAAxB,CAAQD;IACRL,qBAAQ,CAACO,MAAT,CAAgBL,SAAhB,EAA2B;MACzBM,OAAO,EAAE,CADgB;MAEzBC,QAAQ,EAAE,MAAMJ,KAFS;MAGzBK,eAAe,EAAE;IAHQ,CAA3B,EAIGC,KAJH;EAKD,CAPD;EASA,IAAQE,IAAF,GAAmBpB,KAAzB,CAAQoB,IAAF;IAAQC,SAAWrB,KAAzB,CAAcqB;EACd,IAAMC,sBAAsB,GAC1BpC,IAAI,KAAK,UAAT,GAAsBmC,MAAM,CAACE,OAA7B,GAAuCH,IAAI,GAAG,SAAH,GAAe,SAD5D;EAGA,YACGI,uBAAU,CAACC,OAAX,CAAmB1B,KAAnB,KAA6B,EADhC;IAAA,8BAAQ2B,eAAe;IAAfA,eAAe,sCAAGJ,sBAApB;IAAA,2BAA4CK,YAAY;IAAZA,YAAY,mCAAG;EAGjE,IAAMC,WAAW,GACf1C,IAAI,KAAK,UAAT,GACI2C,kBAAK,EACH3B,aAAa,KAAK4B,SAAlB,GACI5B,aADJ,GAEI2B,kBAAK,EAACT,IAAI,GAAGW,aAAH,GAAWC,aAAhB,CAHN,CAAL,CAKGC,KALH,CAKS,IALT,EAMGC,GANH,GAOGC,MAPH,EADJ,GASIT,eAVN;EAWA,IAAMU,SAAS,GAAG7C,QAAQ,GACtB8B,MAAM,CAAC9B,QADe,GAEtBsC,kBAAK,EAAC3B,aAAa,KAAK4B,SAAlB,GAA8B5B,aAA9B,GAA8CmB,MAAM,CAACgB,IAAtD,CAAL,CACGJ,KADH,CACS,IADT,EAEGC,GAFH,GAGGC,MAHH,EAFJ;EAMA,IAAMG,SAAS,GAAG/C,QAAQ,GACtB8B,MAAM,CAAC9B,QADe,GAEtBsC,kBAAK,EAAC3B,aAAa,KAAK4B,SAAlB,GAA8B5B,aAA9B,GAA8CmB,MAAM,CAACgB,IAAtD,CAAL,CACGJ,KADH,CACS,IADT,EAEGC,GAFH,GAGGC,MAHH,EAFJ;EAOA,IAAMI,qBAAqB,GACzB,OAAOb,eAAP,KAA2B,QAA3B,GACIA,eADJ,GAEIJ,sBAHN;EAIA,IAAMkB,uBAAuB,GAAG,CAC9BpB,IAAI,GACAS,kBAAK,EAACU,qBAAD,CAAL,CAA6BE,OAA7B,CAAqCvD,IAAI,KAAK,UAAT,GAAsB,GAAtB,GAA4B,GAAjE,CADA,GAEA2C,kBAAK,EAACU,qBAAD,CAAL,CAA6BG,MAA7B,CAAoCxD,IAAI,KAAK,UAAT,GAAsB,IAAtB,GAA6B,GAAjE,CAH0B,EAK7BgD,GAL6B,GAM7BC,MAN6B,EAAhC;EAQA,IAAMQ,aAAa,GAAGzC,aAAa,GAC/B2B,kBAAK,EAAC3B,aAAD,CAAL,CAAqB0C,IAArB,CAA0B,GAA1B,EAA+BV,GAA/B,GAAqCC,MAArC,EAD+B,GAE/BK,uBAFJ;EAIA,IAAMK,mBAAmB,GAAG,CAAC,QAAD,CAA5B;EACA,IAAMC,kBAAsC,GAAG;IAC7CxD,QAD6C,EAC7CA,QAD6C;IAE7CC;EAF6C,CAA/C;EAKA,IAAID,QAAJ,EAAc;IACZuD,mBAAmB,CAACE,IAApB,CAAyB,UAAzB;EACD;EAED,IAAIxD,QAAJ,EAAc;IACZsD,mBAAmB,CAACE,IAApB,CAAyB,UAAzB;EACD;EAED,OACE1C,oBAAC2C,gBAAD;IACEjD,KAAK,EACH,CACEkD,MAAM,CAACC,SADT,EAEE;MACEzC,SAAS,EAAE0C,qBAAQ,CAACC,EAAT,KAAgB,SAAhB,GAA4B3C,SAA5B,GAAwC,CADrD;MAEEiB,eAAe,EAAEpC,QAAQ,GACrBkD,uBADqB,GAErBd,eAJN;MAKEE,WALF,EAKEA,WALF;MAMED;IANF,CAFF,EAUE5B,KAVF;EAFJ,GAeMK,IAfN,GAiBEC,oBAACgD,wBAAD;IACEC,UAAU,MADZ;IAEEC,YAAY,EAAE,CAFhB;IAGExD,KAAK,EAAE,CAAC;MAAE4B;IAAF,CAAD,EAAmBsB,MAAM,CAACO,SAA1B,CAHT;IAIE9D,OAAO,EAAEA,OAJX;IAKEC,WAAW,EAAEA,WALf;IAME8D,SAAS,EAAE9C,aANb;IAOE+C,UAAU,EAAEvC,cAPd;IAQEwB,aAAa,EAAEA,aARjB;IASEpD,QAAQ,EAAEA,QATZ;IAUEC,kBAAkB,EAAEA,kBAVtB;;IAYEqD,mBAAmB,EAAEA,mBAZvB;IAaEc,0BAA0B,EAAC,QAb7B;IAcEC,iBAAiB,EAAC,QAdpB;IAeEd,kBAAkB,EAAEA,kBAftB;IAgBE7C,MAAM,EAAEA;EAhBV,GAkBEI,oBAACwD,iBAAD;IAAM9D,KAAK,EAAE,CAACkD,MAAM,CAACa,OAAR,EAAiB;MAAEC,YAAY,EAAEnE,OAAO,GAAG,EAAH,GAAQ;IAA/B,CAAjB;EAAb,GACGP,MAAM,IAAI,CAACD,IAAX,GACCiB,oBAACwD,iBAAD;IAAM9D,KAAK,EAAE,CAACkD,MAAM,CAACe,aAAR,EAAuBzE,QAAQ,IAAI;MAAE0E,OAAO,EAAE;IAAX,CAAnC;EAAb,GACG5D,KAAK,CAAC6D,cAAN,CAAqB7E,MAArB,IACGgB,KAAK,CAAC8D,YAAN,CAAmB9E,MAAnB,EAA2B;IACzBU,KAAK,EAAE,CAACkD,MAAM,CAAC5D,MAAR,EAAgBA,MAAM,CAAC+E,KAAP,CAAarE,KAA7B;EADkB,CAA3B,CADH,GAIGV,MALN,CADD,GAQG,IATN,EAUGD,IAAI,IAAIE,QAAR,GACCe,oBAACwD,iBAAD;IACE9D,KAAK,EAAE,CACLkD,MAAM,CAAC7D,IADF,EAELC,MAAM,GAAG,CAAC4D,MAAM,CAAC5D,MAAR,EAAgB4D,MAAM,CAACoB,cAAvB,CAAH,GAA4C,IAF7C;EADT,GAMGjF,IAAI,GACHiB,oBAACiE,aAAD;IACEC,MAAM,EAAEnF,IADV;IAEEyC,KAAK,EAAExC,MAAM,GAAG0C,aAAH,GAAWO,SAF1B;IAGEkC,IAAI,EAAE;EAHR,EADG,GAOHnE,oBAACoE,8BAAD;IACEC,IAAI,EAAC,OADP;IAEE7C,KAAK,EAAExC,MAAM,GAAG0C,aAAH,GAAWO,SAF1B;IAGEkC,IAAI,EAAE,EAHR;IAIEG,SAAS,EAAC;EAJZ,EAbJ,CADD,GAsBG,IAhCN,EAiCEtE,oBAACuE,aAAD;IACEC,UAAU,EAAE,KADd;IAEEC,aAAa,EAAE,CAFjB;IAGE/E,KAAK,EAAE,CACLkD,MAAM,CAACZ,IADF,oBAGArC,KAAK,CAAC+E,KAAN,CAAYC,OADjB;MAEEnD,KAAK,EAAEO,SAFT;MAGE6C,WAAW,EAAErF,OAAO,GAAG,CAAH,GAAO,CAH7B;MAIEsF,UAAU,EAAE7F,MAAM,IAAID,IAAV,IAAkBE,QAAlB,GAA6B,CAA7B,GAAiC;IAAA,IAE/CQ,SARK,CAHT;IAaEK,aAAa,EAAEA;EAbjB,GAeGhB,QAfH,CAjCF,CAlBF,CAjBF,EAuFGS,OAAO,GACNS,oBAACwD,iBAAD;IAAM9D,KAAK,EAAEkD,MAAM,CAACkC;EAApB,GACE9E,oBAAC+E,qCAAD;IACE1F,OAAO,EAAEE,OADX;;IAGEiD,mBAAmB,EAAC,QAHtB;IAIEc,0BAA0B,EAAC,QAJ7B;IAKEC,iBAAiB,EAAC,QALpB;IAMEpE,kBAAkB,EAAEC;EANtB,GAQEY,oBAACwD,iBAAD;IAAM9D,KAAK,EAAE,CAACkD,MAAM,CAAC7D,IAAR,EAAc6D,MAAM,CAACpD,SAArB;EAAb,GACGA,SAAS,GACRQ,oBAACiE,aAAD;IAAMC,MAAM,EAAE1E,SAAd;IAAyBgC,KAAK,EAAES,SAAhC;IAA2CkC,IAAI,EAAE;EAAjD,EADQ,GAGRnE,oBAACoE,8BAAD;IACEC,IAAI,EAAC,cADP;IAEEF,IAAI,EAAE,EAFR;IAGE3C,KAAK,EAAES,SAHT;IAIEqC,SAAS,EAAC;EAJZ,EAJJ,CARF,CADF,CADM,GAwBJ,IA/GN,CADF;AAmHD,CA3ND;AA6NA,IAAM1B,MAAM,GAAGzB,uBAAU,CAAC6D,MAAX,CAAkB;EAC/BnC,SAAS,EAAE;IACToC,WAAW,EAAE9D,uBAAU,CAAC+D,aADf;IAETC,WAAW,EAAE,OAFJ;IAGTC,aAAa,EAAEtC,qBAAQ,CAACuC,MAAT,CAAgB;MAAEC,OAAO,EAAE,QAAX;MAAqBC,GAAG,EAAE;IAA1B,CAAhB;EAHN,CADoB;EAM/B9B,OAAO,EAAE;IACP2B,aAAa,EAAE,KADR;IAEPI,UAAU,EAAE,QAFL;IAGPC,WAAW,EAAE,CAHN;IAIPC,QAAQ,EAAE,UAJH;IAKPC,QAAQ,EAAE;EALH,CANsB;EAa/B5G,IAAI,EAAE;IACJ6G,OAAO,EAAE,CADL;IAEJC,SAAS,EAAE;EAFP,CAbyB;EAiB/BrG,SAAS,EAAE;IACToF,WAAW,EAAE;EADJ,CAjBoB;EAoB/B5C,IAAI,EAAE;IACJ8D,SAAS,EAAE,EADP;IAEJC,UAAU,EAAE,EAFR;IAGJC,iBAAiB,EAAE,QAHf;IAIJC,cAAc,EAAE;EAJZ,CApByB;EA0B/BjH,MAAM,EAAE;IACNkH,KAAK,EAAE,EADD;IAENC,MAAM,EAAE,EAFF;IAGN7E,YAAY,EAAE;EAHR,CA1BuB;EA+B/BqC,aAAa,EAAE;IACbiB,WAAW,EAAE;EADA,CA/BgB;EAkC/BZ,cAAc,EAAE;IACd0B,QAAQ,EAAE,UADI;IAEdU,GAAG,EAAE,CAFS;IAGdC,IAAI,EAAE,CAHQ;IAIdhF,eAAe,EAAE;EAJH,CAlCe;EAwC/ByD,gBAAgB,EAAE;IAChBY,QAAQ,EAAE,UADM;IAEhBY,KAAK,EAAE,CAFS;IAGhBH,MAAM,EAAE,MAHQ;IAIhBI,cAAc,EAAE,QAJA;IAKhBf,UAAU,EAAE;EALI,CAxCa;EA+C/BrC,SAAS,EAAE;IACTwC,QAAQ,EAAE;EADD;AA/CoB,CAAlB,CAAf;AAAA,eAoDea,sBAAS,EAAC7H,IAAD,CAAxB;AAAA","names":["Chip","_ref","mode","children","icon","avatar","selected","disabled","accessibilityLabel","closeIconAccessibilityLabel","onPress","onLongPress","onClose","closeIcon","textStyle","style","theme","testID","selectedColor","ellipsizeMode","rest","React","useRef","Animated","Value","elevation","current","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","dark","colors","defaultBackgroundColor","surface","StyleSheet","flatten","backgroundColor","borderRadius","borderColor","color","undefined","white","black","alpha","rgb","string","textColor","text","iconColor","backgroundColorString","selectedBackgroundColor","lighten","darken","underlayColor","fade","accessibilityTraits","accessibilityState","push","Surface","styles","container","Platform","OS","TouchableRipple","borderless","delayPressIn","touchable","onPressIn","onPressOut","accessibilityComponentType","accessibilityRole","View","content","paddingRight","avatarWrapper","opacity","isValidElement","cloneElement","props","avatarSelected","Icon","source","size","MaterialCommunityIcon","name","direction","Text","selectable","numberOfLines","fonts","regular","marginRight","marginLeft","closeButtonStyle","TouchableWithoutFeedback","create","borderWidth","hairlineWidth","borderStyle","flexDirection","select","default","web","alignItems","paddingLeft","position","flexGrow","padding","alignSelf","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","top","left","right","justifyContent","withTheme"],"sources":["Chip.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  Animated,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport type { IconSource } from './Icon';\nimport Icon from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport type { EllipsizeProp } from '../types';\n\nexport type Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Icon to display as the close button for the `Chip`. The icon appears only when the onClose prop is specified.\n   */\n  closeIcon?: IconSource;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   */\n  selectedColor?: string;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility label for the close icon. This is read by the screen reader when the user taps the close icon.\n   */\n  closeIconAccessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n  /**\n   * Ellipsize Mode for the children text\n   */\n  ellipsizeMode?: EllipsizeProp;\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Chip = ({\n  mode = 'flat',\n  children,\n  icon,\n  avatar,\n  selected = false,\n  disabled = false,\n  accessibilityLabel,\n  closeIconAccessibilityLabel = 'Close',\n  onPress,\n  onLongPress,\n  onClose,\n  closeIcon,\n  textStyle,\n  style,\n  theme,\n  testID,\n  selectedColor,\n  ellipsizeMode,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n\n  const handlePressIn = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: 4,\n      duration: 200 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const { dark, colors } = theme;\n  const defaultBackgroundColor =\n    mode === 'outlined' ? colors.surface : dark ? '#383838' : '#ebebeb';\n\n  const { backgroundColor = defaultBackgroundColor, borderRadius = 16 } =\n    (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  const borderColor =\n    mode === 'outlined'\n      ? color(\n          selectedColor !== undefined\n            ? selectedColor\n            : color(dark ? white : black)\n        )\n          .alpha(0.29)\n          .rgb()\n          .string()\n      : backgroundColor;\n  const textColor = disabled\n    ? colors.disabled\n    : color(selectedColor !== undefined ? selectedColor : colors.text)\n        .alpha(0.87)\n        .rgb()\n        .string();\n  const iconColor = disabled\n    ? colors.disabled\n    : color(selectedColor !== undefined ? selectedColor : colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n\n  const backgroundColorString =\n    typeof backgroundColor === 'string'\n      ? backgroundColor\n      : defaultBackgroundColor;\n  const selectedBackgroundColor = (\n    dark\n      ? color(backgroundColorString).lighten(mode === 'outlined' ? 0.2 : 0.4)\n      : color(backgroundColorString).darken(mode === 'outlined' ? 0.08 : 0.2)\n  )\n    .rgb()\n    .string();\n\n  const underlayColor = selectedColor\n    ? color(selectedColor).fade(0.5).rgb().string()\n    : selectedBackgroundColor;\n\n  const accessibilityTraits = ['button'];\n  const accessibilityState: AccessibilityState = {\n    selected,\n    disabled,\n  };\n\n  if (selected) {\n    accessibilityTraits.push('selected');\n  }\n\n  if (disabled) {\n    accessibilityTraits.push('disabled');\n  }\n\n  return (\n    <Surface\n      style={\n        [\n          styles.container,\n          {\n            elevation: Platform.OS === 'android' ? elevation : 0,\n            backgroundColor: selected\n              ? selectedBackgroundColor\n              : backgroundColor,\n            borderColor,\n            borderRadius,\n          },\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      {...rest}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        style={[{ borderRadius }, styles.touchable]}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        underlayColor={underlayColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={accessibilityTraits}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={accessibilityState}\n        testID={testID}\n      >\n        <View style={[styles.content, { paddingRight: onClose ? 32 : 4 }]}>\n          {avatar && !icon ? (\n            <View style={[styles.avatarWrapper, disabled && { opacity: 0.26 }]}>\n              {React.isValidElement(avatar)\n                ? React.cloneElement(avatar, {\n                    style: [styles.avatar, avatar.props.style],\n                  })\n                : avatar}\n            </View>\n          ) : null}\n          {icon || selected ? (\n            <View\n              style={[\n                styles.icon,\n                avatar ? [styles.avatar, styles.avatarSelected] : null,\n              ]}\n            >\n              {icon ? (\n                <Icon\n                  source={icon}\n                  color={avatar ? white : iconColor}\n                  size={18}\n                />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"check\"\n                  color={avatar ? white : iconColor}\n                  size={18}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          ) : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.text,\n              {\n                ...theme.fonts.regular,\n                color: textColor,\n                marginRight: onClose ? 0 : 8,\n                marginLeft: avatar || icon || selected ? 4 : 8,\n              },\n              textStyle,\n            ]}\n            ellipsizeMode={ellipsizeMode}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n      {onClose ? (\n        <View style={styles.closeButtonStyle}>\n          <TouchableWithoutFeedback\n            onPress={onClose}\n            // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n            accessibilityTraits=\"button\"\n            accessibilityComponentType=\"button\"\n            accessibilityRole=\"button\"\n            accessibilityLabel={closeIconAccessibilityLabel}\n          >\n            <View style={[styles.icon, styles.closeIcon]}>\n              {closeIcon ? (\n                <Icon source={closeIcon} color={iconColor} size={16} />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"close-circle\"\n                  size={16}\n                  color={iconColor}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          </TouchableWithoutFeedback>\n        </View>\n      ) : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({ default: 'column', web: 'row' }),\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n    flexGrow: 1,\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center',\n  },\n  closeIcon: {\n    marginRight: 4,\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  touchable: {\n    flexGrow: 1,\n  },\n});\n\nexport default withTheme(Chip);\n"]},"metadata":{},"sourceType":"script"}