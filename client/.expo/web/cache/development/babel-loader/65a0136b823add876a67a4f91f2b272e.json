{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _color = _interopRequireDefault(require(\"color\"));\nvar _IconButton = _interopRequireDefault(require(\"./IconButton\"));\nvar _Surface = _interopRequireDefault(require(\"./Surface\"));\nvar _theming = require(\"../core/theming\");\nvar _MaterialCommunityIcon = _interopRequireDefault(require(\"./MaterialCommunityIcon\"));\nvar _excluded = [\"clearAccessibilityLabel\", \"clearIcon\", \"icon\", \"iconColor\", \"inputStyle\", \"onIconPress\", \"placeholder\", \"searchAccessibilityLabel\", \"style\", \"theme\", \"value\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar Searchbar = React.forwardRef(function (_ref, ref) {\n  var _ref$clearAccessibili = _ref.clearAccessibilityLabel,\n    clearAccessibilityLabel = _ref$clearAccessibili === void 0 ? 'clear' : _ref$clearAccessibili,\n    clearIcon = _ref.clearIcon,\n    icon = _ref.icon,\n    customIconColor = _ref.iconColor,\n    inputStyle = _ref.inputStyle,\n    onIconPress = _ref.onIconPress,\n    placeholder = _ref.placeholder,\n    _ref$searchAccessibil = _ref.searchAccessibilityLabel,\n    searchAccessibilityLabel = _ref$searchAccessibil === void 0 ? 'search' : _ref$searchAccessibil,\n    style = _ref.style,\n    theme = _ref.theme,\n    value = _ref.value,\n    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var root = React.useRef(null);\n  React.useImperativeHandle(ref, function () {\n    var input = root.current;\n    if (input) {\n      return {\n        focus: function focus() {\n          return input.focus();\n        },\n        clear: function clear() {\n          return input.clear();\n        },\n        setNativeProps: function setNativeProps(args) {\n          return input.setNativeProps(args);\n        },\n        isFocused: function isFocused() {\n          return input.isFocused();\n        },\n        blur: function blur() {\n          return input.blur();\n        }\n      };\n    }\n    var noop = function noop() {\n      throw new Error('TextInput is not available');\n    };\n    return {\n      focus: noop,\n      clear: noop,\n      setNativeProps: noop,\n      isFocused: noop,\n      blur: noop\n    };\n  });\n  var handleClearPress = function handleClearPress() {\n    var _root$current, _rest$onChangeText;\n    (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.clear();\n    (_rest$onChangeText = rest.onChangeText) === null || _rest$onChangeText === void 0 ? void 0 : _rest$onChangeText.call(rest, '');\n  };\n  var colors = theme.colors,\n    roundness = theme.roundness,\n    dark = theme.dark,\n    fonts = theme.fonts;\n  var textColor = colors.text;\n  var font = fonts.regular;\n  var iconColor = customIconColor || (dark ? textColor : (0, _color.default)(textColor).alpha(0.54).rgb().string());\n  var rippleColor = (0, _color.default)(textColor).alpha(0.32).rgb().string();\n  return React.createElement(_Surface.default, {\n    style: [{\n      borderRadius: roundness,\n      elevation: 4\n    }, styles.container, style]\n  }, React.createElement(_IconButton.default, {\n    accessibilityTraits: \"button\",\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onIconPress,\n    color: iconColor,\n    icon: icon || function (_ref2) {\n      var size = _ref2.size,\n        color = _ref2.color;\n      return React.createElement(_MaterialCommunityIcon.default, {\n        name: \"magnify\",\n        color: color,\n        size: size,\n        direction: _reactNative.I18nManager.isRTL ? 'rtl' : 'ltr'\n      });\n    },\n    accessibilityLabel: searchAccessibilityLabel\n  }), React.createElement(_reactNative.TextInput, _extends({\n    style: [styles.input, Object.assign({\n      color: textColor\n    }, font, _reactNative.Platform.select({\n      web: {\n        outline: 'none'\n      }\n    })), inputStyle],\n    placeholder: placeholder || '',\n    placeholderTextColor: colors.placeholder,\n    selectionColor: colors.primary,\n    underlineColorAndroid: \"transparent\",\n    returnKeyType: \"search\",\n    keyboardAppearance: dark ? 'dark' : 'light',\n\n    accessibilityTraits: \"search\",\n    accessibilityRole: \"search\",\n    ref: root,\n    value: value\n  }, rest)), React.createElement(_IconButton.default, {\n    borderless: true,\n    disabled: !value,\n    accessibilityLabel: clearAccessibilityLabel,\n    color: value ? iconColor : 'rgba(255, 255, 255, 0)',\n    rippleColor: rippleColor,\n    onPress: handleClearPress,\n    icon: clearIcon || function (_ref3) {\n      var size = _ref3.size,\n        color = _ref3.color;\n      return React.createElement(_MaterialCommunityIcon.default, {\n        name: \"close\",\n        color: color,\n        size: size,\n        direction: _reactNative.I18nManager.isRTL ? 'rtl' : 'ltr'\n      });\n    },\n\n    accessibilityTraits: \"button\",\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\"\n  }));\n});\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: _reactNative.I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0\n  }\n});\nvar _default = (0, _theming.withTheme)(Searchbar);\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["Searchbar","React","forwardRef","ref","clearAccessibilityLabel","clearIcon","_ref","icon","customIconColor","iconColor","inputStyle","onIconPress","placeholder","searchAccessibilityLabel","style","theme","value","rest","root","useRef","useImperativeHandle","input","current","focus","clear","setNativeProps","args","isFocused","blur","noop","Error","handleClearPress","onChangeText","colors","roundness","dark","fonts","textColor","text","font","regular","color","alpha","rgb","string","rippleColor","Surface","borderRadius","elevation","styles","container","IconButton","accessibilityTraits","accessibilityComponentType","accessibilityRole","borderless","onPress","size","_ref2","MaterialCommunityIcon","name","direction","I18nManager","isRTL","accessibilityLabel","TextInput","Platform","select","web","outline","placeholderTextColor","selectionColor","primary","underlineColorAndroid","returnKeyType","keyboardAppearance","disabled","_ref3","StyleSheet","create","flexDirection","alignItems","flex","fontSize","paddingLeft","alignSelf","textAlign","minWidth","withTheme"],"sources":["Searchbar.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  StyleSheet,\n  StyleProp,\n  TextInput,\n  I18nManager,\n  TextInputProps,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\n\nimport color from 'color';\nimport IconButton from './IconButton';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport type { IconSource } from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\n\nexport type Props = React.ComponentPropsWithRef<typeof TextInput> & {\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  clearAccessibilityLabel?: string;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  searchAccessibilityLabel?: string;\n  /**\n   * Hint text shown when the input is empty.\n   */\n  placeholder?: string;\n  /**\n   * The value of the text input.\n   */\n  value: string;\n  /**\n   * Icon name for the left icon button (see `onIconPress`).\n   */\n  icon?: IconSource;\n  /**\n   * Callback that is called when the text input's text changes.\n   */\n  onChangeText?: (query: string) => void;\n  /**\n   * Callback to execute if we want the left icon to act as button.\n   */\n  onIconPress?: () => void;\n  /**\n   * Set style of the TextInput component inside the searchbar\n   */\n  inputStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Custom color for icon, default will be derived from theme\n   */\n  iconColor?: string;\n  /**\n   * Custom icon for clear button, default will be icon close\n   */\n  clearIcon?: IconSource;\n};\n\ntype TextInputHandles = Pick<\n  TextInput,\n  'setNativeProps' | 'isFocused' | 'clear' | 'blur' | 'focus'\n>;\n\n/**\n * Searchbar is a simple input box where users can type search queries.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/searchbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Searchbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [searchQuery, setSearchQuery] = React.useState('');\n *\n *   const onChangeSearch = query => setSearchQuery(query);\n *\n *   return (\n *     <Searchbar\n *       placeholder=\"Search\"\n *       onChangeText={onChangeSearch}\n *       value={searchQuery}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n\n * ```\n */\nconst Searchbar = React.forwardRef<TextInputHandles, Props>(\n  (\n    {\n      clearAccessibilityLabel = 'clear',\n      clearIcon,\n      icon,\n      iconColor: customIconColor,\n      inputStyle,\n      onIconPress,\n      placeholder,\n      searchAccessibilityLabel = 'search',\n      style,\n      theme,\n      value,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const root = React.useRef<TextInput>(null);\n\n    React.useImperativeHandle(ref, () => {\n      const input = root.current;\n\n      if (input) {\n        return {\n          focus: () => input.focus(),\n          clear: () => input.clear(),\n          setNativeProps: (args: TextInputProps) => input.setNativeProps(args),\n          isFocused: () => input.isFocused(),\n          blur: () => input.blur(),\n        };\n      }\n\n      const noop = () => {\n        throw new Error('TextInput is not available');\n      };\n\n      return {\n        focus: noop,\n        clear: noop,\n        setNativeProps: noop,\n        isFocused: noop,\n        blur: noop,\n      };\n    });\n\n    const handleClearPress = () => {\n      root.current?.clear();\n      rest.onChangeText?.('');\n    };\n\n    const { colors, roundness, dark, fonts } = theme;\n    const textColor = colors.text;\n    const font = fonts.regular;\n    const iconColor =\n      customIconColor ||\n      (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\n    const rippleColor = color(textColor).alpha(0.32).rgb().string();\n\n    return (\n      <Surface\n        style={[\n          { borderRadius: roundness, elevation: 4 },\n          styles.container,\n          style,\n        ]}\n      >\n        <IconButton\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          borderless\n          rippleColor={rippleColor}\n          onPress={onIconPress}\n          color={iconColor}\n          icon={\n            icon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"magnify\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityLabel={searchAccessibilityLabel}\n        />\n        <TextInput\n          style={[\n            styles.input,\n            {\n              color: textColor,\n              ...font,\n              ...Platform.select({ web: { outline: 'none' } }),\n            },\n            inputStyle,\n          ]}\n          placeholder={placeholder || ''}\n          placeholderTextColor={colors.placeholder}\n          selectionColor={colors.primary}\n          underlineColorAndroid=\"transparent\"\n          returnKeyType=\"search\"\n          keyboardAppearance={dark ? 'dark' : 'light'}\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"search\"\n          accessibilityRole=\"search\"\n          ref={root}\n          value={value}\n          {...rest}\n        />\n        <IconButton\n          borderless\n          disabled={!value}\n          accessibilityLabel={clearAccessibilityLabel}\n          color={value ? iconColor : 'rgba(255, 255, 255, 0)'}\n          rippleColor={rippleColor}\n          onPress={handleClearPress}\n          icon={\n            clearIcon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"close\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n        />\n      </Surface>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0,\n  },\n});\n\nexport default withTheme(Searchbar);\n"]},"metadata":{},"sourceType":"script"}